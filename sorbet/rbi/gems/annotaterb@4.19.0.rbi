# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `annotaterb` gem.
# Please instead update this file by running `bin/tapioca gem annotaterb`.


# This module provides methods for annotating config/routes.rb.
#
# source://annotaterb//lib/annotate_rb/helper.rb#3
module AnnotateRb; end

# source://annotaterb//lib/annotate_rb/commands.rb#4
module AnnotateRb::Commands; end

# source://annotaterb//lib/annotate_rb/commands/annotate_models.rb#5
class AnnotateRb::Commands::AnnotateModels
  # source://annotaterb//lib/annotate_rb/commands/annotate_models.rb#6
  def call(options); end
end

# source://annotaterb//lib/annotate_rb/commands/annotate_routes.rb#5
class AnnotateRb::Commands::AnnotateRoutes
  # source://annotaterb//lib/annotate_rb/commands/annotate_routes.rb#6
  def call(options); end
end

# source://annotaterb//lib/annotate_rb/commands/print_help.rb#5
class AnnotateRb::Commands::PrintHelp
  # @return [PrintHelp] a new instance of PrintHelp
  #
  # source://annotaterb//lib/annotate_rb/commands/print_help.rb#6
  def initialize(parser); end

  # source://annotaterb//lib/annotate_rb/commands/print_help.rb#10
  def call(_options); end
end

# source://annotaterb//lib/annotate_rb/commands/print_version.rb#5
class AnnotateRb::Commands::PrintVersion
  # source://annotaterb//lib/annotate_rb/commands/print_version.rb#6
  def call(_options); end
end

# source://annotaterb//lib/annotate_rb/config_finder.rb#4
class AnnotateRb::ConfigFinder
  class << self
    # source://annotaterb//lib/annotate_rb/config_finder.rb#14
    def find_project_dotfile; end

    # source://annotaterb//lib/annotate_rb/config_finder.rb#8
    def find_project_root; end
  end
end

# source://annotaterb//lib/annotate_rb/config_finder.rb#5
AnnotateRb::ConfigFinder::DOTFILE = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/config_generator.rb#4
class AnnotateRb::ConfigGenerator
  class << self
    # source://annotaterb//lib/annotate_rb/config_generator.rb#22
    def default_config_yml; end

    # Returns unset configuration key-value pairs as yaml.
    # Useful when a config file was generated an older version of gem and new
    #   settings get added.
    #
    # source://annotaterb//lib/annotate_rb/config_generator.rb#9
    def unset_config_defaults; end
  end
end

# source://annotaterb//lib/annotate_rb/config_loader.rb#10
class AnnotateRb::ConfigLoader
  class << self
    # source://annotaterb//lib/annotate_rb/config_loader.rb#12
    def load_config; end

    # Method from Rubocop::ConfigLoader
    #
    # @raise [TypeError]
    #
    # source://annotaterb//lib/annotate_rb/config_loader.rb#23
    def load_yaml_configuration(absolute_path); end

    # Read the specified file, or exit with a friendly, concise message on
    # stderr. Care is taken to use the standard OS exit code for a "file not
    # found" error.
    #
    # Method from Rubocop::ConfigLoader
    #
    # source://annotaterb//lib/annotate_rb/config_loader.rb#41
    def read_file(absolute_path); end

    # Method from Rubocop::ConfigLoader
    #
    # source://annotaterb//lib/annotate_rb/config_loader.rb#48
    def yaml_safe_load(yaml_code, filename); end

    # Method from Rubocop::ConfigLoader
    #
    # source://annotaterb//lib/annotate_rb/config_loader.rb#59
    def yaml_safe_load!(yaml_code, filename); end
  end
end

# Raised when a configuration file is not found.
#
# source://annotaterb//lib/annotate_rb/config_loader.rb#7
class AnnotateRb::ConfigNotFoundError < ::StandardError; end

# source://annotaterb//lib/annotate_rb/core.rb#4
module AnnotateRb::Core
  class << self
    # source://annotaterb//lib/annotate_rb/core.rb#10
    def load_rake_tasks; end

    # source://annotaterb//lib/annotate_rb/core.rb#6
    def version; end
  end
end

# Not sure what this does just yet
#
# source://annotaterb//lib/annotate_rb/eager_loader.rb#5
class AnnotateRb::EagerLoader
  class << self
    # source://annotaterb//lib/annotate_rb/eager_loader.rb#7
    def call(options); end
  end
end

# source://annotaterb//lib/annotate_rb/helper.rb#4
module AnnotateRb::Helper
  class << self
    # TODO: Find another implementation that doesn't depend on ActiveSupport
    #
    # source://annotaterb//lib/annotate_rb/helper.rb#11
    def fallback(*args); end

    # source://annotaterb//lib/annotate_rb/helper.rb#6
    def width(string); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator.rb#4
module AnnotateRb::ModelAnnotator; end

# source://annotaterb//lib/annotate_rb/model_annotator/annotated_file.rb#5
module AnnotateRb::ModelAnnotator::AnnotatedFile; end

# Generates the file with fresh annotations
#
# source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#7
class AnnotateRb::ModelAnnotator::AnnotatedFile::Generator
  # @return [Generator] a new instance of Generator
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#8
  def initialize(file_content, new_annotations, annotation_position, parser_klass, parsed_file, options); end

  # @return [String] Returns the annotated file content to be written back to a file
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#22
  def generate; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#93
  def content_annotated_after(parsed, content_without_annotations); end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#47
  def content_annotated_before(parsed, content_without_annotations, write_position); end

  # Determines where to place the annotation based on the nested_position option.
  # When nested_position is enabled, finds the most deeply nested class declaration
  # to place annotations directly above nested classes instead of at the file top.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#65
  def determine_annotation_position(parsed); end

  # Calculates the indentation string to apply to annotations for nested positioning.
  # Extracts leading whitespace from the target line to preserve visual hierarchy
  # and readability of nested code structures.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#86
  def determine_indentation(content_without_annotations, line_number_before); end

  # Formats annotations with appropriate indentation for consistent code structure.
  # Applies the same indentation level as the target line to maintain proper
  # code alignment when using nested positioning.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#78
  def formatted_annotations(content_without_annotations, line_number_before); end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/generator.rb#116
  def wrapped_content(content); end
end

# Updates existing annotations
#
# source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/updater.rb#7
class AnnotateRb::ModelAnnotator::AnnotatedFile::Updater
  # @return [Updater] a new instance of Updater
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/updater.rb#8
  def initialize(file_content, new_annotations, _annotation_position, parsed_file, options); end

  # @return [String] Returns the annotated file content to be written back to a file
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/updater.rb#18
  def update; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/annotated_file/updater.rb#28
  def wrapped_content(content); end
end

# source://annotaterb//lib/annotate_rb/model_annotator/annotation.rb#5
module AnnotateRb::ModelAnnotator::Annotation; end

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#6
class AnnotateRb::ModelAnnotator::Annotation::AnnotationBuilder
  # @return [AnnotationBuilder] a new instance of AnnotationBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#56
  def initialize(klass, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#61
  def build; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#7
class AnnotateRb::ModelAnnotator::Annotation::AnnotationBuilder::Annotation < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [Annotation] a new instance of Annotation
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#10
  def initialize(options, **input); end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#20
  def body; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#33
  def build; end

  # Returns the value of attribute max_size.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#8
  def max_size; end

  # Returns the value of attribute table_comment.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#8
  def table_comment; end

  # Returns the value of attribute table_name.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#8
  def table_name; end

  # Returns the value of attribute version.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#8
  def version; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/annotation_builder.rb#49
  def columns; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/main_header.rb#6
class AnnotateRb::ModelAnnotator::Annotation::MainHeader < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [MainHeader] a new instance of MainHeader
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/main_header.rb#13
  def initialize(version, include_version); end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/main_header.rb#27
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/main_header.rb#18
  def to_markdown; end

  # Returns the value of attribute version.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/main_header.rb#11
  def version; end
end

# Annotate Models plugin use this header
#
# source://annotaterb//lib/annotate_rb/model_annotator/annotation/main_header.rb#8
AnnotateRb::ModelAnnotator::Annotation::MainHeader::PREFIX = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/main_header.rb#9
AnnotateRb::ModelAnnotator::Annotation::MainHeader::PREFIX_MD = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/markdown_header.rb#6
class AnnotateRb::ModelAnnotator::Annotation::MarkdownHeader < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [MarkdownHeader] a new instance of MarkdownHeader
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/markdown_header.rb#12
  def initialize(max_size); end

  # Returns the value of attribute max_size.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/markdown_header.rb#10
  def max_size; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/markdown_header.rb#33
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/markdown_header.rb#16
  def to_markdown; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/markdown_header.rb#7
AnnotateRb::ModelAnnotator::Annotation::MarkdownHeader::MD_NAMES_OVERHEAD = T.let(T.unsafe(nil), Integer)

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/markdown_header.rb#8
AnnotateRb::ModelAnnotator::Annotation::MarkdownHeader::MD_TYPE_ALLOWANCE = T.let(T.unsafe(nil), Integer)

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_footer.rb#6
class AnnotateRb::ModelAnnotator::Annotation::SchemaFooter < ::AnnotateRb::ModelAnnotator::Components::Base
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_footer.rb#15
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_footer.rb#7
  def to_rdoc; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#6
class AnnotateRb::ModelAnnotator::Annotation::SchemaHeader < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [SchemaHeader] a new instance of SchemaHeader
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#25
  def initialize(table_name, table_comment, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#31
  def body; end

  # Returns the value of attribute table_comment.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#23
  def table_comment; end

  # Returns the value of attribute table_name.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#23
  def table_name; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#39
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#43
  def to_markdown; end

  private

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#49
  def display_table_comments?; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#53
  def name; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#7
class AnnotateRb::ModelAnnotator::Annotation::SchemaHeader::TableName < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [TableName] a new instance of TableName
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#10
  def initialize(name); end

  # Returns the value of attribute name.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#8
  def name; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#14
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation/schema_header.rb#18
  def to_markdown; end
end

# Class that encapsulates the logic to decide whether to annotate a model file and its related files or not.
#
# source://annotaterb//lib/annotate_rb/model_annotator/annotation_decider.rb#6
class AnnotateRb::ModelAnnotator::AnnotationDecider
  # @return [AnnotationDecider] a new instance of AnnotationDecider
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_decider.rb#9
  def initialize(file, options); end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_decider.rb#14
  def annotate?; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_decider.rb#46
  def file_contains_skip_annotation; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/annotation_decider.rb#7
AnnotateRb::ModelAnnotator::AnnotationDecider::SKIP_ANNOTATION_PREFIX = T.let(T.unsafe(nil), String)

# Plain old Ruby object for holding the differences
#
# source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff.rb#6
class AnnotateRb::ModelAnnotator::AnnotationDiff
  # @return [AnnotationDiff] a new instance of AnnotationDiff
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff.rb#9
  def initialize(current_columns, new_columns); end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff.rb#14
  def changed?; end

  # Returns the value of attribute current_columns.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff.rb#7
  def current_columns; end

  # Returns the value of attribute new_columns.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff.rb#7
  def new_columns; end
end

# Compares the current file content and new annotation block and generates the column annotation differences
#
# source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff_generator.rb#6
class AnnotateRb::ModelAnnotator::AnnotationDiffGenerator
  # @param file_content [String] The current file content of the model file we intend to annotate
  # @param annotation_block [String] The annotation block we intend to write to the model file
  # @return [AnnotationDiffGenerator] a new instance of AnnotationDiffGenerator
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff_generator.rb#23
  def initialize(file_content, annotation_block); end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff_generator.rb#28
  def generate; end

  class << self
    # source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff_generator.rb#16
    def call(file_content, annotation_block); end
  end
end

# Example matches:
#   - "#  id              :uuid             not null, primary key"
#   - "#  title(length 255) :string          not null"
#   - "#  status(a/b/c)    :string           not null"
#   - "#  created_at       :datetime         not null"
#   - "#  updated_at       :datetime         not null"
#
# source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff_generator.rb#14
AnnotateRb::ModelAnnotator::AnnotationDiffGenerator::COLUMN_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://annotaterb//lib/annotate_rb/model_annotator/annotation_diff_generator.rb#7
AnnotateRb::ModelAnnotator::AnnotationDiffGenerator::HEADER_PATTERN = T.let(T.unsafe(nil), Regexp)

# source://annotaterb//lib/annotate_rb/model_annotator/annotator.rb#5
class AnnotateRb::ModelAnnotator::Annotator
  # @return [Annotator] a new instance of Annotator
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/annotator.rb#16
  def initialize(options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotator.rb#20
  def do_annotations; end

  # source://annotaterb//lib/annotate_rb/model_annotator/annotator.rb#24
  def remove_annotations; end

  class << self
    # source://annotaterb//lib/annotate_rb/model_annotator/annotator.rb#7
    def do_annotations(options); end

    # source://annotaterb//lib/annotate_rb/model_annotator/annotator.rb#11
    def remove_annotations(options); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/bad_model_file_error.rb#5
class AnnotateRb::ModelAnnotator::BadModelFileError < ::LoadError
  # source://annotaterb//lib/annotate_rb/model_annotator/bad_model_file_error.rb#6
  def to_s; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation.rb#5
module AnnotateRb::ModelAnnotator::CheckConstraintAnnotation; end

# source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation.rb#6
class AnnotateRb::ModelAnnotator::CheckConstraintAnnotation::Annotation
  # @return [Annotation] a new instance of Annotation
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation.rb#9
  def initialize(constraints); end

  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation.rb#13
  def body; end

  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation.rb#26
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation.rb#22
  def to_markdown; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation.rb#7
AnnotateRb::ModelAnnotator::CheckConstraintAnnotation::Annotation::HEADER_TEXT = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation_builder.rb#6
class AnnotateRb::ModelAnnotator::CheckConstraintAnnotation::AnnotationBuilder
  # @return [AnnotationBuilder] a new instance of AnnotationBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation_builder.rb#7
  def initialize(model, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/annotation_builder.rb#12
  def build; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/check_constraint_component.rb#6
class AnnotateRb::ModelAnnotator::CheckConstraintAnnotation::CheckConstraintComponent < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [CheckConstraintComponent] a new instance of CheckConstraintComponent
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/check_constraint_component.rb#9
  def initialize(name, expression, max_size); end

  # Returns the value of attribute expression.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/check_constraint_component.rb#7
  def expression; end

  # Returns the value of attribute max_size.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/check_constraint_component.rb#7
  def max_size; end

  # Returns the value of attribute name.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/check_constraint_component.rb#7
  def name; end

  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/check_constraint_component.rb#15
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/check_constraint_annotation/check_constraint_component.rb#21
  def to_markdown; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation.rb#5
module AnnotateRb::ModelAnnotator::ColumnAnnotation; end

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/annotation_builder.rb#6
class AnnotateRb::ModelAnnotator::ColumnAnnotation::AnnotationBuilder
  # @return [AnnotationBuilder] a new instance of AnnotationBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/annotation_builder.rb#7
  def initialize(column, model, max_size, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/annotation_builder.rb#14
  def build; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/attributes_builder.rb#6
class AnnotateRb::ModelAnnotator::ColumnAnnotation::AttributesBuilder
  # @return [AttributesBuilder] a new instance of AttributesBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/attributes_builder.rb#10
  def initialize(column, options, is_primary_key, column_indices, column_defaults); end

  # Get the list of attributes that should be included in the annotation for
  # a given column.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/attributes_builder.rb#19
  def build; end

  # Historically, the old gem looked for the option being set to "skip"
  # e.g. hide_default_column_types: "skip"
  #
  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/attributes_builder.rb#105
  def hide_default?; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/attributes_builder.rb#96
  def sorted_column_indices; end
end

# Don't show default value for these column types
#
# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/attributes_builder.rb#8
AnnotateRb::ModelAnnotator::ColumnAnnotation::AttributesBuilder::NO_DEFAULT_COL_TYPES = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#6
class AnnotateRb::ModelAnnotator::ColumnAnnotation::ColumnComponent < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [ColumnComponent] a new instance of ColumnComponent
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#13
  def initialize(column:, max_name_size:, type:, attributes:, position_of_column_comment:, max_attributes_size:); end

  # Returns the value of attribute attributes.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#11
  def attributes; end

  # Returns the value of attribute column.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#11
  def column; end

  # Returns the value of attribute max_attributes_size.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#11
  def max_attributes_size; end

  # Returns the value of attribute max_name_size.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#11
  def max_name_size; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#22
  def name; end

  # Returns the value of attribute position_of_column_comment.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#11
  def position_of_column_comment; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#74
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#54
  def to_markdown; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#31
  def to_rdoc; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#39
  def to_yard; end

  # Returns the value of attribute type.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#11
  def type; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#98
  def map_col_type_to_ruby_classes(col_type); end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#88
  def mb_chars_ljust(string, length); end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#111
  def non_ascii_length(string); end
end

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#8
AnnotateRb::ModelAnnotator::ColumnAnnotation::ColumnComponent::BARE_TYPE_ALLOWANCE = T.let(T.unsafe(nil), Integer)

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#7
AnnotateRb::ModelAnnotator::ColumnAnnotation::ColumnComponent::MD_TYPE_ALLOWANCE = T.let(T.unsafe(nil), Integer)

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_component.rb#9
AnnotateRb::ModelAnnotator::ColumnAnnotation::ColumnComponent::MIN_SPACES_BEFORE_COMMENT = T.let(T.unsafe(nil), Integer)

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#6
class AnnotateRb::ModelAnnotator::ColumnAnnotation::ColumnWrapper
  # @return [ColumnWrapper] a new instance of ColumnWrapper
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#7
  def initialize(column, column_defaults, options); end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#80
  def array?; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#29
  def column_type_string; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#92
  def default_function; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#21
  def default_string; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#17
  def default_value; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#70
  def geometric_type; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#66
  def geometric_type?; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#61
  def geometry_type; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#57
  def geometry_type?; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#53
  def limit; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#84
  def name; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#41
  def null; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#45
  def precision; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#13
  def raw_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#49
  def scale; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#75
  def srid; end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#25
  def type; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#37
  def unsigned?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#88
  def virtual?; end

  private

  # Simple quoting for the default column value
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/column_wrapper.rb#99
  def quote(value); end
end

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/default_value_builder.rb#6
class AnnotateRb::ModelAnnotator::ColumnAnnotation::DefaultValueBuilder
  # @return [DefaultValueBuilder] a new instance of DefaultValueBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/default_value_builder.rb#7
  def initialize(value, options); end

  # Returns the value to get written to file by file.puts. Strings get written to file so escaped quoted strings
  # get written as quoted. For example, if `value: "\"some_string\""` then "some_string" gets written.
  # Same with arrays, if `value: "[\"a\", \"b\", \"c\"]"` then `["a", "b", "c"]` gets written.
  #
  # @example "\"some_string\""
  # @example "NULL"
  # @example "1.2"
  # @return [String]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/default_value_builder.rb#20
  def build; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/default_value_builder.rb#30
  def quote(value); end

  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/default_value_builder.rb#46
  def quote_array(value); end
end

# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/type_builder.rb#6
class AnnotateRb::ModelAnnotator::ColumnAnnotation::TypeBuilder
  # @return [TypeBuilder] a new instance of TypeBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/type_builder.rb#11
  def initialize(column, options, column_defaults); end

  # Returns the formatted column type as a string.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/type_builder.rb#18
  def build; end

  private

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/type_builder.rb#44
  def hide_limit?; end
end

# Don't show limit (#) on these column types
# Example: show "integer" instead of "integer(4)"
#
# source://annotaterb//lib/annotate_rb/model_annotator/column_annotation/type_builder.rb#9
AnnotateRb::ModelAnnotator::ColumnAnnotation::TypeBuilder::NO_LIMIT_COL_TYPES = T.let(T.unsafe(nil), Array)

# Shared annotation components
#
# source://annotaterb//lib/annotate_rb/model_annotator/components.rb#6
module AnnotateRb::ModelAnnotator::Components; end

# source://annotaterb//lib/annotate_rb/model_annotator/components.rb#7
class AnnotateRb::ModelAnnotator::Components::Base
  # @raise [NoMethodError]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#21
  def to_default; end

  # Methods default to #to_default, unless overridden by sub class
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#9
  def to_markdown; end

  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#13
  def to_rdoc; end

  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#17
  def to_yard; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/components.rb#40
class AnnotateRb::ModelAnnotator::Components::BlankCommentLine < ::AnnotateRb::ModelAnnotator::Components::Base
  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#41
  def to_default; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/components.rb#46
class AnnotateRb::ModelAnnotator::Components::Header < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [Header] a new instance of Header
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#49
  def initialize(header); end

  # Returns the value of attribute header.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#47
  def header; end

  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#53
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#57
  def to_markdown; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/components.rb#34
class AnnotateRb::ModelAnnotator::Components::LineBreak < ::AnnotateRb::ModelAnnotator::Components::Base
  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#35
  def to_default; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/components.rb#26
class AnnotateRb::ModelAnnotator::Components::NilComponent < ::AnnotateRb::ModelAnnotator::Components::Base
  # Used when we want to return a component, but does not affect annotation generation.
  # It will get ignored when the consuming object calls Array#compact
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/components.rb#29
  def to_default; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/file_name_resolver.rb#5
class AnnotateRb::ModelAnnotator::FileNameResolver
  class << self
    # source://annotaterb//lib/annotate_rb/model_annotator/file_name_resolver.rb#7
    def call(filename_template, model_name, table_name); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser.rb#5
module AnnotateRb::ModelAnnotator::FileParser; end

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#6
class AnnotateRb::ModelAnnotator::FileParser::AnnotationFinder
  # @return [AnnotationFinder] a new instance of AnnotationFinder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#22
  def initialize(content, wrapper_open, wrapper_close, parser); end

  # Returns true if annotations are detected in the file content
  #
  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#95
  def annotated?; end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#86
  def annotation; end

  # Returns the line index (not the line number) that the annotation ends, inclusive.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#18
  def annotation_end; end

  # Returns the line index (not the line number) that the annotation starts.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#16
  def annotation_start; end

  # Returns the value of attribute parser.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#20
  def parser; end

  # Find the annotation's line start and line end
  #
  # @raise [NoAnnotationFound]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#32
  def run; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#7
AnnotateRb::ModelAnnotator::FileParser::AnnotationFinder::COMPAT_PREFIX = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#8
AnnotateRb::ModelAnnotator::FileParser::AnnotationFinder::COMPAT_PREFIX_MD = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#9
AnnotateRb::ModelAnnotator::FileParser::AnnotationFinder::DEFAULT_ANNOTATION_ENDING = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#11
class AnnotateRb::ModelAnnotator::FileParser::AnnotationFinder::MalformedAnnotation < ::StandardError; end

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/annotation_finder.rb#13
class AnnotateRb::ModelAnnotator::FileParser::AnnotationFinder::NoAnnotationFound < ::StandardError; end

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#8
class AnnotateRb::ModelAnnotator::FileParser::CustomParser < ::Ripper
  # @return [CustomParser] a new instance of CustomParser
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#20
  def initialize(input, *_arg1, **_arg2, &_arg3); end

  # Returns the value of attribute comments.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#18
  def comments; end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#36
  def ends; end

  # Gets the `FactoryBot` line in:
  # ```ruby
  # FactoryBot.define do
  #   factory :user do
  #     ...
  #   end
  # end
  # ```
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#140
  def on_call(receiver, operator, message); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#73
  def on_class(const, _superclass, _bodystmt); end

  # Gets the `factory` block start in:
  # ```ruby
  # factory :user, aliases: [:author, :commenter] do
  #   ...
  # end
  # ```
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#156
  def on_command(message, args); end

  # Gets the `RSpec` opening in:
  # ```ruby
  # RSpec.describe "Collapsed::TestModel" do
  #   # Deliberately left empty
  # end
  # ```
  # receiver: "RSpec", operator: ".", method: "describe"
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#87
  def on_command_call(receiver, operator, method, args); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#199
  def on_comment(value); end

  # Used for `class Foo::User`
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#60
  def on_const_path_ref(_left, const); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#53
  def on_const_ref(const); end

  # Matches the `end` in:
  # ```ruby
  # factory :user, aliases: [:author, :commenter] do
  #   first_name { "John" }
  #   last_name { "Doe" }
  #   date_of_birth { 18.years.ago }
  # end
  # ```
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#173
  def on_do_block(block_var, bodystmt); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#193
  def on_embdoc(value); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#181
  def on_embdoc_beg(value); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#187
  def on_embdoc_end(value); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#123
  def on_method_add_arg(method, args); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#96
  def on_method_add_block(method, block); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#66
  def on_module(const, _bodystmt); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#44
  def on_program(*_arg0, **_arg1, &_arg2); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#32
  def starts; end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#40
  def type_map; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#207
  def add_event(event, const, lineno); end

  class << self
    # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/custom_parser.rb#13
    def parse(string); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file.rb#6
class AnnotateRb::ModelAnnotator::FileParser::ParsedFile
  # @return [ParsedFile] a new instance of ParsedFile
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file.rb#9
  def initialize(file_content, new_annotations, parser_klass, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file.rb#17
  def parse; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file.rb#7
AnnotateRb::ModelAnnotator::FileParser::ParsedFile::SKIP_ANNOTATION_STRING = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#6
class AnnotateRb::ModelAnnotator::FileParser::ParsedFileResult
  # @return [ParsedFileResult] a new instance of ParsedFileResult
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#7
  def initialize(has_annotations:, has_skip_string:, annotations_changed:, annotations:, annotations_with_whitespace:, has_leading_whitespace:, has_trailing_whitespace:, annotation_position:, starts:, ends:); end

  # Returns the value of attribute annotation_position.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#31
  def annotation_position; end

  # Returns the value of attribute annotations.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#31
  def annotations; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#36
  def annotations_changed?; end

  # Returns annotations with new line before and after if they exist
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#34
  def annotations_with_whitespace; end

  # Returns the value of attribute ends.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#31
  def ends; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#40
  def has_annotations?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#48
  def has_leading_whitespace?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#44
  def has_skip_string?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#52
  def has_trailing_whitespace?; end

  # Returns the value of attribute starts.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/parsed_file_result.rb#31
  def starts; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#8
class AnnotateRb::ModelAnnotator::FileParser::YmlParser
  # @return [YmlParser] a new instance of YmlParser
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#17
  def initialize(input); end

  # Returns the value of attribute comments.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#15
  def comments; end

  # Returns the value of attribute ends.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#15
  def ends; end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#24
  def parse; end

  # Returns the value of attribute starts.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#15
  def starts; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#31
  def parse_comments; end

  # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#40
  def parse_yml; end

  class << self
    # source://annotaterb//lib/annotate_rb/model_annotator/file_parser/yml_parser.rb#10
    def parse(string); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/file_to_parser_mapper.rb#5
class AnnotateRb::ModelAnnotator::FileToParserMapper
  class << self
    # @raise [UnsupportedFileTypeError]
    #
    # source://annotaterb//lib/annotate_rb/model_annotator/file_to_parser_mapper.rb#14
    def map(file_name); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/file_to_parser_mapper.rb#8
AnnotateRb::ModelAnnotator::FileToParserMapper::MAP = T.let(T.unsafe(nil), Hash)

# source://annotaterb//lib/annotate_rb/model_annotator/file_to_parser_mapper.rb#6
class AnnotateRb::ModelAnnotator::FileToParserMapper::UnsupportedFileTypeError < ::StandardError; end

# source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation.rb#5
module AnnotateRb::ModelAnnotator::ForeignKeyAnnotation; end

# source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation.rb#6
class AnnotateRb::ModelAnnotator::ForeignKeyAnnotation::Annotation
  # @return [Annotation] a new instance of Annotation
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation.rb#9
  def initialize(foreign_keys); end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation.rb#13
  def body; end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation.rb#26
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation.rb#22
  def to_markdown; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation.rb#7
AnnotateRb::ModelAnnotator::ForeignKeyAnnotation::Annotation::HEADER_TEXT = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation_builder.rb#6
class AnnotateRb::ModelAnnotator::ForeignKeyAnnotation::AnnotationBuilder
  # @return [AnnotationBuilder] a new instance of AnnotationBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation_builder.rb#7
  def initialize(model, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/annotation_builder.rb#12
  def build; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component.rb#6
class AnnotateRb::ModelAnnotator::ForeignKeyAnnotation::ForeignKeyComponent < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [ForeignKeyComponent] a new instance of ForeignKeyComponent
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component.rb#9
  def initialize(formatted_name, constraints_info, ref_info, max_size); end

  # Returns the value of attribute constraints_info.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component.rb#7
  def constraints_info; end

  # Returns the value of attribute formatted_name.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component.rb#7
  def formatted_name; end

  # Returns the value of attribute max_size.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component.rb#7
  def max_size; end

  # Returns the value of attribute ref_info.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component.rb#7
  def ref_info; end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component.rb#23
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component.rb#16
  def to_markdown; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#6
class AnnotateRb::ModelAnnotator::ForeignKeyAnnotation::ForeignKeyComponentBuilder
  # @return [ForeignKeyComponentBuilder] a new instance of ForeignKeyComponentBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#9
  def initialize(foreign_key, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#30
  def constraints_info; end

  # Returns the value of attribute foreign_key.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#7
  def foreign_key; end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#14
  def formatted_name; end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#39
  def ref_info; end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#22
  def stringified_columns; end

  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#26
  def stringified_primary_key; end

  private

  # The fk columns or primary key might be composite (an Array), so format them into a string for the annotation
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/foreign_key_annotation/foreign_key_component_builder.rb#50
  def stringify(columns); end
end

# source://annotaterb//lib/annotate_rb/model_annotator/index_annotation.rb#5
module AnnotateRb::ModelAnnotator::IndexAnnotation; end

# source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation.rb#6
class AnnotateRb::ModelAnnotator::IndexAnnotation::Annotation
  # @return [Annotation] a new instance of Annotation
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation.rb#9
  def initialize(indexes); end

  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation.rb#13
  def body; end

  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation.rb#26
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation.rb#22
  def to_markdown; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation.rb#7
AnnotateRb::ModelAnnotator::IndexAnnotation::Annotation::HEADER_TEXT = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation_builder.rb#6
class AnnotateRb::ModelAnnotator::IndexAnnotation::AnnotationBuilder
  # @return [AnnotationBuilder] a new instance of AnnotationBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation_builder.rb#7
  def initialize(model, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/annotation_builder.rb#12
  def build; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/index_component.rb#6
class AnnotateRb::ModelAnnotator::IndexAnnotation::IndexComponent < ::AnnotateRb::ModelAnnotator::Components::Base
  # @return [IndexComponent] a new instance of IndexComponent
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/index_component.rb#9
  def initialize(index, max_size, options); end

  # Returns the value of attribute index.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/index_component.rb#7
  def index; end

  # Returns the value of attribute max_size.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/index_component.rb#7
  def max_size; end

  # Returns the value of attribute options.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/index_component.rb#7
  def options; end

  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/index_component.rb#15
  def to_default; end

  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/index_component.rb#62
  def to_markdown; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/index_annotation/index_component.rb#115
  def columns_info; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/model_class_getter.rb#5
class AnnotateRb::ModelAnnotator::ModelClassGetter
  class << self
    # Retrieve the classes belonging to the model names we're asked to process
    # Check for namespaced models in subdirectories as well as models
    # in subdirectories without namespacing.
    #
    # source://annotaterb//lib/annotate_rb/model_annotator/model_class_getter.rb#10
    def call(file, options); end

    private

    # Retrieve loaded model class
    #
    # source://annotaterb//lib/annotate_rb/model_annotator/model_class_getter.rb#40
    def get_loaded_model(model_path, file); end

    # Retrieve loaded model class by path to the file where it's supposed to be defined.
    #
    # source://annotaterb//lib/annotate_rb/model_annotator/model_class_getter.rb#56
    def get_loaded_model_by_path(model_path); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/model_files_getter.rb#5
class AnnotateRb::ModelAnnotator::ModelFilesGetter
  class << self
    # Return a list of the model files to annotate.
    # If we have command line arguments, they're assumed to the path
    # of model files from root dir. Otherwise we take all the model files
    # in the model_dir directory.
    #
    # source://annotaterb//lib/annotate_rb/model_annotator/model_files_getter.rb#11
    def call(options); end

    private

    # source://annotaterb//lib/annotate_rb/model_annotator/model_files_getter.rb#41
    def list_model_files_from_argument(options); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#5
class AnnotateRb::ModelAnnotator::ModelWrapper
  # @return [ModelWrapper] a new instance of ModelWrapper
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#11
  def initialize(klass, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#145
  def _retrieve_indexes_from_table; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#129
  def built_attributes; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#180
  def classified_sort(cols, grouped_polymorphic); end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#63
  def column_defaults; end

  # Gets the columns of the ActiveRecord model, processes them, and then returns them.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#17
  def columns; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#37
  def connection; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#58
  def has_table_comments?; end

  # These are the columns that the globalize gem needs to work but
  # are not necessary for the models to be displayed as annotations.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#215
  def ignored_translation_table_columns; end

  # TODO: Simplify this conditional
  #
  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#113
  def is_column_primary_key?(column_name); end

  # Calculates the max width of the schema for the model by looking at the columns, schema comments, with respect
  # to the options.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#89
  def max_schema_info_width; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#225
  def migration_version; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#83
  def model_name; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#176
  def position_of_column_comment; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#46
  def primary_key; end

  # Returns the unmodified model columns
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#42
  def raw_columns; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#141
  def retrieve_indexes_from_table; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#54
  def table_comments; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#50
  def table_exists?; end

  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#79
  def table_name; end

  # Add columns managed by the globalize gem if this gem is being used.
  # TODO: Audit if this is still needed, it seems like Globalize gem is no longer maintained
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#69
  def translated_columns; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#166
  def with_comments?; end
end

# Should be the wrapper for an ActiveRecord model that serves as the source of truth of the model
# of the model that we're annotating
#
# source://annotaterb//lib/annotate_rb/model_annotator/model_wrapper.rb#9
AnnotateRb::ModelAnnotator::ModelWrapper::DEFAULT_TIMESTAMP_COLUMNS = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#5
class AnnotateRb::ModelAnnotator::PatternGetter
  # @return [PatternGetter] a new instance of PatternGetter
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#59
  def initialize(options, pattern_types = T.unsafe(nil)); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#64
  def get; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#126
  def active_admin_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#120
  def additional_file_patterns; end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#107
  def controller_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#113
  def controller_test_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#172
  def factory_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#147
  def fixture_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#87
  def generate(root_directory, pattern_type); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#133
  def helper_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#160
  def request_spec_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#166
  def routing_spec_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#156
  def scaffold_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#191
  def serialize_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#197
  def serializer_test_files(root_directory); end

  # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#139
  def test_files(root_directory); end

  class << self
    # source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#54
    def call(options, pattern_types = T.unsafe(nil)); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#6
module AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns; end

# Active admin registry files
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#11
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::ACTIVEADMIN_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#37
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::BLUEPRINTS_SPEC_DIR = T.let(T.unsafe(nil), String)

# Machinist http://github.com/notahat/machinist
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#36
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::BLUEPRINTS_TEST_DIR = T.let(T.unsafe(nil), String)

# Controller files
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#8
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::CONTROLLER_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#27
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::CONTROLLER_SPEC_DIR = T.let(T.unsafe(nil), String)

# Other test files
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#26
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::CONTROLLER_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#33
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::EXEMPLARS_SPEC_DIR = T.let(T.unsafe(nil), String)

# Object Daddy http://github.com/flogic/object_daddy/tree/master
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#32
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::EXEMPLARS_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#45
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::FABRICATORS_SPEC_DIR = T.let(T.unsafe(nil), String)

# Fabrication https://github.com/paulelliott/fabrication.git
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#44
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::FABRICATORS_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#41
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::FACTORY_BOT_SPEC_DIR = T.let(T.unsafe(nil), String)

# Factory Bot https://github.com/thoughtbot/factory_bot
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#40
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::FACTORY_BOT_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#23
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::FIXTURE_SPEC_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#22
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::FIXTURE_TEST_DIR = T.let(T.unsafe(nil), String)

# Helper files
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#14
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::HELPER_DIR = T.let(T.unsafe(nil), String)

# since rails 4.0
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#19
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::MODEL_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#28
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::REQUEST_SPEC_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#29
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::ROUTING_SPEC_DIR = T.let(T.unsafe(nil), String)

# Serializers https://github.com/rails-api/active_model_serializers
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#48
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::SERIALIZERS_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#50
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::SERIALIZERS_SPEC_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#49
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::SERIALIZERS_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#20
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::SPEC_MODEL_DIR = T.let(T.unsafe(nil), String)

# File.join for windows reverse bar compat?
# I dont use windows, can`t test
#
# source://annotaterb//lib/annotate_rb/model_annotator/pattern_getter.rb#18
AnnotateRb::ModelAnnotator::PatternGetter::FilePatterns::UNIT_TEST_DIR = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/model_annotator/project_annotation_remover.rb#5
class AnnotateRb::ModelAnnotator::ProjectAnnotationRemover
  # @return [ProjectAnnotationRemover] a new instance of ProjectAnnotationRemover
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/project_annotation_remover.rb#6
  def initialize(options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/project_annotation_remover.rb#10
  def remove_annotations; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/project_annotation_remover.rb#39
  def build_instructions_for_file(file); end

  # source://annotaterb//lib/annotate_rb/model_annotator/project_annotation_remover.rb#60
  def model_files; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/project_annotator.rb#5
class AnnotateRb::ModelAnnotator::ProjectAnnotator
  # @return [ProjectAnnotator] a new instance of ProjectAnnotator
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/project_annotator.rb#6
  def initialize(options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/project_annotator.rb#10
  def annotate; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/project_annotator.rb#36
  def build_instructions_for_file(file); end

  # source://annotaterb//lib/annotate_rb/model_annotator/project_annotator.rb#67
  def model_files; end
end

# Given a model file and options, this class will return a list of related files (e.g. fixture, controllers, etc)
# to also annotate
#
# source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#7
class AnnotateRb::ModelAnnotator::RelatedFilesListBuilder
  # @return [RelatedFilesListBuilder] a new instance of RelatedFilesListBuilder
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#13
  def initialize(file, model_name, table_name, options); end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#20
  def build; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#205
  def add_additional_file_patterns; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#195
  def add_related_admin_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#145
  def add_related_controller_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#155
  def add_related_controller_test_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#115
  def add_related_factory_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#105
  def add_related_fixture_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#185
  def add_related_helper_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#165
  def add_related_request_spec_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#175
  def add_related_routing_spec_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#125
  def add_related_serializer_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#135
  def add_related_serializer_test_files; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#95
  def add_related_test_files; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#62
  def exclude_controller_tests?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#41
  def exclude_model_test_files?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#78
  def exclude_request_specs?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#70
  def exclude_routing_specs?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#54
  def exclude_serializer_tests?; end

  # source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#86
  def related_files_for_pattern(pattern_type); end
end

# Valid options when `:exclude_tests` is an Array, note that symbols are expected
#
# source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#11
AnnotateRb::ModelAnnotator::RelatedFilesListBuilder::EXCLUDE_TEST_OPTIONS = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/model_annotator/related_files_list_builder.rb#8
AnnotateRb::ModelAnnotator::RelatedFilesListBuilder::RELATED_TYPES = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotation_remover.rb#5
class AnnotateRb::ModelAnnotator::SingleFileAnnotationRemover
  class << self
    # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotation_remover.rb#11
    def call(file_name, options = T.unsafe(nil)); end

    # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotation_remover.rb#7
    def call_with_instructions(instruction); end
  end
end

# source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator.rb#5
class AnnotateRb::ModelAnnotator::SingleFileAnnotator
  class << self
    # Add a schema block to a file. If the file already contains
    # a schema info block (a comment starting with "== Schema Information"),
    # check if it matches the block that is already there. If so, leave it be.
    # If not, remove the old info block and write a new one.
    #
    # == Returns:
    # true or false depending on whether the file was modified.
    #
    # === Options (opts)
    #  :force<Symbol>:: whether to update the file even if it doesn't seem to need it.
    #  :position_in_*<Symbol>:: where to place the annotated section in fixture or model file,
    #                           :before, :top, :after or :bottom. Default is :before.
    #
    # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator.rb#24
    def call(file_name, annotation, annotation_position, options); end

    # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator.rb#7
    def call_with_instructions(instruction); end
  end
end

# A plain old Ruby object (PORO) that contains all necessary information for SingleFileAnnotator
#
# source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator_instruction.rb#6
class AnnotateRb::ModelAnnotator::SingleFileAnnotatorInstruction
  # @return [SingleFileAnnotatorInstruction] a new instance of SingleFileAnnotatorInstruction
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator_instruction.rb#7
  def initialize(file, annotation, position, options); end

  # Returns the value of attribute annotation.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator_instruction.rb#14
  def annotation; end

  # Returns the value of attribute file.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator_instruction.rb#14
  def file; end

  # Returns the value of attribute options.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator_instruction.rb#14
  def options; end

  # Returns the value of attribute position.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/single_file_annotator_instruction.rb#14
  def position; end
end

# A plain old Ruby object (PORO) that contains all necessary information for SingleFileAnnotationRemover
#
# source://annotaterb//lib/annotate_rb/model_annotator/single_file_remove_annotation_instruction.rb#6
class AnnotateRb::ModelAnnotator::SingleFileRemoveAnnotationInstruction
  # @return [SingleFileRemoveAnnotationInstruction] a new instance of SingleFileRemoveAnnotationInstruction
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/single_file_remove_annotation_instruction.rb#7
  def initialize(file, options); end

  # Returns the value of attribute file.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/single_file_remove_annotation_instruction.rb#12
  def file; end

  # Returns the value of attribute options.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/single_file_remove_annotation_instruction.rb#12
  def options; end
end

# source://annotaterb//lib/annotate_rb/model_annotator/zeitwerk_class_getter.rb#5
class AnnotateRb::ModelAnnotator::ZeitwerkClassGetter
  # @return [ZeitwerkClassGetter] a new instance of ZeitwerkClassGetter
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/zeitwerk_class_getter.rb#12
  def initialize(file, options); end

  # @return [Constant, nil] Attempts to return the model class constant (e.g. User) defined in the model file
  #   can return `nil` if the file does not define the constant.
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/zeitwerk_class_getter.rb#19
  def call; end

  private

  # source://annotaterb//lib/annotate_rb/model_annotator/zeitwerk_class_getter.rb#34
  def constant(loader); end

  # source://annotaterb//lib/annotate_rb/model_annotator/zeitwerk_class_getter.rb#82
  def constant_using_cpath(loader); end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/model_annotator/zeitwerk_class_getter.rb#102
  def supports_cpath?; end

  class << self
    # source://annotaterb//lib/annotate_rb/model_annotator/zeitwerk_class_getter.rb#7
    def call(file, options); end
  end
end

# Used to hold all of the options when annotating models and routes.
# Should be the source of truth for what are valid options.
#
# source://annotaterb//lib/annotate_rb/options.rb#8
class AnnotateRb::Options
  extend ::Forwardable

  # @return [Options] a new instance of Options
  #
  # source://annotaterb//lib/annotate_rb/options.rb#172
  def initialize(options = T.unsafe(nil), state = T.unsafe(nil)); end

  # source://annotaterb//lib/annotate_rb/options.rb#170
  def [](*args, **_arg1, &block); end

  # source://annotaterb//lib/annotate_rb/options.rb#232
  def get_state(key); end

  # source://annotaterb//lib/annotate_rb/options.rb#185
  def load_defaults; end

  # source://annotaterb//lib/annotate_rb/options.rb#236
  def print; end

  # source://annotaterb//lib/annotate_rb/options.rb#223
  def set_state(key, value, overwrite = T.unsafe(nil)); end

  # source://annotaterb//lib/annotate_rb/options.rb#181
  def to_h; end

  # source://annotaterb//lib/annotate_rb/options.rb#219
  def with_default_fallback(key); end

  private

  # Guard against user inputting strings instead of symbols
  #
  # source://annotaterb//lib/annotate_rb/options.rb#243
  def symbolize_exclude_tests; end

  class << self
    # source://annotaterb//lib/annotate_rb/options.rb#12
    def from(options = T.unsafe(nil), state = T.unsafe(nil)); end
  end
end

# source://annotaterb//lib/annotate_rb/options.rb#163
AnnotateRb::Options::ALL_OPTION_KEYS = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/options.rb#100
AnnotateRb::Options::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://annotaterb//lib/annotate_rb/options.rb#28
AnnotateRb::Options::FLAG_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://annotaterb//lib/annotate_rb/options.rb#102
AnnotateRb::Options::FLAG_OPTION_KEYS = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/options.rb#64
AnnotateRb::Options::OTHER_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://annotaterb//lib/annotate_rb/options.rb#136
AnnotateRb::Options::OTHER_OPTION_KEYS = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/options.rb#91
AnnotateRb::Options::PATH_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://annotaterb//lib/annotate_rb/options.rb#156
AnnotateRb::Options::PATH_OPTION_KEYS = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/options.rb#167
AnnotateRb::Options::POSITION_DEFAULT = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/options.rb#17
AnnotateRb::Options::POSITION_OPTIONS = T.let(T.unsafe(nil), Hash)

# Class for handling command line arguments
#
# source://annotaterb//lib/annotate_rb/parser.rb#5
class AnnotateRb::Parser
  # @return [Parser] a new instance of Parser
  #
  # source://annotaterb//lib/annotate_rb/parser.rb#37
  def initialize(args, existing_options); end

  # source://annotaterb//lib/annotate_rb/parser.rb#45
  def parse; end

  # source://annotaterb//lib/annotate_rb/parser.rb#55
  def remaining_args; end

  private

  # source://annotaterb//lib/annotate_rb/parser.rb#73
  def act_on_command; end

  # source://annotaterb//lib/annotate_rb/parser.rb#160
  def add_model_options_to_parser(option_parser); end

  # source://annotaterb//lib/annotate_rb/parser.rb#367
  def add_options_to_parser(option_parser); end

  # source://annotaterb//lib/annotate_rb/parser.rb#296
  def add_position_options_to_parser(option_parser); end

  # source://annotaterb//lib/annotate_rb/parser.rb#279
  def add_route_options_to_parser(option_parser); end

  # source://annotaterb//lib/annotate_rb/parser.rb#138
  def add_utils_to_parser(option_parser); end

  # source://annotaterb//lib/annotate_rb/parser.rb#117
  def add_wrapper_options_to_parser(option_parser); end

  # source://annotaterb//lib/annotate_rb/parser.rb#63
  def parse_command(args); end

  # source://annotaterb//lib/annotate_rb/parser.rb#92
  def parser; end

  class << self
    # source://annotaterb//lib/annotate_rb/parser.rb#6
    def parse(args, existing_options); end
  end
end

# source://annotaterb//lib/annotate_rb/parser.rb#25
AnnotateRb::Parser::ANNOTATION_POSITIONS = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/parser.rb#10
AnnotateRb::Parser::BANNER_STRING = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/parser.rb#30
AnnotateRb::Parser::COMMAND_MAP = T.let(T.unsafe(nil), Hash)

# source://annotaterb//lib/annotate_rb/parser.rb#20
AnnotateRb::Parser::DEFAULT_OPTIONS = T.let(T.unsafe(nil), Hash)

# source://annotaterb//lib/annotate_rb/parser.rb#27
AnnotateRb::Parser::EXCLUSION_LIST = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/parser.rb#26
AnnotateRb::Parser::FILE_TYPE_POSITIONS = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/parser.rb#28
AnnotateRb::Parser::FORMAT_TYPES = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/rake_bootstrapper.rb#4
class AnnotateRb::RakeBootstrapper
  class << self
    # source://annotaterb//lib/annotate_rb/rake_bootstrapper.rb#6
    def call(options); end
  end
end

# source://annotaterb//lib/annotate_rb/route_annotator.rb#4
module AnnotateRb::RouteAnnotator; end

# This class is abstract class of classes adding and removing annotation to config/routes.rb.
#
# source://annotaterb//lib/annotate_rb/route_annotator/annotation_processor.rb#7
class AnnotateRb::RouteAnnotator::AnnotationProcessor < ::AnnotateRb::RouteAnnotator::BaseProcessor
  # @return [String]
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/annotation_processor.rb#9
  def execute; end

  private

  # source://annotaterb//lib/annotate_rb/route_annotator/annotation_processor.rb#27
  def generate_new_content_array(content, header_position); end

  # source://annotaterb//lib/annotate_rb/route_annotator/annotation_processor.rb#23
  def header; end
end

# source://annotaterb//lib/annotate_rb/route_annotator/annotator.rb#5
class AnnotateRb::RouteAnnotator::Annotator
  # @return [Annotator] a new instance of Annotator
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/annotator.rb#21
  def initialize(options = T.unsafe(nil)); end

  # source://annotaterb//lib/annotate_rb/route_annotator/annotator.rb#25
  def add_annotations; end

  # source://annotaterb//lib/annotate_rb/route_annotator/annotator.rb#32
  def remove_annotations; end

  class << self
    # source://annotaterb//lib/annotate_rb/route_annotator/annotator.rb#12
    def add_annotations(options = T.unsafe(nil)); end

    # TODO: Deprecate
    #
    # source://annotaterb//lib/annotate_rb/route_annotator/annotator.rb#8
    def do_annotations(options = T.unsafe(nil)); end

    # source://annotaterb//lib/annotate_rb/route_annotator/annotator.rb#16
    def remove_annotations(options = T.unsafe(nil)); end
  end
end

# This class is abstract class of classes adding and removing annotation to config/routes.rb.
#
# source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#7
class AnnotateRb::RouteAnnotator::BaseProcessor
  # @return [BaseProcessor] a new instance of BaseProcessor
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#19
  def initialize(options, routes_file); end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#34
  def routes_file_exist?; end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#25
  def update; end

  private

  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#46
  def existing_text; end

  # @raise [NoMethodError]
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#42
  def generate_new_content_array(_content, _header_position); end

  # @return [String]
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#51
  def new_text; end

  # Returns the value of attribute options.
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#40
  def options; end

  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#90
  def real_content_and_header_position(real_content, header_position); end

  # Returns the value of attribute routes_file.
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#40
  def routes_file; end

  # TODO: write the method doc using ruby rdoc formats
  # This method returns an array of 'real_content' and 'header_position'.
  # 'header_position' will either be :before, :after, or
  # a number.  If the number is > 0, the
  # annotation was found somewhere in the
  # middle of the file.  If the number is
  # zero, no annotation was found.
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#68
  def strip_annotations(content); end

  # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#57
  def write(text); end

  class << self
    # @param options [Hash]
    # @param routes_file [String]
    # @return [String]
    #
    # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#12
    def execute(options, routes_file); end

    private

    # source://annotaterb//lib/annotate_rb/route_annotator/base_processor.rb#16
    def new(*_arg0); end
  end
end

# source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#3
class AnnotateRb::RouteAnnotator::HeaderGenerator
  # @return [HeaderGenerator] a new instance of HeaderGenerator
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#38
  def initialize(options, routes_map); end

  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#43
  def generate; end

  private

  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#80
  def comment(row = T.unsafe(nil)); end

  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#88
  def content(line, maxs); end

  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#94
  def format_line_element(elem, maxs, index); end

  # @return [Boolean]
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#99
  def markdown?; end

  # Returns the value of attribute options.
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#78
  def options; end

  # Returns the value of attribute routes_map.
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#78
  def routes_map; end

  # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#103
  def timestamp_if_required(time = T.unsafe(nil)); end

  class << self
    # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#9
    def generate(options = T.unsafe(nil)); end

    private

    # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#13
    def new(*_arg0); end

    # source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#17
    def routes_map(options); end
  end
end

# source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#6
AnnotateRb::RouteAnnotator::HeaderGenerator::HEADER_ROW = T.let(T.unsafe(nil), Array)

# source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#4
AnnotateRb::RouteAnnotator::HeaderGenerator::PREFIX = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/route_annotator/header_generator.rb#5
AnnotateRb::RouteAnnotator::HeaderGenerator::PREFIX_MD = T.let(T.unsafe(nil), String)

# source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#5
module AnnotateRb::RouteAnnotator::Helper
  class << self
    # @param content [Array<String>]
    # @return [Array<String>] all found magic comments
    # @return [Array<String>] content without magic comments
    #
    # source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#45
    def extract_magic_comments_from_array(content_array); end

    # source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#89
    def real_content_and_header_position(real_content, header_position); end

    # source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#33
    def rewrite_contents(existing_text, new_text); end

    # source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#13
    def routes_file; end

    # @return [Boolean]
    #
    # source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#9
    def routes_file_exist?; end

    # TODO: write the method doc using ruby rdoc formats
    # This method returns an array of 'real_content' and 'header_position'.
    # 'header_position' will either be :before, :after, or
    # a number.  If the number is > 0, the
    # annotation was found somewhere in the
    # middle of the file.  If the number is
    # zero, no annotation was found.
    #
    # source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#67
    def strip_annotations(content); end

    # source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#17
    def strip_on_removal(content, header_position); end
  end
end

# source://annotaterb//lib/annotate_rb/route_annotator/helper.rb#6
AnnotateRb::RouteAnnotator::Helper::MAGIC_COMMENT_MATCHER = T.let(T.unsafe(nil), Regexp)

# This class is abstract class of classes adding and removing annotation to config/routes.rb.
#
# source://annotaterb//lib/annotate_rb/route_annotator/removal_processor.rb#7
class AnnotateRb::RouteAnnotator::RemovalProcessor < ::AnnotateRb::RouteAnnotator::BaseProcessor
  # @return [String]
  #
  # source://annotaterb//lib/annotate_rb/route_annotator/removal_processor.rb#9
  def execute; end

  private

  # source://annotaterb//lib/annotate_rb/route_annotator/removal_processor.rb#23
  def generate_new_content_array(content, header_position); end
end

# source://annotaterb//lib/annotate_rb/runner.rb#4
class AnnotateRb::Runner
  # source://annotaterb//lib/annotate_rb/runner.rb#25
  def run(args); end

  class << self
    # source://annotaterb//lib/annotate_rb/runner.rb#8
    def run(args); end

    # Returns the value of attribute runner.
    #
    # source://annotaterb//lib/annotate_rb/runner.rb#6
    def runner; end

    # @return [Boolean]
    #
    # source://annotaterb//lib/annotate_rb/runner.rb#16
    def running?; end

    private

    # Sets the attribute runner
    #
    # @param value the value to set the attribute runner to.
    #
    # source://annotaterb//lib/annotate_rb/runner.rb#22
    def runner=(_arg0); end
  end
end
