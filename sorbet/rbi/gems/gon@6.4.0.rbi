# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `gon` gem.
# Please instead update this file by running `bin/tapioca gem gon`.


# source://gon//lib/gon/base.rb#3
class Gon
  class << self
    # source://gon//lib/gon.rb#81
    def all_variables; end

    # source://gon//lib/gon.rb#85
    def clear; end

    # source://gon//lib/gon.rb#51
    def get_variable(name); end

    # source://gon//lib/gon.rb#28
    def global; end

    # source://gon//lib/gon.rb#100
    def inspect; end

    # source://gon//lib/gon.rb#94
    def jbuilder(*args); end

    # source://gon//lib/gon.rb#59
    def merge_variable(name, value); end

    # source://gon//lib/gon.rb#36
    def method_missing(method, *args, &block); end

    # source://gon//lib/gon.rb#67
    def push(data = T.unsafe(nil), merge = T.unsafe(nil)); end

    # source://gon//lib/gon.rb#89
    def rabl(*args); end

    # source://gon//lib/gon.rb#55
    def set_variable(name, value); end

    # source://gon//lib/gon.rb#32
    def watch; end

    private

    # source://gon//lib/gon.rb#106
    def current_gon; end

    # JbuilderTemplate will not be defined if jbuilder is required
    # before gon. By loading jbuilder again, JbuilderTemplate will
    # now be defined
    #
    # source://gon//lib/gon.rb#127
    def ensure_template_handler_is_defined; end

    # @return [Boolean]
    #
    # source://gon//lib/gon.rb#120
    def public_method_name?(method); end

    # source://gon//lib/gon.rb#110
    def store_builder_data(builder, data, options); end
  end
end

# source://gon//lib/gon/base.rb#4
module Gon::Base
  class << self
    # source://gon//lib/gon/base.rb#21
    def render_data(options = T.unsafe(nil)); end

    private

    # source://gon//lib/gon/base.rb#96
    def convert_hash_keys(value, current_depth, max_depth); end

    # source://gon//lib/gon/base.rb#125
    def convert_key(key, camelize); end

    # source://gon//lib/gon/base.rb#33
    def define_options(options); end

    # source://gon//lib/gon/base.rb#45
    def formatted_data(_o); end

    # source://gon//lib/gon/base.rb#111
    def gon_variables(global_root); end

    # source://gon//lib/gon/base.rb#72
    def render_variable(_o, key, value); end

    # source://gon//lib/gon/base.rb#81
    def render_watch(_o); end

    # source://gon//lib/gon/base.rb#58
    def render_wrap(_o); end

    # source://gon//lib/gon/base.rb#91
    def to_json(value, camel_depth); end
  end
end

# source://gon//lib/gon/base.rb#5
Gon::Base::VALID_OPTION_DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://gon//lib/gon/helpers.rb#29
module Gon::ControllerHelpers
  # source://gon//lib/gon/helpers.rb#30
  def gon; end

  private

  # source://gon//lib/gon/helpers.rb#45
  def current_gon; end

  # override this since ActionDispatch::Request#uuid appears only in Rails 3.2.1
  #
  # source://gon//lib/gon/helpers.rb#49
  def gon_request_uuid; end

  # @return [Boolean]
  #
  # source://gon//lib/gon/helpers.rb#41
  def wrong_gon_request?; end
end

# source://gon//lib/gon/env_finder.rb#2
module Gon::EnvFinder
  class << self
    # source://gon//lib/gon/env_finder.rb#8
    def controller_env(options = T.unsafe(nil)); end

    # source://gon//lib/gon/env_finder.rb#19
    def template_path(options, extension); end

    private

    # source://gon//lib/gon/env_finder.rb#39
    def current_gon; end

    # @return [Boolean]
    #
    # source://gon//lib/gon/env_finder.rb#35
    def right_extension?(extension, template_path); end
  end
end

# source://gon//lib/gon/env_finder.rb#3
Gon::EnvFinder::ENV_CONTROLLER_KEY = T.let(T.unsafe(nil), String)

# source://gon//lib/gon/env_finder.rb#4
Gon::EnvFinder::ENV_RESPONSE_KEY = T.let(T.unsafe(nil), String)

# source://gon//lib/gon/escaper.rb#2
module Gon::Escaper
  extend ::ActionView::Helpers::JavaScriptHelper
  extend ::ActionView::Helpers::CaptureHelper
  extend ::ActionView::Helpers::OutputSafetyHelper
  extend ::ActionView::Helpers::TagHelper

  class << self
    # source://gon//lib/gon/escaper.rb#8
    def escape_unicode(javascript); end

    # source://gon//lib/gon/escaper.rb#23
    def javascript_cdata_section(content, cdata); end

    # source://gon//lib/gon/escaper.rb#15
    def javascript_tag(content, type, cdata, nonce); end

    private

    # source://gon//lib/gon/escaper.rb#33
    def escape_line_separator(javascript); end
  end
end

# source://gon//lib/gon/global.rb#2
class Gon::Global < ::Gon
  class << self
    # source://gon//lib/gon/global.rb#5
    def all_variables; end

    # source://gon//lib/gon/global.rb#9
    def clear; end

    # source://gon//lib/gon/global.rb#13
    def inspect; end

    # source://gon//lib/gon/global.rb#22
    def jbuilder(*args); end

    # source://gon//lib/gon/global.rb#17
    def rabl(*args); end

    private

    # source://gon//lib/gon/global.rb#30
    def get_variable(name); end

    # source://gon//lib/gon/global.rb#35
    def set_variable(name, value); end
  end
end

# source://gon//lib/gon/jbuilder.rb#2
module Gon::Jbuilder
  class << self
    # source://gon//lib/gon/jbuilder.rb#5
    def handler(args, global = T.unsafe(nil)); end

    private

    # @return [Boolean]
    #
    # source://gon//lib/gon/jbuilder.rb#50
    def new_api?(args); end

    # @return [Boolean]
    #
    # source://gon//lib/gon/jbuilder.rb#46
    def old_api?(args); end

    # source://gon//lib/gon/jbuilder.rb#31
    def parse_options_from(args); end

    # @return [Boolean]
    #
    # source://gon//lib/gon/jbuilder.rb#25
    def valid_options?(options, global); end
  end
end

# source://gon//lib/gon/jbuilder/parser.rb#3
class Gon::Jbuilder::Parser
  include ::ActiveSupport::Benchmarkable
  include ::ActionView::Helpers::ActiveModelHelper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::ActionView::Helpers::AtomFeedHelper
  include ::ActionView::Helpers::CacheHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper
  include ::ActionView::Helpers::UrlHelper
  include ::ActionView::Helpers::SanitizeHelper
  include ::ActionView::Helpers::ControllerHelper
  include ::ActionView::Helpers::CspHelper
  include ::ActionView::Helpers::CsrfHelper
  include ::ActionView::Helpers::DateHelper
  include ::ActionView::Helpers::DebugHelper
  include ::ActionView::Helpers::TextHelper
  include ::ActionView::Helpers::FormTagHelper
  include ::ActionView::ModelNaming
  include ::ActionView::RecordIdentifier
  include ::ActionView::Helpers::FormHelper
  include ::ActionView::Helpers::TranslationHelper
  include ::ActionView::Helpers::FormOptionsHelper
  include ::ActionView::Helpers::JavaScriptHelper
  include ::ActionView::Helpers::NumberHelper
  include ::ActionView::Helpers::RenderingHelper
  include ::ActionView::Helpers
  extend ::ActionView::Helpers::UrlHelper::ClassMethods
  extend ::ActionView::Helpers::SanitizeHelper::ClassMethods

  # @return [Parser] a new instance of Parser
  #
  # source://gon//lib/gon/jbuilder/parser.rb#8
  def initialize(parse_params); end

  # Returns the value of attribute _controller_name.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#6
  def _controller_name; end

  # Sets the attribute _controller_name
  #
  # @param value the value to set the attribute _controller_name to.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#6
  def _controller_name=(_arg0); end

  # source://gon//lib/gon/jbuilder/parser.rb#28
  def assign_controller_variables(controller); end

  # source://gon//lib/gon/jbuilder/parser.rb#103
  def construct_path(args); end

  # Returns the value of attribute controller.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#6
  def controller; end

  # Sets the attribute controller
  #
  # @param value the value to set the attribute controller to.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#6
  def controller=(_arg0); end

  # source://actionview/8.0.1/lib/action_view/helpers/translation_helper.rb#18
  def debug_missing_translation; end

  # source://actionview/8.0.1/lib/action_view/helpers/translation_helper.rb#18
  def debug_missing_translation=(val); end

  # source://gon//lib/gon/jbuilder/parser.rb#36
  def eval_controller_helpers(controller); end

  # source://gon//lib/gon/jbuilder/parser.rb#46
  def eval_controller_url_helpers(controller); end

  # source://gon//lib/gon/jbuilder/parser.rb#116
  def find_partials(lines = T.unsafe(nil)); end

  # Returns the value of attribute locals.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#6
  def locals; end

  # Sets the attribute locals
  #
  # @param value the value to set the attribute locals to.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#6
  def locals=(_arg0); end

  # source://gon//lib/gon/jbuilder/parser.rb#15
  def parse!; end

  # source://gon//lib/gon/jbuilder/parser.rb#75
  def parse_partial(partial_line); end

  # source://gon//lib/gon/jbuilder/parser.rb#93
  def parse_path(path); end

  # source://gon//lib/gon/jbuilder/parser.rb#68
  def parse_source(source, controller); end

  # source://gon//lib/gon/jbuilder/parser.rb#110
  def path_with_ext(path); end

  # source://gon//lib/gon/jbuilder/parser.rb#85
  def set_options_from_hash(options_hash); end

  # Returns the value of attribute template_location.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#6
  def template_location; end

  # Sets the attribute template_location
  #
  # @param value the value to set the attribute template_location to.
  #
  # source://gon//lib/gon/jbuilder/parser.rb#6
  def template_location=(_arg0); end

  # source://gon//lib/gon/jbuilder/parser.rb#58
  def wrap_locals_in_methods(locals); end

  class << self
    # source://actionview/8.0.1/lib/action_view/helpers/translation_helper.rb#18
    def debug_missing_translation; end

    # source://actionview/8.0.1/lib/action_view/helpers/translation_helper.rb#18
    def debug_missing_translation=(val); end
  end
end

# source://gon//lib/gon/json_dumper.rb#2
module Gon::JsonDumper
  class << self
    # source://gon//lib/gon/json_dumper.rb#13
    def dump(object); end

    # source://gon//lib/gon/json_dumper.rb#19
    def escape(json); end
  end
end

# source://gon//lib/gon/json_dumper.rb#5
Gon::JsonDumper::JSON_ESCAPE = T.let(T.unsafe(nil), Hash)

# Taken from ERB::Util
#
# source://gon//lib/gon/json_dumper.rb#4
Gon::JsonDumper::JSON_ESCAPE_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://gon//lib/gon/rabl.rb#13
module Gon::Rabl
  class << self
    # source://gon//lib/gon/rabl.rb#16
    def handler(args, global = T.unsafe(nil)); end

    private

    # source://gon//lib/gon/rabl.rb#80
    def include_helpers; end

    # @return [Boolean]
    #
    # source://gon//lib/gon/rabl.rb#90
    def new_api?(args); end

    # @return [Boolean]
    #
    # source://gon//lib/gon/rabl.rb#86
    def old_api?(args); end

    # source://gon//lib/gon/rabl.rb#63
    def parse_options_from(args, global); end

    # source://gon//lib/gon/rabl.rb#32
    def parse_rabl(rabl_path, controller, locals); end

    # source://gon//lib/gon/rabl.rb#42
    def parse_with_rabl(rabl_path, controller, locals); end

    # source://gon//lib/gon/rabl.rb#51
    def parse_with_rabl_rails(rabl_path, controller, locals); end
  end
end

# source://gon//lib/gon/request.rb#2
class Gon::Request
  # @return [Request] a new instance of Request
  #
  # source://gon//lib/gon/request.rb#6
  def initialize(environment); end

  # source://gon//lib/gon/request.rb#11
  def clear; end

  # Returns the value of attribute env.
  #
  # source://gon//lib/gon/request.rb#3
  def env; end

  # Returns the value of attribute gon.
  #
  # source://gon//lib/gon/request.rb#3
  def gon; end

  # Returns the value of attribute id.
  #
  # source://gon//lib/gon/request.rb#4
  def id; end

  # Sets the attribute id
  #
  # @param value the value to set the attribute id to.
  #
  # source://gon//lib/gon/request.rb#4
  def id=(_arg0); end
end

# source://gon//lib/gon/spec_helpers.rb#2
module Gon::SpecHelper; end

# source://gon//lib/gon/spec_helpers.rb#3
module Gon::SpecHelper::Rails
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::Gon::SpecHelper::Rails::ClassMethods
end

# source://gon//lib/gon/spec_helpers.rb#6
module Gon::SpecHelper::Rails::ClassMethods
  # source://gon//lib/gon/spec_helpers.rb#19
  def new(*_arg0); end
end

# source://gon//lib/gon/spec_helpers.rb#7
module Gon::SpecHelper::Rails::ClassMethods::GonSession
  # source://gon//lib/gon/spec_helpers.rb#8
  def process(*_arg0, **_arg1); end
end

# source://gon//lib/gon/helpers.rb#2
module Gon::ViewHelpers
  # source://gon//lib/gon/helpers.rb#3
  def include_gon(options = T.unsafe(nil)); end

  # source://gon//lib/gon/helpers.rb#14
  def include_gon_amd(options = T.unsafe(nil)); end

  private

  # source://gon//lib/gon/helpers.rb#24
  def current_gon; end

  # @return [Boolean]
  #
  # source://gon//lib/gon/helpers.rb#20
  def variables_for_request_present?; end
end

# source://gon//lib/gon/watch.rb#2
class Gon::Watch < ::Gon
  class << self
    # source://gon//lib/gon/watch.rb#15
    def all_variables; end

    # source://gon//lib/gon/watch.rb#19
    def clear; end

    # source://gon//lib/gon/watch.rb#7
    def render; end

    # source://gon//lib/gon/watch.rb#11
    def render_amd; end

    private

    # source://gon//lib/gon/watch.rb#51
    def return_variable(value); end

    # @return [Boolean]
    #
    # source://gon//lib/gon/watch.rb#41
    def return_variable?(variable); end

    # source://gon//lib/gon/watch.rb#25
    def set_variable(name, value); end
  end
end
