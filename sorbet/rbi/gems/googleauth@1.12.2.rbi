# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `googleauth` gem.
# Please instead update this file by running `bin/tapioca gem googleauth`.


# source://googleauth//lib/googleauth/base_client.rb#17
module Google; end

# Module Auth provides classes that provide Google-specific authorization
# used to access Google APIs.
#
# source://googleauth//lib/googleauth/base_client.rb#20
module Google::Auth
  private

  # Obtains the default credentials implementation to use in this
  # environment.
  #
  # Use this to obtain the Application Default Credentials for accessing
  # Google APIs.  Application Default Credentials are described in detail
  # at https://cloud.google.com/docs/authentication/production.
  #
  # If supplied, scope is used to create the credentials instance, when it can
  # be applied.  E.g, on google compute engine and for user credentials the
  # scope is ignored.
  #
  # @param scope [string|array|nil] the scope(s) to access
  # @param options [Hash] Connection options. These may be used to configure
  #   the `Faraday::Connection` used for outgoing HTTP requests. For
  #   example, if a connection proxy must be used in the current network,
  #   you may provide a connection with with the needed proxy options.
  #   The following keys are recognized:
  #   * `:default_connection` The connection object to use for token
  #   refresh requests.
  #   * `:connection_builder` A `Proc` that creates and returns a
  #   connection to use for token refresh requests.
  #   * `:connection` The connection to use to determine whether GCE
  #   metadata credentials are available.
  #
  # source://googleauth//lib/googleauth/application_default.rb#53
  def get_application_default(scope = T.unsafe(nil), options = T.unsafe(nil)); end

  class << self
    # Obtains the default credentials implementation to use in this
    # environment.
    #
    # Use this to obtain the Application Default Credentials for accessing
    # Google APIs.  Application Default Credentials are described in detail
    # at https://cloud.google.com/docs/authentication/production.
    #
    # If supplied, scope is used to create the credentials instance, when it can
    # be applied.  E.g, on google compute engine and for user credentials the
    # scope is ignored.
    #
    # @param scope [string|array|nil] the scope(s) to access
    # @param options [Hash] Connection options. These may be used to configure
    #   the `Faraday::Connection` used for outgoing HTTP requests. For
    #   example, if a connection proxy must be used in the current network,
    #   you may provide a connection with with the needed proxy options.
    #   The following keys are recognized:
    #   * `:default_connection` The connection object to use for token
    #   refresh requests.
    #   * `:connection_builder` A `Proc` that creates and returns a
    #   connection to use for token refresh requests.
    #   * `:connection` The connection to use to determine whether GCE
    #   metadata credentials are available.
    # @raise [NOT_FOUND_ERROR]
    #
    # source://googleauth//lib/googleauth/application_default.rb#53
    def get_application_default(scope = T.unsafe(nil), options = T.unsafe(nil)); end
  end
end

# BaseClient is a class used to contain common methods that are required by any
# Credentials Client, including AwsCredentials, ServiceAccountCredentials,
# and UserRefreshCredentials. This is a superclass of Signet::OAuth2::Client
# and has been created to create a generic interface for all credentials clients
# to use, including ones which do not inherit from Signet::OAuth2::Client.
#
# source://googleauth//lib/googleauth/base_client.rb#26
module Google::Auth::BaseClient
  # Returns a clone of a_hash updated with the authentication token
  #
  # source://googleauth//lib/googleauth/base_client.rb#45
  def apply(a_hash, opts = T.unsafe(nil)); end

  # Updates a_hash updated with the authentication token
  #
  # source://googleauth//lib/googleauth/base_client.rb#30
  def apply!(a_hash, opts = T.unsafe(nil)); end

  # @raise [NoMethodError]
  # @return [Boolean]
  #
  # source://googleauth//lib/googleauth/base_client.rb#74
  def expires_within?; end

  # The logger used to log operations on this client, such as token refresh.
  #
  # source://googleauth//lib/googleauth/base_client.rb#79
  def logger; end

  # The logger used to log operations on this client, such as token refresh.
  #
  # source://googleauth//lib/googleauth/base_client.rb#79
  def logger=(_arg0); end

  # Whether the id_token or access_token is missing or about to expire.
  #
  # @return [Boolean]
  #
  # source://googleauth//lib/googleauth/base_client.rb#52
  def needs_access_token?; end

  # source://googleauth//lib/googleauth/base_client.rb#67
  def notify_refresh_listeners; end

  # source://googleauth//lib/googleauth/base_client.rb#62
  def on_refresh(&block); end

  # Returns a reference to the #apply method, suitable for passing as
  # a closure
  #
  # source://googleauth//lib/googleauth/base_client.rb#58
  def updater_proc; end

  private

  # @raise [NoMethodError]
  #
  # source://googleauth//lib/googleauth/base_client.rb#87
  def fetch_access_token!; end

  # @raise [NoMethodError]
  #
  # source://googleauth//lib/googleauth/base_client.rb#83
  def token_type; end
end

# source://googleauth//lib/googleauth/base_client.rb#27
Google::Auth::BaseClient::AUTH_METADATA_KEY = T.let(T.unsafe(nil), Symbol)

# Representation of an application's identity for user authorization flows.
#
# source://googleauth//lib/googleauth/client_id.rb#23
class Google::Auth::ClientId
  # Initialize the Client ID. Both id and secret must be non-nil.
  #
  # @note Direct instantiation is discouraged to avoid embedding IDs
  #   and secrets in source. See {#from_file} to load from
  #   `client_secrets.json` files.
  # @param id [String] Text identifier of the client ID
  # @param secret [String] Secret associated with the client ID
  # @return [ClientId] a new instance of ClientId
  #
  # source://googleauth//lib/googleauth/client_id.rb#66
  def initialize(id, secret); end

  # Text identifier of the client ID
  #
  # @return [String]
  #
  # source://googleauth//lib/googleauth/client_id.rb#43
  def id; end

  # Secret associated with the client ID
  #
  # @return [String]
  #
  # source://googleauth//lib/googleauth/client_id.rb#49
  def secret; end

  class << self
    # Returns the value of attribute default.
    #
    # source://googleauth//lib/googleauth/client_id.rb#52
    def default; end

    # Sets the attribute default
    #
    # @param value the value to set the attribute default to.
    #
    # source://googleauth//lib/googleauth/client_id.rb#52
    def default=(_arg0); end

    # Constructs a Client ID from a JSON file downloaded from the
    # Google Developers Console.
    #
    # @param file [String, File] Path of file to read from
    # @return [Google::Auth::ClientID]
    #
    # source://googleauth//lib/googleauth/client_id.rb#81
    def from_file(file); end

    # Constructs a Client ID from a previously loaded JSON file. The hash
    # structure should match the expected JSON format.
    #
    # @param config [hash] Parsed contents of the JSON file
    # @raise [MISSING_TOP_LEVEL_ELEMENT_ERROR]
    # @return [Google::Auth::ClientID]
    #
    # source://googleauth//lib/googleauth/client_id.rb#98
    def from_hash(config); end
  end
end

# JSON key for the client ID within an app configuration.
#
# source://googleauth//lib/googleauth/client_id.rb#31
Google::Auth::ClientId::CLIENT_ID = T.let(T.unsafe(nil), String)

# JSON key for the client secret within an app configuration.
#
# source://googleauth//lib/googleauth/client_id.rb#33
Google::Auth::ClientId::CLIENT_SECRET = T.let(T.unsafe(nil), String)

# Toplevel JSON key for the an installed app configuration.
# Must include client_id and client_secret subkeys if present.
#
# source://googleauth//lib/googleauth/client_id.rb#26
Google::Auth::ClientId::INSTALLED_APP = T.let(T.unsafe(nil), String)

# An error message raised when none of the expected toplevel properties
# can be found.
#
# source://googleauth//lib/googleauth/client_id.rb#36
Google::Auth::ClientId::MISSING_TOP_LEVEL_ELEMENT_ERROR = T.let(T.unsafe(nil), String)

# Toplevel JSON key for the a webapp configuration.
# Must include client_id and client_secret subkeys if present.
#
# source://googleauth//lib/googleauth/client_id.rb#29
Google::Auth::ClientId::WEB_APP = T.let(T.unsafe(nil), String)

# Credentials is a high-level base class used by Google's API client
# libraries to represent the authentication when connecting to an API.
# In most cases, it is subclassed by API-specific credential classes that
# can be instantiated by clients.
#
# ## Options
#
# Credentials classes are configured with options that dictate default
# values for parameters such as scope and audience. These defaults are
# expressed as class attributes, and may differ from endpoint to endpoint.
# Normally, an API client will provide subclasses specific to each
# endpoint, configured with appropriate values.
#
# Note that these options inherit up the class hierarchy. If a particular
# options is not set for a subclass, its superclass is queried.
#
# Some older users of this class set options via constants. This usage is
# deprecated. For example, instead of setting the `AUDIENCE` constant on
# your subclass, call the `audience=` method.
#
# ## Example
#
#     class MyCredentials < Google::Auth::Credentials
#       # Set the default scope for these credentials
#       self.scope = "http://example.com/my_scope"
#     end
#
#     # creds is a credentials object suitable for Google API clients
#     creds = MyCredentials.default
#     creds.scope  # => ["http://example.com/my_scope"]
#
#     class SubCredentials < MyCredentials
#       # Override the default scope for this subclass
#       self.scope = "http://example.com/sub_scope"
#     end
#
#     creds2 = SubCredentials.default
#     creds2.scope  # => ["http://example.com/sub_scope"]
#
# source://googleauth//lib/googleauth/credentials.rb#63
class Google::Auth::Credentials
  extend ::Forwardable

  # Creates a new Credentials instance with the provided auth credentials, and with the default
  # values configured on the class.
  #
  # @param keyfile [String, Hash, Signet::OAuth2::Client] The keyfile can be provided as one of the following:
  #
  #   * The path to a JSON keyfile (as a `String`)
  #   * The contents of a JSON keyfile (as a `Hash`)
  #   * A `Signet::OAuth2::Client` object
  # @param options [Hash] The options for configuring the credentials instance. The following is supported:
  #
  #   * `:scope` - the scope for the client
  #   * `project_id` (and optionally `project`) - the project identifier for the client
  #   * `:connection_builder` - the connection builder to use for the client
  #   * `:default_connection` - the default connection to use for the client
  #   * `:logger` - the logger used to log credential operations such as token refresh.
  # @return [Credentials] a new instance of Credentials
  #
  # source://googleauth//lib/googleauth/credentials.rb#367
  def initialize(keyfile, options = T.unsafe(nil)); end

  # @return [String] The target audience ID when issuing assertions. Used only by the
  #   assertion grant type.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def audience(*args, **_arg1, &block); end

  # The Signet::OAuth2::Client object the Credentials instance is using.
  #
  # @return [Signet::OAuth2::Client]
  #
  # source://googleauth//lib/googleauth/credentials.rb#286
  def client; end

  # The Signet::OAuth2::Client object the Credentials instance is using.
  #
  # @return [Signet::OAuth2::Client]
  #
  # source://googleauth//lib/googleauth/credentials.rb#286
  def client=(_arg0); end

  # @private Temporary; remove when universe domain metadata endpoint is stable (see b/349488459).
  #
  # source://googleauth//lib/googleauth/credentials.rb#303
  def disable_universe_domain_check; end

  # @return [String] The issuer ID associated with this client.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def issuer(*args, **_arg1, &block); end

  # @return [Logger] The logger used to log credential operations such as token refresh.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def logger(*args, **_arg1, &block); end

  # @return [Logger] The logger used to log credential operations such as token refresh.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def logger=(*args, **_arg1, &block); end

  # Identifier for the project the client is authenticating with.
  #
  # @return [String]
  #
  # source://googleauth//lib/googleauth/credentials.rb#293
  def project_id; end

  # Identifier for a separate project used for billing/quota, if any.
  #
  # @return [String, nil]
  #
  # source://googleauth//lib/googleauth/credentials.rb#300
  def quota_project_id; end

  # @return [String, Array<String>] The scope for this client. A scope is an access range
  #   defined by the authorization server. The scope can be a single value or a list of values.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def scope(*args, **_arg1, &block); end

  # @return [String, OpenSSL::PKey] The signing key associated with this client.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def signing_key(*args, **_arg1, &block); end

  # @return [String] The final target audience for ID tokens returned by this credential.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def target_audience(*args, **_arg1, &block); end

  # @return [String] The token credential URI. The URI is the authorization server's HTTP
  #   endpoint capable of issuing tokens and refreshing expired tokens.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def token_credential_uri(*args, **_arg1, &block); end

  # @return [String] The universe domain issuing these credentials.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def universe_domain(*args, **_arg1, &block); end

  # @return [String] The universe domain issuing these credentials.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def universe_domain=(*args, **_arg1, &block); end

  # @return [Proc] Returns a reference to the {Signet::OAuth2::Client#apply} method,
  #   suitable for passing as a closure.
  #
  # source://forwardable/1.3.3/forwardable.rb#231
  def updater_proc(*args, **_arg1, &block); end

  protected

  # Initializes the Signet client.
  #
  # source://googleauth//lib/googleauth/credentials.rb#499
  def init_client(hash, options = T.unsafe(nil)); end

  # source://googleauth//lib/googleauth/credentials.rb#558
  def setup_logging(logger: T.unsafe(nil)); end

  # returns a new Hash with string keys instead of symbol keys.
  #
  # source://googleauth//lib/googleauth/credentials.rb#507
  def stringify_hash_keys(hash); end

  # returns a new Hash with symbol keys instead of string keys.
  #
  # source://googleauth//lib/googleauth/credentials.rb#512
  def symbolize_hash_keys(hash); end

  # source://googleauth//lib/googleauth/credentials.rb#516
  def update_client_options(options); end

  # source://googleauth//lib/googleauth/credentials.rb#548
  def update_from_filepath(path, options); end

  # source://googleauth//lib/googleauth/credentials.rb#539
  def update_from_hash(hash, options); end

  # source://googleauth//lib/googleauth/credentials.rb#533
  def update_from_signet(client); end

  # Verify that the keyfile argument is a file.
  #
  # source://googleauth//lib/googleauth/credentials.rb#493
  def verify_keyfile_exists!(keyfile); end

  # Verify that the keyfile argument is provided.
  #
  # source://googleauth//lib/googleauth/credentials.rb#487
  def verify_keyfile_provided!(keyfile); end

  class << self
    # The default target audience ID to be used when none is provided during initialization.
    # Used only by the assertion grant type.
    #
    # @return [String]
    #
    # source://googleauth//lib/googleauth/credentials.rb#102
    def audience; end

    # Sets the default target audience ID to be used when none is provided during initialization.
    #
    # @param new_audience [String]
    #
    # source://googleauth//lib/googleauth/credentials.rb#113
    def audience=(new_audience); end

    # Creates a new Credentials instance with auth credentials acquired by searching the
    # environment variables and paths configured on the class, and with the default values
    # configured on the class.
    #
    # The auth credentials are searched for in the following order:
    #
    # 1. configured environment variables (see {Credentials.env_vars})
    # 2. configured default file paths (see {Credentials.paths})
    # 3. application default (see {Google::Auth.get_application_default})
    #
    # @param options [Hash] The options for configuring the credentials instance. The following is supported:
    #
    #   * +:scope+ - the scope for the client
    #   * +"project_id"+ (and optionally +"project"+) - the project identifier for the client
    #   * +:connection_builder+ - the connection builder to use for the client
    #   * +:default_connection+ - the default connection to use for the client
    # @return [Credentials]
    #
    # source://googleauth//lib/googleauth/credentials.rb#408
    def default(options = T.unsafe(nil)); end

    # The environment variables to search for credentials. Values can either be a file path to the
    # credentials file, or the JSON contents of the credentials file.
    # The env_vars will never be nil. If there are no vars, the empty array is returned.
    #
    # @return [Array<String>]
    #
    # source://googleauth//lib/googleauth/credentials.rb#184
    def env_vars; end

    # Sets the environment variables to search for credentials.
    # Setting to `nil` "unsets" the value, and defaults to the superclass
    # (or to the empty array if there is no superclass).
    #
    # @param new_env_vars [String, Array<String>, nil]
    #
    # source://googleauth//lib/googleauth/credentials.rb#208
    def env_vars=(new_env_vars); end

    # Internal recursive lookup for env_vars.
    #
    # @private
    #
    # source://googleauth//lib/googleauth/credentials.rb#192
    def env_vars_internal; end

    # Return the given parameter value, defaulting up the class hierarchy.
    #
    # First returns the value of the instance variable, if set.
    # Next, calls the given block if provided. (This is generally used to
    # look up legacy constant-based values.)
    # Otherwise, calls the superclass method if present.
    # Returns nil if all steps fail.
    #
    # @param name [Symbol] The parameter name
    # @param method_name [Symbol] The lookup method name, if different
    # @private
    # @return [Object] The value
    #
    # source://googleauth//lib/googleauth/credentials.rb#261
    def lookup_auth_param(name, method_name = T.unsafe(nil)); end

    # Return the value of the given constant if it is defined directly in
    # this class, or nil if not.
    #
    # @param Name [Symbol] of the constant
    # @private
    # @return [Object] The value
    #
    # source://googleauth//lib/googleauth/credentials.rb#277
    def lookup_local_constant(name); end

    # The file paths to search for credentials files.
    # The paths will never be nil. If there are no paths, the empty array is returned.
    #
    # @return [Array<String>]
    #
    # source://googleauth//lib/googleauth/credentials.rb#219
    def paths; end

    # Set the file paths to search for credentials files.
    # Setting to `nil` "unsets" the value, and defaults to the superclass
    # (or to the empty array if there is no superclass).
    #
    # @param new_paths [String, Array<String>, nil]
    #
    # source://googleauth//lib/googleauth/credentials.rb#242
    def paths=(new_paths); end

    # Internal recursive lookup for paths.
    #
    # @private
    #
    # source://googleauth//lib/googleauth/credentials.rb#227
    def paths_internal; end

    # The default scope to be used when none is provided during initialization.
    # A scope is an access range defined by the authorization server.
    # The scope can be a single value or a list of values.
    #
    # Either {#scope} or {#target_audience}, but not both, should be non-nil.
    # If {#scope} is set, this credential will produce access tokens.
    # If {#target_audience} is set, this credential will produce ID tokens.
    #
    # @return [String, Array<String>, nil]
    #
    # source://googleauth//lib/googleauth/credentials.rb#128
    def scope; end

    # Sets the default scope to be used when none is provided during initialization.
    #
    # Either {#scope} or {#target_audience}, but not both, should be non-nil.
    # If {#scope} is set, this credential will produce access tokens.
    # If {#target_audience} is set, this credential will produce ID tokens.
    #
    # @param new_scope [String, Array<String>, nil]
    #
    # source://googleauth//lib/googleauth/credentials.rb#144
    def scope=(new_scope); end

    # The default final target audience for ID tokens, to be used when none
    # is provided during initialization.
    #
    # Either {#scope} or {#target_audience}, but not both, should be non-nil.
    # If {#scope} is set, this credential will produce access tokens.
    # If {#target_audience} is set, this credential will produce ID tokens.
    #
    # @return [String, nil]
    #
    # source://googleauth//lib/googleauth/credentials.rb#159
    def target_audience; end

    # Sets the default final target audience for ID tokens, to be used when none
    # is provided during initialization.
    #
    # Either {#scope} or {#target_audience}, but not both, should be non-nil.
    # If {#scope} is set, this credential will produce access tokens.
    # If {#target_audience} is set, this credential will produce ID tokens.
    #
    # @param new_target_audience [String, nil]
    #
    # source://googleauth//lib/googleauth/credentials.rb#173
    def target_audience=(new_target_audience); end

    # The default token credential URI to be used when none is provided during initialization.
    # The URI is the authorization server's HTTP endpoint capable of issuing tokens and
    # refreshing expired tokens.
    #
    # @return [String]
    #
    # source://googleauth//lib/googleauth/credentials.rb#81
    def token_credential_uri; end

    # Set the default token credential URI to be used when none is provided during initialization.
    #
    # @param new_token_credential_uri [String]
    #
    # source://googleauth//lib/googleauth/credentials.rb#92
    def token_credential_uri=(new_token_credential_uri); end

    private

    # @private Lookup Credentials using Google::Auth.get_application_default.
    #
    # source://googleauth//lib/googleauth/credentials.rb#452
    def from_application_default(options); end

    # @private Lookup Credentials from default file paths.
    #
    # source://googleauth//lib/googleauth/credentials.rb#441
    def from_default_paths(options); end

    # @private Lookup Credentials from environment variables.
    #
    # source://googleauth//lib/googleauth/credentials.rb#422
    def from_env_vars(options); end

    # @private Read credentials from a JSON stream.
    #
    # source://googleauth//lib/googleauth/credentials.rb#465
    def from_io(io, options); end
  end
end

# The default target audience ID to be used when none is provided during initialization.
#
# source://googleauth//lib/googleauth/credentials.rb#70
Google::Auth::Credentials::AUDIENCE = T.let(T.unsafe(nil), String)

# The default token credential URI to be used when none is provided during initialization.
#
# source://googleauth//lib/googleauth/credentials.rb#66
Google::Auth::Credentials::TOKEN_CREDENTIAL_URI = T.let(T.unsafe(nil), String)

# CredentialsLoader contains the behaviour used to locate and find default
# credentials files on the file system.
#
# source://googleauth//lib/googleauth/credentials_loader.rb#24
module Google::Auth::CredentialsLoader
  # Creates an instance from the path specified in an environment
  # variable.
  #
  # @param scope [string|array|nil] the scope(s) to access
  # @param options [Hash] Connection options. These may be used to configure
  #   how OAuth tokens are retrieved, by providing a suitable
  #   `Faraday::Connection`. For example, if a connection proxy must be
  #   used in the current network, you may provide a connection with
  #   with the needed proxy options.
  #   The following keys are recognized:
  #   * `:default_connection` The connection object to use.
  #   * `:connection_builder` A `Proc` that returns a connection.
  #
  # source://googleauth//lib/googleauth/credentials_loader.rb#74
  def from_env(scope = T.unsafe(nil), options = T.unsafe(nil)); end

  # Creates an instance from the system default path
  #
  # @param scope [string|array|nil] the scope(s) to access
  # @param options [Hash] Connection options. These may be used to configure
  #   how OAuth tokens are retrieved, by providing a suitable
  #   `Faraday::Connection`. For example, if a connection proxy must be
  #   used in the current network, you may provide a connection with
  #   with the needed proxy options.
  #   The following keys are recognized:
  #   * `:default_connection` The connection object to use.
  #   * `:connection_builder` A `Proc` that returns a connection.
  #
  # source://googleauth//lib/googleauth/credentials_loader.rb#126
  def from_system_default_path(scope = T.unsafe(nil), options = T.unsafe(nil)); end

  # Creates an instance from a well known path.
  #
  # @param scope [string|array|nil] the scope(s) to access
  # @param options [Hash] Connection options. These may be used to configure
  #   how OAuth tokens are retrieved, by providing a suitable
  #   `Faraday::Connection`. For example, if a connection proxy must be
  #   used in the current network, you may provide a connection with
  #   with the needed proxy options.
  #   The following keys are recognized:
  #   * `:default_connection` The connection object to use.
  #   * `:connection_builder` A `Proc` that returns a connection.
  #
  # source://googleauth//lib/googleauth/credentials_loader.rb#100
  def from_well_known_path(scope = T.unsafe(nil), options = T.unsafe(nil)); end

  # make_creds proxies the construction of a credentials instance
  #
  # By default, it calls #new on the current class, but this behaviour can
  # be modified, allowing different instances to be created.
  #
  # source://googleauth//lib/googleauth/credentials_loader.rb#56
  def make_creds(*args); end

  private

  # source://googleauth//lib/googleauth/credentials_loader.rb#172
  def authorized_user_env_vars?; end

  # source://googleauth//lib/googleauth/credentials_loader.rb#158
  def interpret_options(scope, options); end

  # Finds project_id from gcloud CLI configuration
  #
  # source://googleauth//lib/googleauth/credentials_loader.rb#146
  def load_gcloud_project_id; end

  # source://googleauth//lib/googleauth/credentials_loader.rb#167
  def service_account_env_vars?; end

  class << self
    # Finds project_id from gcloud CLI configuration
    #
    # source://googleauth//lib/googleauth/credentials_loader.rb#146
    def load_gcloud_project_id; end
  end
end

# source://googleauth//lib/googleauth/credentials_loader.rb#31
Google::Auth::CredentialsLoader::ACCOUNT_TYPE_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#35
Google::Auth::CredentialsLoader::AWS_ACCESS_KEY_ID_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#34
Google::Auth::CredentialsLoader::AWS_DEFAULT_REGION_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#33
Google::Auth::CredentialsLoader::AWS_REGION_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#36
Google::Auth::CredentialsLoader::AWS_SECRET_ACCESS_KEY_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#37
Google::Auth::CredentialsLoader::AWS_SESSION_TOKEN_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#27
Google::Auth::CredentialsLoader::CLIENT_EMAIL_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#28
Google::Auth::CredentialsLoader::CLIENT_ID_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#29
Google::Auth::CredentialsLoader::CLIENT_SECRET_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#49
Google::Auth::CredentialsLoader::CLOUD_SDK_CLIENT_ID = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#42
Google::Auth::CredentialsLoader::CREDENTIALS_FILE_NAME = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#25
Google::Auth::CredentialsLoader::ENV_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#40
Google::Auth::CredentialsLoader::GCLOUD_CONFIG_COMMAND = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#38
Google::Auth::CredentialsLoader::GCLOUD_POSIX_COMMAND = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#39
Google::Auth::CredentialsLoader::GCLOUD_WINDOWS_COMMAND = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#43
Google::Auth::CredentialsLoader::NOT_FOUND_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#26
Google::Auth::CredentialsLoader::PRIVATE_KEY_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#32
Google::Auth::CredentialsLoader::PROJECT_ID_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#30
Google::Auth::CredentialsLoader::REFRESH_TOKEN_VAR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#47
Google::Auth::CredentialsLoader::SYSTEM_DEFAULT_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#45
Google::Auth::CredentialsLoader::WELL_KNOWN_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/credentials_loader.rb#44
Google::Auth::CredentialsLoader::WELL_KNOWN_PATH = T.let(T.unsafe(nil), String)

# DefaultCredentials is used to preload the credentials file, to determine
# which type of credentials should be loaded.
#
# source://googleauth//lib/googleauth/default_credentials.rb#29
class Google::Auth::DefaultCredentials
  extend ::Google::Auth::CredentialsLoader

  class << self
    # Reads the input json and determines which creds class to use.
    #
    # source://googleauth//lib/googleauth/default_credentials.rb#63
    def determine_creds_class(json_key_io); end

    # override CredentialsLoader#make_creds to use the class determined by
    # loading the json.
    #
    # source://googleauth//lib/googleauth/default_credentials.rb#34
    def make_creds(options = T.unsafe(nil)); end

    # source://googleauth//lib/googleauth/default_credentials.rb#46
    def read_creds; end
  end
end

# Authenticates requests using External Account credentials, such
# as those provided by the AWS provider.
#
# source://googleauth//lib/googleauth/external_account/base_credentials.rb#23
module Google::Auth::ExternalAccount; end

# This module handles the retrieval of credentials from Google Cloud by utilizing the AWS EC2 metadata service and
# then exchanging the credentials for a short-lived Google Cloud access token.
#
# source://googleauth//lib/googleauth/external_account/aws_credentials.rb#26
class Google::Auth::ExternalAccount::AwsCredentials
  include ::Google::Auth::BaseClient
  include ::Google::Auth::Helpers::Connection
  include ::Google::Auth::ExternalAccount::BaseCredentials
  include ::Google::Auth::ExternalAccount::ExternalAccountUtils
  extend ::Google::Auth::CredentialsLoader

  # @return [AwsCredentials] a new instance of AwsCredentials
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#37
  def initialize(options = T.unsafe(nil)); end

  # Will always be nil, but method still gets used.
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#35
  def client_id; end

  # Retrieves the subject token using the credential_source object.
  # The subject token is a serialized [AWS GetCallerIdentity signed request](
  #   https://cloud.google.com/iam/docs/access-resources-aws#exchange-token).
  #
  # The logic is summarized as:
  #
  # Retrieve the AWS region from the AWS_REGION or AWS_DEFAULT_REGION environment variable or from the AWS
  # metadata server availability-zone if not found in the environment variable.
  #
  # Check AWS credentials in environment variables. If not found, retrieve from the AWS metadata server
  # security-credentials endpoint.
  #
  # When retrieving AWS credentials from the metadata server security-credentials endpoint, the AWS role needs to
  # be determined by # calling the security-credentials endpoint without any argument.
  # Then the credentials can be retrieved via: security-credentials/role_name
  #
  # Generate the signed request to AWS STS GetCallerIdentity action.
  #
  # Inject x-goog-cloud-target-resource into header and serialize the signed request.
  # This will be the subject-token to pass to GCP STS.
  #
  # @return [string] The retrieved subject token.
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#78
  def retrieve_subject_token!; end

  private

  # Retrieves the AWS role currently attached to the current AWS workload by querying the AWS metadata server.
  # This is needed for the AWS metadata server security credentials endpoint in order to retrieve the AWS security
  # credentials needed to sign requests to AWS APIs.
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#184
  def fetch_metadata_role_name; end

  # Retrieves the AWS security credentials required for signing AWS requests from the AWS metadata server.
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#193
  def fetch_metadata_security_credentials(role_name); end

  # Retrieves the AWS security credentials required for signing AWS requests from either the AWS security
  # credentials environment variables or from the AWS metadata server.
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#157
  def fetch_security_credentials; end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#130
  def get_aws_resource(url, name, data: T.unsafe(nil), headers: T.unsafe(nil)); end

  # @raise [Faraday::Error]
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#109
  def imdsv2_session_token; end

  # @return [Boolean]
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#125
  def imdsv2_session_token_invalid?; end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#198
  def region; end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#147
  def uri_escape(string); end
end

# Constant for imdsv2 session token expiration in seconds
#
# source://googleauth//lib/googleauth/external_account/aws_credentials.rb#28
Google::Auth::ExternalAccount::AwsCredentials::IMDSV2_TOKEN_EXPIRATION_IN_SECONDS = T.let(T.unsafe(nil), Integer)

# Implements an AWS request signer based on the AWS Signature Version 4 signing process.
# https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#
# source://googleauth//lib/googleauth/external_account/aws_credentials.rb#213
class Google::Auth::ExternalAccount::AwsRequestSigner
  # Instantiates an AWS request signer used to compute authenticated signed requests to AWS APIs based on the AWS
  # Signature Version 4 signing process.
  #
  # @param region_name [string] The AWS region to use.
  # @return [AwsRequestSigner] a new instance of AwsRequestSigner
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#219
  def initialize(region_name); end

  # Generates the signed request for the provided HTTP request for calling
  # an AWS API. This follows the steps described at:
  # https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html
  #
  # @param aws_security_credentials [Hash[string, string]] A dictionary containing the AWS security credentials.
  # @param url [string] The AWS service URL containing the canonical URI and query string.
  # @param method [string] The HTTP method used to call this API.
  # @return [hash{string => string}] The AWS signed request dictionary object.
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#237
  def generate_signed_request(aws_credentials, original_request); end

  private

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#267
  def aws_headers(aws_credentials, original_request, datetime); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#278
  def build_authorization_header(headers, sts, aws_credentials, service_name, date); end

  # Generates the canonical query string given a raw query string.
  # Logic is based on
  # https://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html
  # Code is from the AWS SDK for Ruby
  # https://github.com/aws/aws-sdk-ruby/blob/0ac3d0a393ed216290bfb5f0383380376f6fb1f1/gems/aws-sigv4/lib/aws-sigv4/signer.rb#L532
  #
  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#357
  def build_canonical_querystring(query); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#335
  def canonical_request(http_method, uri, headers, content_sha256); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#304
  def credential(access_key_id, date, service); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#308
  def credential_scope(date, service); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#300
  def hexhmac(key, value); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#296
  def hmac(key, value); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#326
  def host(uri); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#348
  def sha256_hexdigest(string); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#287
  def signature(secret_access_key, date, string_to_sign, service); end

  # source://googleauth//lib/googleauth/external_account/aws_credentials.rb#317
  def string_to_sign(datetime, canonical_request, service); end
end

# Authenticates requests using External Account credentials, such
# as those provided by the AWS provider or OIDC provider like Azure, etc.
#
# source://googleauth//lib/googleauth/external_account/base_credentials.rb#26
module Google::Auth::ExternalAccount::BaseCredentials
  include ::Google::Auth::BaseClient
  include ::Google::Auth::Helpers::Connection

  # Returns the value of attribute access_token.
  #
  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#44
  def access_token; end

  # Sets the attribute access_token
  #
  # @param value the value to set the attribute access_token to.
  #
  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#44
  def access_token=(_arg0); end

  # Returns the value of attribute expires_at.
  #
  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#43
  def expires_at; end

  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#52
  def expires_at=(new_expires_at); end

  # @return [Boolean]
  #
  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#47
  def expires_within?(seconds); end

  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#56
  def fetch_access_token!(_options = T.unsafe(nil)); end

  # Returns whether the credentials represent a workforce pool (True) or
  # workload (False) based on the credentials' audience.
  #
  # @return [bool] true if the credentials represent a workforce pool.
  #   false if they represent a workload.
  #
  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#88
  def is_workforce_pool?; end

  # Retrieves the subject token using the credential_source object.
  #
  # @raise [NoMethodError]
  # @return [string] The retrieved subject token.
  #
  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#78
  def retrieve_subject_token!; end

  # Returns the value of attribute universe_domain.
  #
  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#45
  def universe_domain; end

  # Sets the attribute universe_domain
  #
  # @param value the value to set the attribute universe_domain to.
  #
  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#45
  def universe_domain=(_arg0); end

  private

  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#99
  def base_setup(options); end

  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#127
  def exchange_token; end

  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#163
  def get_impersonated_access_token(token, _options = T.unsafe(nil)); end

  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#178
  def log_impersonated_token_request(original_token); end

  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#145
  def log_token_request(token_request); end

  # source://googleauth//lib/googleauth/external_account/base_credentials.rb#94
  def token_type; end
end

# External account JSON type identifier.
#
# source://googleauth//lib/googleauth/external_account/base_credentials.rb#32
Google::Auth::ExternalAccount::BaseCredentials::EXTERNAL_ACCOUNT_JSON_TYPE = T.let(T.unsafe(nil), String)

# Default IAM_SCOPE
#
# source://googleauth//lib/googleauth/external_account/base_credentials.rb#38
Google::Auth::ExternalAccount::BaseCredentials::IAM_SCOPE = T.let(T.unsafe(nil), Array)

# The token exchange grant_type used for exchanging credentials.
#
# source://googleauth//lib/googleauth/external_account/base_credentials.rb#34
Google::Auth::ExternalAccount::BaseCredentials::STS_GRANT_TYPE = T.let(T.unsafe(nil), String)

# The token exchange requested_token_type. This is always an access_token.
#
# source://googleauth//lib/googleauth/external_account/base_credentials.rb#36
Google::Auth::ExternalAccount::BaseCredentials::STS_REQUESTED_TOKEN_TYPE = T.let(T.unsafe(nil), String)

# Provides an entrypoint for all Exernal Account credential classes.
#
# source://googleauth//lib/googleauth/external_account.rb#30
class Google::Auth::ExternalAccount::Credentials
  class << self
    # Create a ExternalAccount::Credentials
    #
    # @param json_key_io [IO] an IO from which the JSON key can be read
    # @param scope [String, Array, nil] the scope(s) to access
    # @raise [MISSING_CREDENTIAL_SOURCE]
    #
    # source://googleauth//lib/googleauth/external_account.rb#40
    def make_creds(options = T.unsafe(nil)); end

    # Reads the required fields from the JSON.
    #
    # source://googleauth//lib/googleauth/external_account.rb#55
    def read_json_key(json_key_io); end

    private

    # source://googleauth//lib/googleauth/external_account.rb#69
    def make_aws_credentials(user_creds, scope); end

    # @raise [INVALID_EXTERNAL_ACCOUNT_TYPE]
    #
    # source://googleauth//lib/googleauth/external_account.rb#81
    def make_external_account_credentials(user_creds); end
  end
end

# The subject token type used for AWS external_account credentials.
#
# source://googleauth//lib/googleauth/external_account.rb#32
Google::Auth::ExternalAccount::Credentials::AWS_SUBJECT_TOKEN_TYPE = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/external_account.rb#34
Google::Auth::ExternalAccount::Credentials::INVALID_EXTERNAL_ACCOUNT_TYPE = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/external_account.rb#33
Google::Auth::ExternalAccount::Credentials::MISSING_CREDENTIAL_SOURCE = T.let(T.unsafe(nil), String)

# Authenticates requests using External Account credentials, such
# as those provided by the AWS provider or OIDC provider like Azure, etc.
#
# source://googleauth//lib/googleauth/external_account/external_account_utils.rb#26
module Google::Auth::ExternalAccount::ExternalAccountUtils
  # source://googleauth//lib/googleauth/external_account/external_account_utils.rb#77
  def normalize_timestamp(time); end

  # Retrieves the project ID corresponding to the workload identity or workforce pool.
  # For workforce pool credentials, it returns the project ID corresponding to the workforce_pool_user_project.
  # When not determinable, None is returned.
  #
  # The resource may not have permission (resourcemanager.projects.get) to
  # call this API or the required scopes may not be selected:
  # https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes
  #
  # @return [string, nil] The project ID corresponding to the workload identity pool or workforce pool if determinable.
  #
  # source://googleauth//lib/googleauth/external_account/external_account_utils.rb#42
  def project_id; end

  # Retrieve the project number corresponding to workload identity pool
  # STS audience pattern:
  #     `//iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...`
  #
  # @return [string, nil]
  #
  # source://googleauth//lib/googleauth/external_account/external_account_utils.rb#70
  def project_number; end

  # source://googleauth//lib/googleauth/external_account/external_account_utils.rb#90
  def service_account_email; end
end

# Cloud resource manager URL used to retrieve project information.
#
# source://googleauth//lib/googleauth/external_account/external_account_utils.rb#28
Google::Auth::ExternalAccount::ExternalAccountUtils::CLOUD_RESOURCE_MANAGER = T.let(T.unsafe(nil), String)

# This module handles the retrieval of credentials from Google Cloud by utilizing the any 3PI
# provider then exchanging the credentials for a short-lived Google Cloud access token.
#
# source://googleauth//lib/googleauth/external_account/identity_pool_credentials.rb#25
class Google::Auth::ExternalAccount::IdentityPoolCredentials
  include ::Google::Auth::BaseClient
  include ::Google::Auth::Helpers::Connection
  include ::Google::Auth::ExternalAccount::BaseCredentials
  include ::Google::Auth::ExternalAccount::ExternalAccountUtils
  extend ::Google::Auth::CredentialsLoader

  # Initialize from options map.
  #
  # @param audience [string]
  # @param credential_source [hash{symbol => value}] credential_source is a hash that contains either source file or url.
  #   credential_source_format is either text or json. To define how we parse the credential response.
  # @return [IdentityPoolCredentials] a new instance of IdentityPoolCredentials
  #
  # source://googleauth//lib/googleauth/external_account/identity_pool_credentials.rb#40
  def initialize(options = T.unsafe(nil)); end

  # Will always be nil, but method still gets used.
  #
  # source://googleauth//lib/googleauth/external_account/identity_pool_credentials.rb#31
  def client_id; end

  # Implementation of BaseCredentials retrieve_subject_token!
  #
  # source://googleauth//lib/googleauth/external_account/identity_pool_credentials.rb#54
  def retrieve_subject_token!; end

  private

  # source://googleauth//lib/googleauth/external_account/identity_pool_credentials.rb#98
  def file_data; end

  # source://googleauth//lib/googleauth/external_account/identity_pool_credentials.rb#94
  def token_data; end

  # source://googleauth//lib/googleauth/external_account/identity_pool_credentials.rb#104
  def url_data; end

  # source://googleauth//lib/googleauth/external_account/identity_pool_credentials.rb#73
  def validate_credential_source; end
end

# This module handles the retrieval of credentials from Google Cloud by utilizing the any 3PI
# provider then exchanging the credentials for a short-lived Google Cloud access token.
#
# source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#26
class Google::Auth::ExternalAccount::PluggableAuthCredentials
  include ::Google::Auth::BaseClient
  include ::Google::Auth::Helpers::Connection
  include ::Google::Auth::ExternalAccount::BaseCredentials
  include ::Google::Auth::ExternalAccount::ExternalAccountUtils
  extend ::Google::Auth::CredentialsLoader

  # Initialize from options map.
  #
  # @param audience [string]
  # @param credential_source [hash{symbol => value}] credential_source is a hash that contains either source file or url.
  #   credential_source_format is either text or json. To define how we parse the credential response.
  # @return [PluggableAuthCredentials] a new instance of PluggableAuthCredentials
  #
  # source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#49
  def initialize(options = T.unsafe(nil)); end

  # Will always be nil, but method still gets used.
  #
  # source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#40
  def client_id; end

  # source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#69
  def retrieve_subject_token!; end

  private

  # source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#130
  def inject_environment_variables; end

  # source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#87
  def load_subject_token_from_output_file; end

  # source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#105
  def parse_subject_token(response); end

  # source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#144
  def subprocess_with_timeout(environment_vars, command, timeout_seconds); end

  # source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#122
  def validate_response_schema(response); end
end

# constant for pluggable auth enablement in environment variable.
#
# source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#28
Google::Auth::ExternalAccount::PluggableAuthCredentials::ENABLE_PLUGGABLE_ENV = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#29
Google::Auth::ExternalAccount::PluggableAuthCredentials::EXECUTABLE_SUPPORTED_MAX_VERSION = T.let(T.unsafe(nil), Integer)

# source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#30
Google::Auth::ExternalAccount::PluggableAuthCredentials::EXECUTABLE_TIMEOUT_MILLIS_DEFAULT = T.let(T.unsafe(nil), Integer)

# source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#31
Google::Auth::ExternalAccount::PluggableAuthCredentials::EXECUTABLE_TIMEOUT_MILLIS_LOWER_BOUND = T.let(T.unsafe(nil), Integer)

# source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#32
Google::Auth::ExternalAccount::PluggableAuthCredentials::EXECUTABLE_TIMEOUT_MILLIS_UPPER_BOUND = T.let(T.unsafe(nil), Integer)

# source://googleauth//lib/googleauth/external_account/pluggable_credentials.rb#33
Google::Auth::ExternalAccount::PluggableAuthCredentials::ID_TOKEN_TYPE = T.let(T.unsafe(nil), Array)

# Extends Signet::OAuth2::Client so that the auth token is obtained from
# the GCE metadata server.
#
# source://googleauth//lib/googleauth/compute_engine.rb#35
class Google::Auth::GCECredentials < ::Signet::OAuth2::Client
  # Construct a GCECredentials
  #
  # @return [GCECredentials] a new instance of GCECredentials
  #
  # source://googleauth//lib/googleauth/compute_engine.rb#87
  def initialize(options = T.unsafe(nil)); end

  # @private Temporary; remove when universe domain metadata endpoint is stable (see b/349488459).
  #
  # source://googleauth//lib/googleauth/compute_engine.rb#84
  def disable_universe_domain_check; end

  # @private Temporary; remove when universe domain metadata endpoint is stable (see b/349488459).
  #
  # source://googleauth//lib/googleauth/compute_engine.rb#84
  def disable_universe_domain_check=(_arg0); end

  # Overrides the super class method to change how access tokens are
  # fetched.
  #
  # source://googleauth//lib/googleauth/compute_engine.rb#111
  def fetch_access_token(_options = T.unsafe(nil)); end

  # Overrides universe_domain getter to fetch lazily if it hasn't been
  # fetched yet. This is necessary specifically for Compute Engine because
  # the universe comes from the metadata service, and isn't known
  # immediately on credential construction. All other credential types read
  # the universe from their json key or other immediate input.
  #
  # @private
  #
  # source://googleauth//lib/googleauth/compute_engine.rb#102
  def universe_domain; end

  private

  # source://googleauth//lib/googleauth/compute_engine.rb#198
  def add_universe_domain_to(hash); end

  # The response might have been cached, which means expires_in might be
  # stale. Update it based on the time since the data was retrieved.
  # We also ensure expires_in is conservative; subtracting at least 1
  # second to offset any skew from metadata server latency.
  #
  # source://googleauth//lib/googleauth/compute_engine.rb#215
  def adjust_for_stale_expires_in(hash, retrieval_time); end

  # source://googleauth//lib/googleauth/compute_engine.rb#177
  def build_token_hash(body, content_type, retrieval_time); end

  # source://googleauth//lib/googleauth/compute_engine.rb#168
  def log_fetch_err(_err); end

  # source://googleauth//lib/googleauth/compute_engine.rb#141
  def log_fetch_query; end

  # source://googleauth//lib/googleauth/compute_engine.rb#159
  def log_fetch_resp(resp); end

  # source://googleauth//lib/googleauth/compute_engine.rb#189
  def parse_encoded_token(body); end

  class << self
    # @private Unused and deprecated
    #
    # source://googleauth//lib/googleauth/compute_engine.rb#60
    def compute_auth_token_uri; end

    # @private Unused and deprecated
    #
    # source://googleauth//lib/googleauth/compute_engine.rb#55
    def compute_check_uri; end

    # @private Unused and deprecated
    #
    # source://googleauth//lib/googleauth/compute_engine.rb#65
    def compute_id_token_uri; end

    # @private Unused and deprecated
    #
    # source://googleauth//lib/googleauth/compute_engine.rb#50
    def metadata_host; end

    # Detect if this appear to be a GCE instance, by checking if metadata
    # is available.
    # The parameters are deprecated and unused.
    #
    # @return [Boolean]
    #
    # source://googleauth//lib/googleauth/compute_engine.rb#72
    def on_gce?(_options = T.unsafe(nil), _reload = T.unsafe(nil)); end

    # source://googleauth//lib/googleauth/compute_engine.rb#76
    def reset_cache; end

    # source://googleauth//lib/googleauth/compute_engine.rb#76
    def unmemoize_all; end
  end
end

# @private Unused and deprecated but retained to prevent breaking changes
#
# source://googleauth//lib/googleauth/compute_engine.rb#40
Google::Auth::GCECredentials::COMPUTE_AUTH_TOKEN_URI = T.let(T.unsafe(nil), String)

# @private Unused and deprecated but retained to prevent breaking changes
#
# source://googleauth//lib/googleauth/compute_engine.rb#46
Google::Auth::GCECredentials::COMPUTE_CHECK_URI = T.let(T.unsafe(nil), String)

# @private Unused and deprecated but retained to prevent breaking changes
#
# source://googleauth//lib/googleauth/compute_engine.rb#43
Google::Auth::GCECredentials::COMPUTE_ID_TOKEN_URI = T.let(T.unsafe(nil), String)

# @private Unused and deprecated but retained to prevent breaking changes
#
# source://googleauth//lib/googleauth/compute_engine.rb#37
Google::Auth::GCECredentials::DEFAULT_METADATA_HOST = T.let(T.unsafe(nil), String)

# Helpers provides utility methods for Google::Auth.
#
# source://googleauth//lib/googleauth/helpers/connection.rb#22
module Google::Auth::Helpers; end

# Connection provides a Faraday connection for use with Google::Auth.
#
# source://googleauth//lib/googleauth/helpers/connection.rb#24
module Google::Auth::Helpers::Connection
  private

  # source://googleauth//lib/googleauth/helpers/connection.rb#29
  def connection; end

  # source://googleauth//lib/googleauth/helpers/connection.rb#27
  def default_connection; end

  # source://googleauth//lib/googleauth/helpers/connection.rb#27
  def default_connection=(_arg0); end

  class << self
    # source://googleauth//lib/googleauth/helpers/connection.rb#29
    def connection; end
  end
end

# ## Verifying Google ID tokens
#
# This module verifies ID tokens issued by Google. This can be used to
# authenticate signed-in users using OpenID Connect. See
# https://developers.google.com/identity/sign-in/web/backend-auth for more
# information.
#
# ### Basic usage
#
# To verify an ID token issued by Google accounts:
#
#     payload = Google::Auth::IDTokens.verify_oidc the_token,
#                                                  aud: "my-app-client-id"
#
# If verification succeeds, you will receive the token's payload as a hash.
# If verification fails, an exception (normally a subclass of
# {Google::Auth::IDTokens::VerificationError}) will be raised.
#
# To verify an ID token issued by the Google identity-aware proxy (IAP):
#
#     payload = Google::Auth::IDTokens.verify_iap the_token,
#                                                 aud: "my-app-client-id"
#
# These methods will automatically download and cache the Google public
# keys necessary to verify these tokens. They will also automatically
# verify the issuer (`iss`) field for their respective types of ID tokens.
#
# ### Advanced usage
#
# If you want to provide your own public keys, either by pointing at a
# custom URI or by providing the key data directly, use the Verifier class
# and pass in a key source.
#
# To point to a custom URI that returns a JWK set:
#
#     source = Google::Auth::IDTokens::JwkHttpKeySource.new "https://example.com/jwk"
#     verifier = Google::Auth::IDTokens::Verifier.new key_source: source
#     payload = verifier.verify the_token, aud: "my-app-client-id"
#
# To provide key data directly:
#
#     jwk_data = {
#       keys: [
#         {
#           alg: "ES256",
#           crv: "P-256",
#           kid: "LYyP2g",
#           kty: "EC",
#           use: "sig",
#           x: "SlXFFkJ3JxMsXyXNrqzE3ozl_0913PmNbccLLWfeQFU",
#           y: "GLSahrZfBErmMUcHP0MGaeVnJdBwquhrhQ8eP05NfCI"
#         }
#       ]
#     }
#     source = Google::Auth::IDTokens::StaticKeySource.from_jwk_set jwk_data
#     verifier = Google::Auth::IDTokens::Verifier key_source: source
#     payload = verifier.verify the_token, aud: "my-app-client-id"
#
# source://googleauth//lib/googleauth/id_tokens/errors.rb#20
module Google::Auth::IDTokens
  class << self
    # Reset all convenience key sources. Used for testing.
    #
    # @private
    #
    # source://googleauth//lib/googleauth/id_tokens.rb#136
    def forget_sources!; end

    # The key source providing public keys that can be used to verify
    # ID tokens issued by Google IAP.
    #
    # @return [Google::Auth::IDTokens::JwkHttpKeySource]
    #
    # source://googleauth//lib/googleauth/id_tokens.rb#128
    def iap_key_source; end

    # The key source providing public keys that can be used to verify
    # ID tokens issued by Google OIDC.
    #
    # @return [Google::Auth::IDTokens::JwkHttpKeySource]
    #
    # source://googleauth//lib/googleauth/id_tokens.rb#118
    def oidc_key_source; end

    # A convenience method that verifies a token allegedly issued by Google
    # IAP.
    #
    # @param token [String] The ID token to verify
    # @param aud [String, Array<String>, nil] The expected audience. At least
    #   one `aud` field in the token must match at least one of the
    #   provided audiences, or the verification will fail with
    #   {Google::Auth::IDToken::AudienceMismatchError}. If `nil` (the
    #   default), no audience checking is performed.
    # @param azp [String, Array<String>, nil] The expected authorized party
    #   (azp). At least one `azp` field in the token must match at least
    #   one of the provided values, or the verification will fail with
    #   {Google::Auth::IDToken::AuthorizedPartyMismatchError}. If `nil`
    #   (the default), no azp checking is performed.
    # @param iss [String, Array<String>, nil] The expected issuer. At least
    #   one `iss` field in the token must match at least one of the
    #   provided issuers, or the verification will fail with
    #   {Google::Auth::IDToken::IssuerMismatchError}. If `nil`, no issuer
    #   checking is performed. Default is to check against {IAP_ISSUERS}.
    # @raise [KeySourceError] if the key source failed to obtain public keys
    # @raise [VerificationError] if the token verification failed.
    #   Additional data may be available in the error subclass and message.
    # @return [Hash] The decoded token payload.
    #
    # source://googleauth//lib/googleauth/id_tokens.rb#204
    def verify_iap(token, aud: T.unsafe(nil), azp: T.unsafe(nil), iss: T.unsafe(nil)); end

    # A convenience method that verifies a token allegedly issued by Google
    # OIDC.
    #
    # @param token [String] The ID token to verify
    # @param aud [String, Array<String>, nil] The expected audience. At least
    #   one `aud` field in the token must match at least one of the
    #   provided audiences, or the verification will fail with
    #   {Google::Auth::IDToken::AudienceMismatchError}. If `nil` (the
    #   default), no audience checking is performed.
    # @param azp [String, Array<String>, nil] The expected authorized party
    #   (azp). At least one `azp` field in the token must match at least
    #   one of the provided values, or the verification will fail with
    #   {Google::Auth::IDToken::AuthorizedPartyMismatchError}. If `nil`
    #   (the default), no azp checking is performed.
    # @param iss [String, Array<String>, nil] The expected issuer. At least
    #   one `iss` field in the token must match at least one of the
    #   provided issuers, or the verification will fail with
    #   {Google::Auth::IDToken::IssuerMismatchError}. If `nil`, no issuer
    #   checking is performed. Default is to check against {OIDC_ISSUERS}.
    # @raise [KeySourceError] if the key source failed to obtain public keys
    # @raise [VerificationError] if the token verification failed.
    #   Additional data may be available in the error subclass and message.
    # @return [Hash] The decoded token payload.
    #
    # source://googleauth//lib/googleauth/id_tokens.rb#167
    def verify_oidc(token, aud: T.unsafe(nil), azp: T.unsafe(nil), iss: T.unsafe(nil)); end
  end
end

# A key source that aggregates other key sources. This means it will
# aggregate the keys provided by its constituent sources. Additionally,
# when asked to refresh, it will refresh all its constituent sources.
#
# source://googleauth//lib/googleauth/id_tokens/key_sources.rb#351
class Google::Auth::IDTokens::AggregateKeySource
  # Create a key source that aggregates other key sources.
  #
  # @param sources [Array<key source>] The key sources to aggregate.
  # @return [AggregateKeySource] a new instance of AggregateKeySource
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#357
  def initialize(sources); end

  # Return the current keys, without attempting to refresh.
  #
  # @return [Array<KeyInfo>]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#366
  def current_keys; end

  # Attempt to refresh keys and return the new keys.
  #
  # @raise [KeySourceError] if key retrieval failed.
  # @return [Array<KeyInfo>]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#376
  def refresh_keys; end
end

# Failed to verify a token because its audience did not match.
#
# source://googleauth//lib/googleauth/id_tokens/errors.rb#49
class Google::Auth::IDTokens::AudienceMismatchError < ::Google::Auth::IDTokens::VerificationError; end

# Failed to verify a token because its authorized party did not match.
#
# source://googleauth//lib/googleauth/id_tokens/errors.rb#54
class Google::Auth::IDTokens::AuthorizedPartyMismatchError < ::Google::Auth::IDTokens::VerificationError; end

# Failed to verify a token because it is expired.
#
# source://googleauth//lib/googleauth/id_tokens/errors.rb#34
class Google::Auth::IDTokens::ExpiredTokenError < ::Google::Auth::IDTokens::VerificationError; end

# A base key source that downloads keys from a URI. Subclasses should
# override {HttpKeySource#interpret_json} to parse the response.
#
# source://googleauth//lib/googleauth/id_tokens/key_sources.rb#222
class Google::Auth::IDTokens::HttpKeySource
  # Create an HTTP key source.
  #
  # @param uri [String, URI] The URI from which to download keys.
  # @param retry_interval [Integer, nil] Override the retry interval in
  #   seconds. This is the minimum time between retries of failed key
  #   downloads.
  # @return [HttpKeySource] a new instance of HttpKeySource
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#238
  def initialize(uri, retry_interval: T.unsafe(nil)); end

  # Return the current keys, without attempting to re-download.
  #
  # @return [Array<KeyInfo>]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#257
  def current_keys; end

  # Attempt to re-download keys (if the retry interval has expired) and
  # return the new keys.
  #
  # @raise [KeySourceError] if key retrieval failed.
  # @return [Array<KeyInfo>]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#266
  def refresh_keys; end

  # The URI from which to download keys.
  #
  # @return [Array<KeyInfo>]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#250
  def uri; end

  protected

  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#286
  def interpret_json(_data); end
end

# The default interval between retries in seconds (3600s = 1hr).
#
# @return [Integer]
#
# source://googleauth//lib/googleauth/id_tokens/key_sources.rb#228
Google::Auth::IDTokens::HttpKeySource::DEFAULT_RETRY_INTERVAL = T.let(T.unsafe(nil), Integer)

# A list of issuers expected for Google IAP-issued tokens.
#
# @return [Array<String>]
#
# source://googleauth//lib/googleauth/id_tokens.rb#95
Google::Auth::IDTokens::IAP_ISSUERS = T.let(T.unsafe(nil), Array)

# The URL for Google IAP public keys
#
# @return [String]
#
# source://googleauth//lib/googleauth/id_tokens.rb#109
Google::Auth::IDTokens::IAP_JWK_URL = T.let(T.unsafe(nil), String)

# Failed to verify a token because its issuer did not match.
#
# source://googleauth//lib/googleauth/id_tokens/errors.rb#44
class Google::Auth::IDTokens::IssuerMismatchError < ::Google::Auth::IDTokens::VerificationError; end

# A key source that downloads a JWK set.
#
# source://googleauth//lib/googleauth/id_tokens/key_sources.rb#326
class Google::Auth::IDTokens::JwkHttpKeySource < ::Google::Auth::IDTokens::HttpKeySource
  # Create a key source that downloads a JWT Set.
  #
  # @param uri [String, URI] The URI from which to download keys.
  # @param retry_interval [Integer, nil] Override the retry interval in
  #   seconds. This is the minimum time between retries of failed key
  #   downloads.
  # @return [JwkHttpKeySource] a new instance of JwkHttpKeySource
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#335
  def initialize(uri, retry_interval: T.unsafe(nil)); end

  protected

  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#341
  def interpret_json(data); end
end

# A public key used for verifying ID tokens.
#
# This includes the public key data, ID, and the algorithm used for
# signature verification. RSA and Elliptical Curve (EC) keys are
# supported.
#
# source://googleauth//lib/googleauth/id_tokens/key_sources.rb#36
class Google::Auth::IDTokens::KeyInfo
  # Create a public key info structure.
  #
  # @param id [String] The key ID.
  # @param key [OpenSSL::PKey::RSA, OpenSSL::PKey::EC] The key itself.
  # @param algorithm [String] The algorithm (normally `RS256` or `ES256`)
  # @return [KeyInfo] a new instance of KeyInfo
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#44
  def initialize(id: T.unsafe(nil), key: T.unsafe(nil), algorithm: T.unsafe(nil)); end

  # The signature algorithm. (normally `RS256` or `ES256`)
  #
  # @return [String]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#66
  def algorithm; end

  # The key ID.
  #
  # @return [String]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#54
  def id; end

  # The key itself.
  #
  # @return [OpenSSL::PKey::RSA, OpenSSL::PKey::EC]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#60
  def key; end

  class << self
    # Create a KeyInfo from a single JWK, which may be given as either a
    # hash or an unparsed JSON string.
    #
    # @param jwk [Hash, String] The JWK specification.
    # @raise [KeySourceError] If the key could not be extracted from the
    #   JWK.
    # @return [KeyInfo]
    #
    # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#78
    def from_jwk(jwk); end

    # Create an array of KeyInfo from a JWK Set, which may be given as
    # either a hash or an unparsed JSON string.
    #
    # @param jwk [Hash, String] The JWK Set specification.
    # @raise [KeySourceError] If a key could not be extracted from the
    #   JWK Set.
    # @return [Array<KeyInfo>]
    #
    # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#102
    def from_jwk_set(jwk_set); end

    private

    # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#111
    def ensure_json_parsed(input); end

    # @raise [KeySourceError]
    #
    # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#146
    def extract_ec_key(jwk); end

    # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#124
    def extract_rsa_key(jwk); end

    # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#118
    def symbolize_keys(hash); end
  end
end

# Failed to obtain keys from the key source.
#
# source://googleauth//lib/googleauth/id_tokens/errors.rb#24
class Google::Auth::IDTokens::KeySourceError < ::StandardError; end

# The URL for Google OAuth2 V3 public certs
#
# @return [String]
#
# source://googleauth//lib/googleauth/id_tokens.rb#102
Google::Auth::IDTokens::OAUTH2_V3_CERTS_URL = T.let(T.unsafe(nil), String)

# A list of issuers expected for Google OIDC-issued tokens.
#
# @return [Array<String>]
#
# source://googleauth//lib/googleauth/id_tokens.rb#88
Google::Auth::IDTokens::OIDC_ISSUERS = T.let(T.unsafe(nil), Array)

# Failed to verify a token because its signature did not match.
#
# source://googleauth//lib/googleauth/id_tokens/errors.rb#39
class Google::Auth::IDTokens::SignatureError < ::Google::Auth::IDTokens::VerificationError; end

# A key source that contains a static set of keys.
#
# source://googleauth//lib/googleauth/id_tokens/key_sources.rb#173
class Google::Auth::IDTokens::StaticKeySource
  # Create a static key source with the given keys.
  #
  # @param keys [Array<KeyInfo>] The keys
  # @return [StaticKeySource] a new instance of StaticKeySource
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#179
  def initialize(keys); end

  # Return the current keys. Does not perform any refresh.
  #
  # @return [Array<KeyInfo>]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#188
  def current_keys; end

  # Return the current keys. Does not perform any refresh.
  #
  # @return [Array<KeyInfo>]
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#188
  def refresh_keys; end

  class << self
    # Create a static key source containing a single key parsed from a
    # single JWK, which may be given as either a hash or an unparsed
    # JSON string.
    #
    # @param jwk [Hash, String] The JWK specification.
    # @return [StaticKeySource]
    #
    # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#200
    def from_jwk(jwk); end

    # Create a static key source containing multiple keys parsed from a
    # JWK Set, which may be given as either a hash or an unparsed JSON
    # string.
    #
    # @param jwk_set [Hash, String] The JWK Set specification.
    # @return [StaticKeySource]
    #
    # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#212
    def from_jwk_set(jwk_set); end
  end
end

# Failed to verify a token.
#
# source://googleauth//lib/googleauth/id_tokens/errors.rb#29
class Google::Auth::IDTokens::VerificationError < ::StandardError; end

# An object that can verify ID tokens.
#
# A verifier maintains a set of default settings, including the key
# source and fields to verify. However, individual verification calls can
# override any of these settings.
#
# source://googleauth//lib/googleauth/id_tokens/verifier.rb#29
class Google::Auth::IDTokens::Verifier
  # Create a verifier.
  #
  # @param key_source [key source] The default key source to use. All
  #   verification calls must have a key source, so if no default key
  #   source is provided here, then calls to {#verify} _must_ provide
  #   a key source.
  # @param aud [String, nil] The default audience (`aud`) check, or `nil`
  #   for no check.
  # @param azp [String, nil] The default authorized party (`azp`) check,
  #   or `nil` for no check.
  # @param iss [String, nil] The default issuer (`iss`) check, or `nil`
  #   for no check.
  # @return [Verifier] a new instance of Verifier
  #
  # source://googleauth//lib/googleauth/id_tokens/verifier.rb#44
  def initialize(key_source: T.unsafe(nil), aud: T.unsafe(nil), azp: T.unsafe(nil), iss: T.unsafe(nil)); end

  # Verify the given token.
  #
  # @param token [String] the ID token to verify.
  # @param key_source [key source] If given, override the key source.
  # @param aud [String, nil] If given, override the `aud` check.
  # @param azp [String, nil] If given, override the `azp` check.
  # @param iss [String, nil] If given, override the `iss` check.
  # @raise [KeySourceError] if the key source failed to obtain public keys
  # @raise [VerificationError] if the token verification failed.
  #   Additional data may be available in the error subclass and message.
  # @return [Hash] the decoded payload, if verification succeeded.
  #
  # source://googleauth//lib/googleauth/id_tokens/verifier.rb#68
  def verify(token, key_source: T.unsafe(nil), aud: T.unsafe(nil), azp: T.unsafe(nil), iss: T.unsafe(nil)); end

  private

  # source://googleauth//lib/googleauth/id_tokens/verifier.rb#91
  def decode_token(token, keys, aud, azp, iss); end

  # source://googleauth//lib/googleauth/id_tokens/verifier.rb#106
  def normalize_and_verify_payload(payload, aud, azp, iss); end
end

# A key source that downloads X509 certificates.
# Used by the legacy OAuth V1 public certs endpoint.
#
# source://googleauth//lib/googleauth/id_tokens/key_sources.rb#295
class Google::Auth::IDTokens::X509CertHttpKeySource < ::Google::Auth::IDTokens::HttpKeySource
  # Create a key source that downloads X509 certificates.
  #
  # @param uri [String, URI] The URI from which to download keys.
  # @param algorithm [String] The algorithm to use for signature
  #   verification. Defaults to "`RS256`".
  # @param retry_interval [Integer, nil] Override the retry interval in
  #   seconds. This is the minimum time between retries of failed key
  #   downloads.
  # @return [X509CertHttpKeySource] a new instance of X509CertHttpKeySource
  #
  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#306
  def initialize(uri, algorithm: T.unsafe(nil), retry_interval: T.unsafe(nil)); end

  protected

  # source://googleauth//lib/googleauth/id_tokens/key_sources.rb#313
  def interpret_json(data); end
end

# JsonKeyReader contains the behaviour used to read private key and
# client email fields from the service account
#
# source://googleauth//lib/googleauth/json_key_reader.rb#21
module Google::Auth::JsonKeyReader
  # source://googleauth//lib/googleauth/json_key_reader.rb#22
  def read_json_key(json_key_io); end
end

# source://googleauth//lib/googleauth/application_default.rb#22
Google::Auth::NOT_FOUND_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/compute_engine.rb#22
Google::Auth::NO_METADATA_SERVER_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/oauth2/sts_client.rb#19
module Google::Auth::OAuth2; end

# OAuth 2.0 Token Exchange Spec.
# This module defines a token exchange utility based on the
# [OAuth 2.0 Token Exchange](https://tools.ietf.org/html/rfc8693) spec. This will be mainly
# used to exchange external credentials for GCP access tokens in workload identity pools to
# access Google APIs.
# The implementation will support various types of client authentication as allowed in the spec.
#
# A deviation on the spec will be for additional Google specific options that cannot be easily
# mapped to parameters defined in the RFC.
# The returned dictionary response will be based on the [rfc8693 section 2.2.1]
# (https://tools.ietf.org/html/rfc8693#section-2.2.1) spec JSON response.
#
# source://googleauth//lib/googleauth/oauth2/sts_client.rb#32
class Google::Auth::OAuth2::STSClient
  include ::Google::Auth::Helpers::Connection

  # Create a new instance of the STSClient.
  #
  # @param token_exchange_endpoint [String] The token exchange endpoint.
  # @return [STSClient] a new instance of STSClient
  #
  # source://googleauth//lib/googleauth/oauth2/sts_client.rb#41
  def initialize(options = T.unsafe(nil)); end

  # Exchanges the provided token for another type of token based on the
  # rfc8693 spec
  #
  # A callable faraday instance used to make HTTP requests.
  #
  # @param connection [Faraday instance]
  # @param grant_type [String] The OAuth 2.0 token exchange grant type.
  # @param subject_token [String] The OAuth 2.0 token exchange subject token.
  # @param subject_token_type [String] The OAuth 2.0 token exchange subject token type.
  # @param resource [String] The optional OAuth 2.0 token exchange resource field.
  # @param audience [String] The optional OAuth 2.0 token exchange audience field.
  # @param scopes [Array<String>] The optional list of scopes to use.
  # @param requested_token_type [String] The optional OAuth 2.0 token exchange requested token type.
  # @param additional_headers [Hash<String,String>] :
  #   The optional additional headers to pass to the token exchange endpoint.
  # @return [Hash] A hash containing the token exchange response.
  #
  # source://googleauth//lib/googleauth/oauth2/sts_client.rb#70
  def exchange_token(options = T.unsafe(nil)); end

  private

  # source://googleauth//lib/googleauth/oauth2/sts_client.rb#92
  def make_request(options = T.unsafe(nil)); end
end

# source://googleauth//lib/googleauth/oauth2/sts_client.rb#35
Google::Auth::OAuth2::STSClient::URLENCODED_HEADERS = T.let(T.unsafe(nil), Hash)

# Small utility for normalizing scopes into canonical form.
#
# The canonical form of scopes is as an array of strings, each in the form
# of a full URL. This utility converts space-delimited scope strings into
# this form, and handles a small number of common aliases.
#
# This is used by UserRefreshCredentials to verify that a credential grants
# a requested scope.
#
# source://googleauth//lib/googleauth/scope_util.rb#31
module Google::Auth::ScopeUtil
  class << self
    # Ensure the input is an array. If a single string is passed in, splits
    # it via whitespace. Does not interpret aliases.
    #
    # @param scope [String, Array<String>] Input scope(s)
    # @raise ArgumentError If the input is not a string or array of strings
    # @return [Array<String>] Always an array of strings
    #
    # source://googleauth//lib/googleauth/scope_util.rb#62
    def as_array(scope); end

    # Normalize the input, which may be an array of scopes or a whitespace-
    # delimited scope string. The output is always an array, even if a single
    # scope is input.
    #
    # @param scope [String, Array<String>] Input scope(s)
    # @return [Array<String>] An array of scopes in canonical form.
    #
    # source://googleauth//lib/googleauth/scope_util.rb#49
    def normalize(scope); end
  end
end

# Aliases understood by this utility
#
# source://googleauth//lib/googleauth/scope_util.rb#35
Google::Auth::ScopeUtil::ALIASES = T.let(T.unsafe(nil), Hash)

# Authenticates requests using Google's Service Account credentials via an
# OAuth access token.
#
# This class allows authorizing requests for service accounts directly
# from credentials from a json key file downloaded from the developer
# console (via 'Generate new Json Key').
#
# cf [Application Default Credentials](https://cloud.google.com/docs/authentication/production)
#
# source://googleauth//lib/googleauth/service_account.rb#35
class Google::Auth::ServiceAccountCredentials < ::Signet::OAuth2::Client
  extend ::Google::Auth::CredentialsLoader
  extend ::Google::Auth::JsonKeyReader

  # @return [ServiceAccountCredentials] a new instance of ServiceAccountCredentials
  #
  # source://googleauth//lib/googleauth/service_account.rb#93
  def initialize(options = T.unsafe(nil)); end

  # Extends the base class to use a transient
  # ServiceAccountJwtHeaderCredentials for certain cases.
  #
  # source://googleauth//lib/googleauth/service_account.rb#102
  def apply!(a_hash, opts = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://googleauth//lib/googleauth/service_account.rb#42
  def enable_self_signed_jwt?; end

  # Modifies this logic so it also requires self-signed-jwt to be disabled
  #
  # @return [Boolean]
  #
  # source://googleauth//lib/googleauth/service_account.rb#111
  def needs_access_token?; end

  # Returns the value of attribute project_id.
  #
  # source://googleauth//lib/googleauth/service_account.rb#39
  def project_id; end

  # Returns the value of attribute quota_project_id.
  #
  # source://googleauth//lib/googleauth/service_account.rb#40
  def quota_project_id; end

  private

  # source://googleauth//lib/googleauth/service_account.rb#117
  def apply_self_signed_jwt!(a_hash); end

  class << self
    # Creates a ServiceAccountCredentials.
    #
    # @param json_key_io [IO] an IO from which the JSON key can be read
    # @param scope [string|array|nil] the scope(s) to access
    # @raise [ArgumentError]
    #
    # source://googleauth//lib/googleauth/service_account.rb#54
    def make_creds(options = T.unsafe(nil)); end

    # Handles certain escape sequences that sometimes appear in input.
    # Specifically, interprets the "\n" sequence for newline, and removes
    # enclosing quotes.
    #
    # source://googleauth//lib/googleauth/service_account.rb#87
    def unescape(str); end
  end
end

# source://googleauth//lib/googleauth/service_account.rb#36
Google::Auth::ServiceAccountCredentials::TOKEN_CRED_URI = T.let(T.unsafe(nil), String)

# Authenticates requests using Google's Service Account credentials via
# JWT Header.
#
# This class allows authorizing requests for service accounts directly
# from credentials from a json key file downloaded from the developer
# console (via 'Generate new Json Key').  It is not part of any OAuth2
# flow, rather it creates a JWT and sends that as a credential.
#
# cf [Application Default Credentials](https://cloud.google.com/docs/authentication/production)
#
# source://googleauth//lib/googleauth/service_account.rb#141
class Google::Auth::ServiceAccountJwtHeaderCredentials
  extend ::Google::Auth::CredentialsLoader
  extend ::Google::Auth::JsonKeyReader

  # Initializes a ServiceAccountJwtHeaderCredentials.
  #
  # @param json_key_io [IO] an IO from which the JSON key can be read
  # @return [ServiceAccountJwtHeaderCredentials] a new instance of ServiceAccountJwtHeaderCredentials
  #
  # source://googleauth//lib/googleauth/service_account.rb#166
  def initialize(options = T.unsafe(nil)); end

  # Returns a clone of a_hash updated with the authorization header
  #
  # source://googleauth//lib/googleauth/service_account.rb#201
  def apply(a_hash, opts = T.unsafe(nil)); end

  # Construct a jwt token if the JWT_AUD_URI key is present in the input
  # hash.
  #
  # The jwt token is used as the value of a 'Bearer '.
  #
  # source://googleauth//lib/googleauth/service_account.rb#188
  def apply!(a_hash, opts = T.unsafe(nil)); end

  # Returns the value of attribute logger.
  #
  # source://googleauth//lib/googleauth/service_account.rb#152
  def logger; end

  # Sets the attribute logger
  #
  # @param value the value to set the attribute logger to.
  #
  # source://googleauth//lib/googleauth/service_account.rb#152
  def logger=(_arg0); end

  # Duck-types the corresponding method from BaseClient
  #
  # @return [Boolean]
  #
  # source://googleauth//lib/googleauth/service_account.rb#237
  def needs_access_token?; end

  # Creates a jwt uri token.
  #
  # source://googleauth//lib/googleauth/service_account.rb#214
  def new_jwt_token(jwt_aud_uri = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute project_id.
  #
  # source://googleauth//lib/googleauth/service_account.rb#149
  def project_id; end

  # Returns the value of attribute quota_project_id.
  #
  # source://googleauth//lib/googleauth/service_account.rb#150
  def quota_project_id; end

  # Returns the value of attribute universe_domain.
  #
  # source://googleauth//lib/googleauth/service_account.rb#151
  def universe_domain; end

  # Sets the attribute universe_domain
  #
  # @param value the value to set the attribute universe_domain to.
  #
  # source://googleauth//lib/googleauth/service_account.rb#151
  def universe_domain=(_arg0); end

  # Returns a reference to the #apply method, suitable for passing as
  # a closure
  #
  # source://googleauth//lib/googleauth/service_account.rb#209
  def updater_proc; end

  class << self
    # Create a ServiceAccountJwtHeaderCredentials.
    #
    # @param json_key_io [IO] an IO from which the JSON key can be read
    # @param scope [string|array|nil] the scope(s) to access
    #
    # source://googleauth//lib/googleauth/service_account.rb#158
    def make_creds(options = T.unsafe(nil)); end
  end
end

# source://googleauth//lib/googleauth/service_account.rb#143
Google::Auth::ServiceAccountJwtHeaderCredentials::AUTH_METADATA_KEY = T.let(T.unsafe(nil), Symbol)

# source://googleauth//lib/googleauth/service_account.rb#146
Google::Auth::ServiceAccountJwtHeaderCredentials::EXPIRY = T.let(T.unsafe(nil), Integer)

# source://googleauth//lib/googleauth/service_account.rb#142
Google::Auth::ServiceAccountJwtHeaderCredentials::JWT_AUD_URI_KEY = T.let(T.unsafe(nil), Symbol)

# source://googleauth//lib/googleauth/service_account.rb#145
Google::Auth::ServiceAccountJwtHeaderCredentials::SIGNING_ALGORITHM = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/service_account.rb#144
Google::Auth::ServiceAccountJwtHeaderCredentials::TOKEN_CRED_URI = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/compute_engine.rb#28
Google::Auth::UNEXPECTED_ERROR_SUFFIX = T.let(T.unsafe(nil), String)

# Handles an interactive 3-Legged-OAuth2 (3LO) user consent authorization.
#
# Example usage for a simple command line app:
#
#     credentials = authorizer.get_credentials(user_id)
#     if credentials.nil?
#       url = authorizer.get_authorization_url(
#         base_url: OOB_URI)
#       puts "Open the following URL in the browser and enter the " +
#            "resulting code after authorization"
#       puts url
#       code = gets
#       credentials = authorizer.get_and_store_credentials_from_code(
#         user_id: user_id, code: code, base_url: OOB_URI)
#     end
#     # Credentials ready to use, call APIs
#     ...
#
# source://googleauth//lib/googleauth/user_authorizer.rb#40
class Google::Auth::UserAuthorizer
  # Initialize the authorizer
  #
  # @param client_id [Google::Auth::ClientID] Configured ID & secret for this application
  # @param scope [String, Array<String>] Authorization scope to request
  # @param token_store [Google::Auth::Stores::TokenStore] Backing storage for persisting user credentials
  # @param legacy_callback_uri [String] URL (either absolute or relative) of the auth callback.
  #   Defaults to '/oauth2callback'.
  #   @deprecated This field is deprecated. Instead, use the keyword
  #   argument callback_uri.
  # @param code_verifier [String] Random string of 43-128 chars used to verify the key exchange using
  #   PKCE.
  # @raise [NIL_CLIENT_ID_ERROR]
  # @return [UserAuthorizer] a new instance of UserAuthorizer
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#66
  def initialize(client_id, scope, token_store, legacy_callback_uri = T.unsafe(nil), callback_uri: T.unsafe(nil), code_verifier: T.unsafe(nil)); end

  # The code verifier for PKCE for OAuth 2.0. When set, the
  # authorization URI will contain the Code Challenge and Code
  # Challenge Method querystring parameters, and the token URI will
  # contain the Code Verifier parameter.
  #
  # @param new_code_erifier [String|nil]
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#261
  def code_verifier=(new_code_verifier); end

  # Exchanges an authorization code returned in the oauth callback.
  # Additionally, stores the resulting credentials in the token store if
  # the exchange is successful.
  #
  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  # @param code [String] The authorization code from the OAuth callback
  # @param scope [String, Array<String>] Authorization scope requested. Overrides the instance
  #   scopes if not nil.
  # @param base_url [String] Absolute URL to resolve the configured callback uri against.
  #   Required if the configured
  #   callback uri is a relative.
  # @return [Google::Auth::UserRefreshCredentials] Credentials if exchange is successful
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#213
  def get_and_store_credentials_from_code(options = T.unsafe(nil)); end

  # Build the URL for requesting authorization.
  #
  # @param login_hint [String] Login hint if need to authorize a specific account. Should be a
  #   user's email address or unique profile ID.
  # @param state [String] Opaque state value to be returned to the oauth callback.
  # @param base_url [String] Absolute URL to resolve the configured callback uri against. Required
  #   if the configured callback uri is a relative.
  # @param scope [String, Array<String>] Authorization scope to request. Overrides the instance scopes if not
  #   nil.
  # @param additional_parameters [Hash] Additional query parameters to be added to the authorization URL.
  # @return [String] Authorization url
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#97
  def get_authorization_url(options = T.unsafe(nil)); end

  # Fetch stored credentials for the user.
  #
  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  # @param scope [Array<String>, String] If specified, only returns credentials that have all
  #   the requested scopes
  # @return [Google::Auth::UserRefreshCredentials] Stored credentials, nil if none present
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#136
  def get_credentials(user_id, scope = T.unsafe(nil)); end

  # Exchanges an authorization code returned in the oauth callback
  #
  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  # @param code [String] The authorization code from the OAuth callback
  # @param scope [String, Array<String>] Authorization scope requested. Overrides the instance
  #   scopes if not nil.
  # @param base_url [String] Absolute URL to resolve the configured callback uri against.
  #   Required if the configured
  #   callback uri is a relative.
  # @param additional_parameters [Hash] Additional parameters to be added to the post body of token
  #   endpoint request.
  # @return [Google::Auth::UserRefreshCredentials] Credentials if exchange is successful
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#177
  def get_credentials_from_code(options = T.unsafe(nil)); end

  # Revokes a user's credentials. This both revokes the actual
  # grant as well as removes the token from the token store.
  #
  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#223
  def revoke_authorization(user_id); end

  # Store credentials for a user. Generally not required to be
  # called directly, but may be used to migrate tokens from one
  # store to another.
  #
  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  # @param credentials [Google::Auth::UserRefreshCredentials] Credentials to store.
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#243
  def store_credentials(user_id, credentials); end

  private

  # source://googleauth//lib/googleauth/user_authorizer.rb#322
  def code_challenge_method; end

  # source://googleauth//lib/googleauth/user_authorizer.rb#317
  def generate_code_challenge(code_verifier); end

  # Begin watching a credential for refreshes so the access token can be
  # saved.
  #
  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  # @param credentials [Google::Auth::UserRefreshCredentials] Credentials to store.
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#293
  def monitor_credentials(user_id, credentials); end

  # Resolve the redirect uri against a base.
  #
  # @param base_url [String] Absolute URL to resolve the callback against if necessary.
  # @return [String] Redirect URI
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#306
  def redirect_uri_for(base_url); end

  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  # @private Fetch stored token with given user_id
  # @raise [NIL_USER_ID_ERROR]
  # @return [String] The saved token from @token_store
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#279
  def stored_token(user_id); end

  # Check if URI is Google's postmessage flow (not a valid redirect_uri by spec, but allowed)
  #
  # @return [Boolean]
  #
  # source://googleauth//lib/googleauth/user_authorizer.rb#313
  def uri_is_postmessage?(uri); end

  class << self
    # Generate the code verifier needed to be sent while fetching
    # authorization URL.
    #
    # source://googleauth//lib/googleauth/user_authorizer.rb#267
    def generate_code_verifier; end
  end
end

# source://googleauth//lib/googleauth/user_authorizer.rb#41
Google::Auth::UserAuthorizer::MISMATCHED_CLIENT_ID_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/user_authorizer.rb#47
Google::Auth::UserAuthorizer::MISSING_ABSOLUTE_URL_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/user_authorizer.rb#43
Google::Auth::UserAuthorizer::NIL_CLIENT_ID_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/user_authorizer.rb#44
Google::Auth::UserAuthorizer::NIL_SCOPE_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/user_authorizer.rb#46
Google::Auth::UserAuthorizer::NIL_TOKEN_STORE_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/user_authorizer.rb#45
Google::Auth::UserAuthorizer::NIL_USER_ID_ERROR = T.let(T.unsafe(nil), String)

# Authenticates requests using User Refresh credentials.
#
# This class allows authorizing requests from user refresh tokens.
#
# This the end of the result of a 3LO flow.  E.g, the end result of
# 'gcloud auth login' saves a file with these contents in well known
# location
#
# cf [Application Default Credentials](https://cloud.google.com/docs/authentication/production)
#
# source://googleauth//lib/googleauth/user_refresh.rb#33
class Google::Auth::UserRefreshCredentials < ::Signet::OAuth2::Client
  extend ::Google::Auth::CredentialsLoader

  # @return [UserRefreshCredentials] a new instance of UserRefreshCredentials
  #
  # source://googleauth//lib/googleauth/user_refresh.rb#78
  def initialize(options = T.unsafe(nil)); end

  # Verifies that a credential grants the requested scope
  #
  # @param required_scope [Array<String>, String] Scope to verify
  # @return [Boolean] True if scope is granted
  #
  # source://googleauth//lib/googleauth/user_refresh.rb#112
  def includes_scope?(required_scope); end

  # Returns the value of attribute project_id.
  #
  # source://googleauth//lib/googleauth/user_refresh.rb#38
  def project_id; end

  # Returns the value of attribute quota_project_id.
  #
  # source://googleauth//lib/googleauth/user_refresh.rb#39
  def quota_project_id; end

  # Revokes the credential
  #
  # source://googleauth//lib/googleauth/user_refresh.rb#89
  def revoke!(options = T.unsafe(nil)); end

  class << self
    # Create a UserRefreshCredentials.
    #
    # @param json_key_io [IO] an IO from which the JSON key can be read
    # @param scope [string|array|nil] the scope(s) to access
    #
    # source://googleauth//lib/googleauth/user_refresh.rb#45
    def make_creds(options = T.unsafe(nil)); end

    # Reads the client_id, client_secret and refresh_token fields from the
    # JSON key.
    #
    # source://googleauth//lib/googleauth/user_refresh.rb#69
    def read_json_key(json_key_io); end
  end
end

# source://googleauth//lib/googleauth/user_refresh.rb#35
Google::Auth::UserRefreshCredentials::AUTHORIZATION_URI = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/user_refresh.rb#36
Google::Auth::UserRefreshCredentials::REVOKE_TOKEN_URI = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/user_refresh.rb#34
Google::Auth::UserRefreshCredentials::TOKEN_CRED_URI = T.let(T.unsafe(nil), String)

# Varation on {Google::Auth::UserAuthorizer} adapted for Rack based
# web applications.
#
# Example usage:
#
#     get('/') do
#       user_id = request.session['user_email']
#       credentials = authorizer.get_credentials(user_id, request)
#       if credentials.nil?
#         redirect authorizer.get_authorization_url(user_id: user_id,
#                                                   request: request)
#       end
#       # Credentials are valid, can call APIs
#       ...
#    end
#
#    get('/oauth2callback') do
#      url = Google::Auth::WebUserAuthorizer.handle_auth_callback_deferred(
#        request)
#      redirect url
#    end
#
# Instead of implementing the callback directly, applications are
# encouraged to use {Google::Auth::WebUserAuthorizer::CallbackApp} instead.
#
# @note Requires sessions are enabled
# @see CallbackApp
#
# source://googleauth//lib/googleauth/web_user_authorizer.rb#50
class Google::Auth::WebUserAuthorizer < ::Google::Auth::UserAuthorizer
  # Initialize the authorizer
  #
  # @param client_id [Google::Auth::ClientID] Configured ID & secret for this application
  # @param scope [String, Array<String>] Authorization scope to request
  # @param token_store [Google::Auth::Stores::TokenStore] Backing storage for persisting user credentials
  # @param legacy_callback_uri [String] URL (either absolute or relative) of the auth callback. Defaults
  #   to '/oauth2callback'.
  #   @deprecated This field is deprecated. Instead, use the keyword
  #   argument callback_uri.
  # @param code_verifier [String] Random string of 43-128 chars used to verify the key exchange using
  #   PKCE.
  # @return [WebUserAuthorizer] a new instance of WebUserAuthorizer
  #
  # source://googleauth//lib/googleauth/web_user_authorizer.rb#104
  def initialize(client_id, scope, token_store, legacy_callback_uri = T.unsafe(nil), callback_uri: T.unsafe(nil), code_verifier: T.unsafe(nil)); end

  # Build the URL for requesting authorization.
  #
  # @param login_hint [String] Login hint if need to authorize a specific account. Should be a
  #   user's email address or unique profile ID.
  # @param request [Rack::Request] Current request
  # @param redirect_to [String] Optional URL to proceed to after authorization complete. Defaults to
  #   the current URL.
  # @param scope [String, Array<String>] Authorization scope to request. Overrides the instance scopes if
  #   not nil.
  # @param state [Hash] Optional key-values to be returned to the oauth callback.
  # @raise [NIL_REQUEST_ERROR]
  # @return [String] Authorization url
  #
  # source://googleauth//lib/googleauth/web_user_authorizer.rb#154
  def get_authorization_url(options = T.unsafe(nil)); end

  # Fetch stored credentials for the user from the given request session.
  #
  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  # @param request [Rack::Request] Current request. Optional. If omitted, this will attempt to fall back
  #   on the base class behavior of reading from the token store.
  # @param scope [Array<String>, String] If specified, only returns credentials that have all the \
  #   requested scopes
  # @raise [Signet::AuthorizationError] May raise an error if an authorization code is present in the session
  #   and exchange of the code fails
  # @return [Google::Auth::UserRefreshCredentials] Stored credentials, nil if none present
  #
  # source://googleauth//lib/googleauth/web_user_authorizer.rb#187
  def get_credentials(user_id, request = T.unsafe(nil), scope = T.unsafe(nil)); end

  # Handle the result of the oauth callback. Exchanges the authorization
  # code from the request and persists to storage.
  #
  # @param user_id [String] Unique ID of the user for loading/storing credentials.
  # @param request [Rack::Request] Current request
  # @return [Google::Auth::UserRefreshCredentials, String] credentials & next URL to redirect to
  #
  # source://googleauth//lib/googleauth/web_user_authorizer.rb#123
  def handle_auth_callback(user_id, request); end

  class << self
    # Returns the value of attribute default.
    #
    # source://googleauth//lib/googleauth/web_user_authorizer.rb#68
    def default; end

    # Sets the attribute default
    #
    # @param value the value to set the attribute default to.
    #
    # source://googleauth//lib/googleauth/web_user_authorizer.rb#68
    def default=(_arg0); end

    # source://googleauth//lib/googleauth/web_user_authorizer.rb#205
    def extract_callback_state(request); end

    # Handle the result of the oauth callback. This version defers the
    # exchange of the code by temporarily stashing the results in the user's
    # session. This allows apps to use the generic
    # {Google::Auth::WebUserAuthorizer::CallbackApp} handler for the callback
    # without any additional customization.
    #
    # Apps that wish to handle the callback directly should use
    # {#handle_auth_callback} instead.
    #
    # @param request [Rack::Request] Current request
    #
    # source://googleauth//lib/googleauth/web_user_authorizer.rb#82
    def handle_auth_callback_deferred(request); end

    # Verifies the results of an authorization callback
    #
    # @option state
    # @option state
    # @param state [Hash] Callback state
    # @param request [Rack::Request] Current request
    # @raise [Signet::AuthorizationError]
    #
    # source://googleauth//lib/googleauth/web_user_authorizer.rb#227
    def validate_callback_state(state, request); end
  end
end

# source://googleauth//lib/googleauth/web_user_authorizer.rb#63
Google::Auth::WebUserAuthorizer::AUTHORIZATION_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#52
Google::Auth::WebUserAuthorizer::AUTH_CODE_KEY = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#55
Google::Auth::WebUserAuthorizer::CALLBACK_STATE_KEY = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#56
Google::Auth::WebUserAuthorizer::CURRENT_URI_KEY = T.let(T.unsafe(nil), String)

# Small Rack app which acts as the default callback handler for the app.
#
# To configure in Rails, add to routes.rb:
#
#     match '/oauth2callback',
#           to: Google::Auth::WebUserAuthorizer::CallbackApp,
#           via: :all
#
# With Rackup, add to config.ru:
#
#     map '/oauth2callback' do
#       run Google::Auth::WebUserAuthorizer::CallbackApp
#     end
#
# Or in a classic Sinatra app:
#
#     get('/oauth2callback') do
#       Google::Auth::WebUserAuthorizer::CallbackApp.call(env)
#     end
#
# @see Google::Auth::WebUserAuthorizer
#
# source://googleauth//lib/googleauth/web_user_authorizer.rb#258
class Google::Auth::WebUserAuthorizer::CallbackApp
  # source://googleauth//lib/googleauth/web_user_authorizer.rb#285
  def call(env); end

  class << self
    # Handle a rack request. Simply stores the results the authorization
    # in the session temporarily and redirects back to to the previously
    # saved redirect URL. Credentials can be later retrieved by calling.
    # {Google::Auth::Web::WebUserAuthorizer#get_credentials}
    #
    # See {Google::Auth::Web::WebUserAuthorizer#get_authorization_uri}
    # for how to initiate authorization requests.
    #
    # @param env [Hash] Rack environment
    # @return [Array] HTTP response
    #
    # source://googleauth//lib/googleauth/web_user_authorizer.rb#275
    def call(env); end
  end
end

# source://googleauth//lib/googleauth/web_user_authorizer.rb#261
Google::Auth::WebUserAuthorizer::CallbackApp::ERROR_STATUS = T.let(T.unsafe(nil), Integer)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#259
Google::Auth::WebUserAuthorizer::CallbackApp::LOCATION_HEADER = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#260
Google::Auth::WebUserAuthorizer::CallbackApp::REDIR_STATUS = T.let(T.unsafe(nil), Integer)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#53
Google::Auth::WebUserAuthorizer::ERROR_CODE_KEY = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#64
Google::Auth::WebUserAuthorizer::INVALID_STATE_TOKEN_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#62
Google::Auth::WebUserAuthorizer::MISSING_AUTH_CODE_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#60
Google::Auth::WebUserAuthorizer::NIL_REQUEST_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#61
Google::Auth::WebUserAuthorizer::NIL_SESSION_ERROR = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#58
Google::Auth::WebUserAuthorizer::SCOPE_KEY = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#54
Google::Auth::WebUserAuthorizer::SESSION_ID_KEY = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#51
Google::Auth::WebUserAuthorizer::STATE_PARAM = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/web_user_authorizer.rb#57
Google::Auth::WebUserAuthorizer::XSRF_KEY = T.let(T.unsafe(nil), String)

# source://googleauth//lib/googleauth/signet.rb#20
module Signet
  class << self
    # source://signet/0.19.0/lib/signet.rb#18
    def parse_auth_param_list(auth_param_string); end
  end
end

# OAuth2 supports OAuth2 authentication.
#
# source://googleauth//lib/googleauth/signet.rb#22
module Signet::OAuth2
  class << self
    # source://signet/0.19.0/lib/signet/oauth_2.rb#137
    def generate_authorization_uri(authorization_uri, parameters = T.unsafe(nil)); end

    # source://signet/0.19.0/lib/signet/oauth_2.rb#98
    def generate_basic_authorization_header(client_id, client_password); end

    # source://signet/0.19.0/lib/signet/oauth_2.rb#117
    def generate_bearer_authorization_header(access_token, auth_params = T.unsafe(nil)); end

    # source://signet/0.19.0/lib/signet/oauth_2.rb#26
    def parse_authorization_header(field_value); end

    # source://signet/0.19.0/lib/signet/oauth_2.rb#53
    def parse_basic_credentials(credential_string); end

    # source://signet/0.19.0/lib/signet/oauth_2.rb#59
    def parse_bearer_credentials(credential_string); end

    # source://signet/0.19.0/lib/signet/oauth_2.rb#75
    def parse_credentials(body, content_type); end

    # source://signet/0.19.0/lib/signet/oauth_2.rb#71
    def parse_oauth_challenge(challenge_string); end

    # source://signet/0.19.0/lib/signet/oauth_2.rb#41
    def parse_www_authenticate_header(field_value); end
  end
end

# Signet::OAuth2::Client creates an OAuth2 client
#
# This reopens Client to add #apply and #apply! methods which update a
# hash with the fetched authentication token.
#
# source://googleauth//lib/googleauth/signet.rb#27
class Signet::OAuth2::Client
  include ::Google::Auth::BaseClient

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#97
  def initialize(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#715
  def access_token; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#724
  def access_token=(new_access_token); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#342
  def access_type; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#351
  def access_type=(new_access_type); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#676
  def additional_parameters; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#685
  def additional_parameters=(new_additional_parameters); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#561
  def audience; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#571
  def audience=(new_audience); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#271
  def authorization_uri(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#307
  def authorization_uri=(new_authorization_uri); end

  # source://googleauth//lib/googleauth/signet.rb#86
  def build_default_connection; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#883
  def clear_credentials!; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#359
  def client_id; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#368
  def client_id=(new_client_id); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#376
  def client_secret; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#385
  def client_secret=(new_client_secret); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#462
  def code; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#472
  def code=(new_code); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#330
  def coerce_uri(incoming_uri); end

  # source://googleauth//lib/googleauth/signet.rb#41
  def configure_connection(options); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#753
  def decoded_id_token(public_key = T.unsafe(nil), options = T.unsafe(nil), &keyfinder); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#864
  def expired?; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#817
  def expires_at; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#827
  def expires_at=(new_expires_at); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#770
  def expires_in; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#785
  def expires_in=(new_expires_in); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#877
  def expires_within?(sec); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#608
  def expiry; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#618
  def expiry=(new_expiry); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#653
  def extension_parameters; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#663
  def extension_parameters=(new_extension_parameters); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1022
  def fetch_access_token(options = T.unsafe(nil)); end

  # source://googleauth//lib/googleauth/signet.rb#56
  def fetch_access_token!(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1190
  def fetch_protected_resource(options = T.unsafe(nil)); end

  # source://googleauth//lib/googleauth/signet.rb#69
  def generate_access_token_request(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1114
  def generate_authenticated_request(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#987
  def googleauth_orig_generate_access_token_request(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#902
  def grant_type; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#916
  def grant_type=(new_grant_type); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#835
  def granted_scopes; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#845
  def granted_scopes=(new_granted_scopes); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#732
  def id_token; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#741
  def id_token=(new_id_token); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#799
  def issued_at; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#808
  def issued_at=(new_issued_at); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#542
  def issuer; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#552
  def issuer=(new_issuer); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1075
  def orig_fetch_access_token!(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#523
  def password; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#533
  def password=(new_password); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#580
  def person; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#590
  def person=(new_person); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#580
  def principal; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#590
  def principal=(new_person); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#480
  def redirect_uri; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#489
  def redirect_uri=(new_redirect_uri); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1090
  def refresh!(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#698
  def refresh_token; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#707
  def refresh_token=(new_refresh_token); end

  # source://googleauth//lib/googleauth/signet.rb#96
  def retry_with_error(max_retry_count = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#394
  def scope; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#405
  def scope=(new_scope); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#644
  def signing_algorithm; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#627
  def signing_key; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#637
  def signing_key=(new_key); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#444
  def state; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#453
  def state=(new_state); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#601
  def sub; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#601
  def sub=(_arg0); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#428
  def target_audience; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#436
  def target_audience=(new_target_audience); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#950
  def to_json(*_args); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#926
  def to_jwt(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#315
  def token_credential_uri; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#324
  def token_credential_uri=(new_token_credential_uri); end

  # The token type as symbol, either :id_token or :access_token
  #
  # source://googleauth//lib/googleauth/signet.rb#48
  def token_type; end

  # Set the universe domain
  #
  # source://googleauth//lib/googleauth/signet.rb#53
  def universe_domain; end

  # Set the universe domain
  #
  # source://googleauth//lib/googleauth/signet.rb#53
  def universe_domain=(_arg0); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#185
  def update!(options = T.unsafe(nil)); end

  # source://googleauth//lib/googleauth/signet.rb#32
  def update_token!(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#241
  def update_token_signet_base(options = T.unsafe(nil)); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#504
  def username; end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#514
  def username=(new_username); end

  private

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1233
  def deep_hash_normalize(old_hash); end

  # source://googleauth//lib/googleauth/signet.rb#122
  def expires_at_from_id_token(id_token); end

  # source://googleauth//lib/googleauth/signet.rb#149
  def log_auth_error(err); end

  # source://googleauth//lib/googleauth/signet.rb#133
  def log_response(token_response); end

  # source://googleauth//lib/googleauth/signet.rb#167
  def log_retries_exhausted(err); end

  # source://googleauth//lib/googleauth/signet.rb#158
  def log_transient_error(err); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1239
  def normalize_timestamp(time); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1225
  def recursive_hash_normalize_keys(val); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1256
  def set_relative_expires_at(issued_at, expires_in); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1220
  def uri_is_oob?(uri); end

  # source://signet/0.19.0/lib/signet/oauth_2/client.rb#1213
  def uri_is_postmessage?(uri); end
end
