# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ransack` gem.
# Please instead update this file by running `bin/tapioca gem ransack`.


# source://ransack//lib/ransack/helpers/form_builder.rb#3
module ActionView::Helpers::Tags; end

# TODO: Find a better way to solve this issue!
# This patch is needed since this Rails commit:
# https://github.com/rails/rails/commit/c1a118a
#
# source://ransack//lib/ransack/helpers/form_builder.rb#7
class ActionView::Helpers::Tags::Base
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::ContentExfiltrationPreventionHelper

  private

  # source://ransack//lib/ransack/helpers/form_builder.rb#10
  def value; end
end

# source://ransack//lib/polyamorous/tree_node.rb#1
module Polyamorous; end

# source://ransack//lib/polyamorous/polyamorous.rb#3
Polyamorous::InnerJoin = Arel::Nodes::InnerJoin

# source://ransack//lib/polyamorous/join.rb#2
class Polyamorous::Join
  include ::Polyamorous::TreeNode

  # @return [Join] a new instance of Join
  #
  # source://ransack//lib/polyamorous/join.rb#8
  def initialize(name, type = T.unsafe(nil), klass = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ransack//lib/polyamorous/join.rb#33
  def ==(other); end

  # source://ransack//lib/polyamorous/join.rb#35
  def add_to_tree(hash); end

  # @return [Boolean]
  #
  # source://ransack//lib/polyamorous/join.rb#26
  def eql?(other); end

  # source://ransack//lib/polyamorous/join.rb#22
  def hash; end

  # Returns the value of attribute klass.
  #
  # source://ransack//lib/polyamorous/join.rb#6
  def klass; end

  # source://ransack//lib/polyamorous/join.rb#14
  def klass=(klass); end

  # Returns the value of attribute name.
  #
  # source://ransack//lib/polyamorous/join.rb#5
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://ransack//lib/polyamorous/join.rb#5
  def name=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://ransack//lib/polyamorous/join.rb#6
  def type; end

  # source://ransack//lib/polyamorous/join.rb#18
  def type=(type); end

  private

  # source://ransack//lib/polyamorous/join.rb#41
  def convert_to_arel_join_type(type); end

  # source://ransack//lib/polyamorous/join.rb#58
  def convert_to_class(value); end
end

# source://ransack//lib/polyamorous/polyamorous.rb#7
Polyamorous::JoinAssociation = ActiveRecord::Associations::JoinDependency::JoinAssociation

# source://ransack//lib/polyamorous/activerecord/join_association.rb#2
module Polyamorous::JoinAssociationExtensions
  include ::Polyamorous::SwappingReflectionClass

  # source://ransack//lib/polyamorous/activerecord/join_association.rb#8
  def initialize(reflection, children, polymorphic_class = T.unsafe(nil), join_type = T.unsafe(nil)); end

  # Same as #join_constraints, but instead of constructing tables from the
  # given block, uses the ones passed
  #
  # source://ransack//lib/polyamorous/activerecord/join_association.rb#22
  def join_constraints_with_tables(foreign_table, foreign_klass, join_type, alias_tracker, tables); end

  class << self
    # source://ransack//lib/polyamorous/activerecord/join_association.rb#4
    def prepended(base); end
  end
end

# source://ransack//lib/polyamorous/polyamorous.rb#6
Polyamorous::JoinDependency = ActiveRecord::Associations::JoinDependency

# source://ransack//lib/polyamorous/activerecord/join_dependency.rb#2
module Polyamorous::JoinDependencyExtensions
  # Replaces ActiveRecord::Associations::JoinDependency#build
  #
  # source://ransack//lib/polyamorous/activerecord/join_dependency.rb#4
  def build(associations, base_klass); end

  # source://ransack//lib/polyamorous/activerecord/join_dependency.rb#50
  def construct_tables_for_association!(join_root, association); end

  # source://ransack//lib/polyamorous/activerecord/join_dependency.rb#30
  def join_constraints(joins_to_add, alias_tracker, references); end

  private

  # source://ransack//lib/polyamorous/activerecord/join_dependency.rb#58
  def table_aliases_for(parent, node); end
end

# source://ransack//lib/polyamorous/activerecord/join_dependency.rb#78
module Polyamorous::JoinDependencyExtensions::ClassMethods
  # Prepended before ActiveRecord::Associations::JoinDependency#walk_tree
  #
  # source://ransack//lib/polyamorous/activerecord/join_dependency.rb#81
  def walk_tree(associations, hash); end
end

# source://ransack//lib/polyamorous/polyamorous.rb#4
Polyamorous::OuterJoin = Arel::Nodes::OuterJoin

# source://ransack//lib/polyamorous/activerecord/reflection.rb#2
module Polyamorous::ReflectionExtensions
  # source://ransack//lib/polyamorous/activerecord/reflection.rb#3
  def join_scope(table, foreign_table, foreign_klass); end
end

# source://ransack//lib/polyamorous/swapping_reflection_class.rb#2
module Polyamorous::SwappingReflectionClass
  # @yield [new_reflection]
  #
  # source://ransack//lib/polyamorous/swapping_reflection_class.rb#3
  def swapping_reflection_klass(reflection, klass); end
end

# source://ransack//lib/polyamorous/tree_node.rb#2
module Polyamorous::TreeNode
  # @raise [NotImplementedError]
  #
  # source://ransack//lib/polyamorous/tree_node.rb#3
  def add_to_tree(hash); end
end

# source://ransack//lib/ransack/helpers/form_builder.rb#20
RANSACK_FORM_BUILDER = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#1
module Ransack
  extend ::Ransack::Configuration
end

# source://ransack//lib/ransack/adapters/active_record/base.rb#2
module Ransack::Adapters; end

# source://ransack//lib/ransack/adapters/active_record/base.rb#3
module Ransack::Adapters::ActiveRecord; end

# source://ransack//lib/ransack/adapters/active_record/base.rb#4
module Ransack::Adapters::ActiveRecord::Base
  # Bare list of all potentially searchable associations. Searchable
  # associations need to be explicitly allowlisted through the
  # `ransackable_associations` method in each model, but if you're
  # allowing almost everything to be searched, this list can be used as a
  # base for exclusions.
  #
  # source://ransack//lib/ransack/adapters/active_record/base.rb#93
  def authorizable_ransackable_associations; end

  # Bare list of all potentially searchable attributes. Searchable attributes
  # need to be explicitly allowlisted through the `ransackable_attributes`
  # method in each model, but if you're allowing almost everything to be
  # searched, this list can be used as a base for exclusions.
  #
  # source://ransack//lib/ransack/adapters/active_record/base.rb#78
  def authorizable_ransackable_attributes; end

  # source://ransack//lib/ransack/adapters/active_record/base.rb#15
  def ransack(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ransack//lib/ransack/adapters/active_record/base.rb#19
  def ransack!(params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ransack//lib/ransack/adapters/active_record/base.rb#28
  def ransack_alias(new_name, old_name); end

  # Ransackable_associations, by default, returns the names
  # of all associations as an array of strings.
  # For overriding with a whitelist array of strings.
  #
  # source://ransack//lib/ransack/adapters/active_record/base.rb#45
  def ransackable_associations(auth_object = T.unsafe(nil)); end

  # Ransackable_attributes, by default, returns all column names
  # and any defined ransackers as an array of strings.
  # For overriding with a whitelist array of strings.
  #
  # source://ransack//lib/ransack/adapters/active_record/base.rb#37
  def ransackable_attributes(auth_object = T.unsafe(nil)); end

  # Ransackable_scopes, by default, returns an empty array
  # i.e. no class methods/scopes are authorized.
  # For overriding with a whitelist array of *symbols*.
  #
  # source://ransack//lib/ransack/adapters/active_record/base.rb#61
  def ransackable_scopes(auth_object = T.unsafe(nil)); end

  # ransack_scope_skip_sanitize_args, by default, returns an empty array.
  # i.e. use the sanitize_scope_args setting to determine if args should be converted.
  # For overriding with a list of scopes which should be passed the args as-is.
  #
  # source://ransack//lib/ransack/adapters/active_record/base.rb#69
  def ransackable_scopes_skip_sanitize_args; end

  # source://ransack//lib/ransack/adapters/active_record/base.rb#23
  def ransacker(name, opts = T.unsafe(nil), &block); end

  # Ransortable_attributes, by default, returns the names
  # of all attributes available for sorting as an array of strings.
  # For overriding with a whitelist array of strings.
  #
  # source://ransack//lib/ransack/adapters/active_record/base.rb#53
  def ransortable_attributes(auth_object = T.unsafe(nil)); end

  private

  # source://ransack//lib/ransack/adapters/active_record/base.rb#99
  def deprecated_ransackable_list(method); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/adapters/active_record/base.rb#136
  def explicitly_defined?(method); end

  # source://ransack//lib/ransack/adapters/active_record/base.rb#144
  def warn_deprecated(message); end

  class << self
    # @private
    #
    # source://ransack//lib/ransack/adapters/active_record/base.rb#6
    def extended(base); end
  end
end

# source://ransack//lib/ransack/adapters/active_record/context.rb#7
class Ransack::Adapters::ActiveRecord::Context < ::Ransack::Context
  # source://ransack//lib/ransack/adapters/active_record/context.rb#128
  def alias_tracker; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/adapters/active_record/context.rb#66
  def attribute_method?(str, klass = T.unsafe(nil)); end

  # Build an Arel subquery that selects keys for the top query,
  # drawn from the first join association's foreign_key.
  #
  # Example: for an Article that has_and_belongs_to_many Tags
  #
  #   context = Article.search.context
  #   attribute = Attribute.new(context, "tags_name").tap do |a|
  #     context.bind(a, a.name)
  #   end
  #   context.build_correlated_subquery(attribute.parent).to_sql
  #
  #   # SELECT "articles_tags"."article_id" FROM "articles_tags"
  #   # INNER JOIN "tags" ON "tags"."id" = "articles_tags"."tag_id"
  #   # WHERE "articles_tags"."article_id" = "articles"."id"
  #
  # The WHERE condition on this query makes it invalid by itself,
  # because it is correlated to the primary key on the outer query.
  #
  # source://ransack//lib/ransack/adapters/active_record/context.rb#165
  def build_correlated_subquery(association); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#26
  def evaluate(search, opts = T.unsafe(nil)); end

  # All dependent Arel::Join nodes used in the search query.
  #
  # This could otherwise be done as `@object.arel.join_sources`, except
  # that ActiveRecord's build_joins sets up its own JoinDependency.
  # This extracts what we need to access the joins using our existing
  # JoinDependency to track table aliases.
  #
  # source://ransack//lib/ransack/adapters/active_record/context.rb#112
  def join_sources; end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#93
  def klassify(obj); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#132
  def lock_association(association); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#196
  def primary_key; end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#9
  def relation_for(object); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#136
  def remove_association(association); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#89
  def table_for(parent); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#13
  def type_for(attr); end

  private

  # source://ransack//lib/ransack/adapters/active_record/context.rb#335
  def build_association(name, parent = T.unsafe(nil), klass = T.unsafe(nil)); end

  # Checkout active_record/relation/query_methods.rb +build_joins+ for
  # reference. Lots of duplicated code maybe we can avoid it
  #
  # source://ransack//lib/ransack/adapters/active_record/context.rb#282
  def build_joins(relation); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#323
  def build_or_find_association(name, parent = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#317
  def convert_join_strings_to_ast(table, joins); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#202
  def extract_correlated_key(join_root); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#358
  def extract_joins(association); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#327
  def find_association(name, parent = T.unsafe(nil), klass = T.unsafe(nil)); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#266
  def get_association(str, parent = T.unsafe(nil)); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#239
  def get_parent_and_attribute_name(str, parent = T.unsafe(nil)); end

  # source://ransack//lib/ransack/adapters/active_record/context.rb#272
  def join_dependency(relation); end
end

# source://ransack//lib/ransack/naming.rb#48
module Ransack::ClassMethods
  # source://ransack//lib/ransack/naming.rb#53
  def i18n_scope; end

  # source://ransack//lib/ransack/naming.rb#49
  def model_name; end
end

# source://ransack//lib/ransack/configuration.rb#5
module Ransack::Configuration
  # source://ransack//lib/ransack/configuration.rb#45
  def add_predicate(name, opts = T.unsafe(nil)); end

  # source://ransack//lib/ransack/configuration.rb#200
  def arel_predicate_with_suffix(arel_predicate, suffix); end

  # @yield [_self]
  # @yieldparam _self [Ransack::Configuration] the object that the method was called on
  #
  # source://ransack//lib/ransack/configuration.rb#41
  def configure; end

  # By default, Ransack displays sort order indicator arrows with HTML codes:
  #
  #   up_arrow:   '&#9660;'
  #   down_arrow: '&#9650;'
  #
  # There is also a default arrow which is displayed if a column is not sorted.
  # By default this is nil so nothing will be displayed.
  #
  # Any of the defaults may be globally overridden in an initializer file
  # like `config/initializers/ransack.rb` as follows:
  #
  # Ransack.configure do |config|
  #   # Globally set the up arrow to an icon, and the down and default arrows to unicode.
  #   config.custom_arrows = {
  #     up_arrow:   '<i class="fa fa-long-arrow-up"></i>',
  #     down_arrow: 'U+02193',
  #     default_arrow: 'U+11047'
  #   }
  # end
  #
  # source://ransack//lib/ransack/configuration.rb#137
  def custom_arrows=(opts = T.unsafe(nil)); end

  # By default Ransack ignores empty predicates. Ransack can also fallback to
  # a default predicate by setting it in an initializer file
  # like `config/initializers/ransack.rb` as follows:
  #
  # Ransack.configure do |config|
  #   # Use the 'eq' predicate if an unknown predicate is passed
  #   config.default_predicate = 'eq'
  # end
  #
  # source://ransack//lib/ransack/configuration.rb#113
  def default_predicate=(name); end

  # By default, Ransack displays sort order indicator arrows in sort links.
  # The default may be globally overridden in an initializer file like
  # `config/initializers/ransack.rb` as follows:
  #
  # Ransack.configure do |config|
  #   # Hide sort link order indicators globally across the application
  #   config.hide_sort_order_indicators = true
  # end
  #
  # source://ransack//lib/ransack/configuration.rb#183
  def hide_sort_order_indicators=(boolean); end

  # By default Ransack ignores errors if an unknown predicate, condition or
  # attribute is passed into a search. The default may be overridden in an
  # initializer file like `config/initializers/ransack.rb` as follows:
  #
  # Ransack.configure do |config|
  #   # Raise if an unknown predicate, condition or attribute is passed
  #   config.ignore_unknown_conditions = false
  # end
  #
  # source://ransack//lib/ransack/configuration.rb#100
  def ignore_unknown_conditions=(boolean); end

  # source://ransack//lib/ransack/configuration.rb#7
  def options; end

  # source://ransack//lib/ransack/configuration.rb#7
  def options=(val); end

  # The `NULLS FIRST` and `NULLS LAST` options can be used to determine
  # whether nulls appear before or after non-null values in the sort ordering.
  #
  # User may want to configure it like this:
  #
  # Ransack.configure do |c|
  #   c.postgres_fields_sort_option = :nulls_first # or e.g. :nulls_always_last
  # end
  #
  # See this feature: https://www.postgresql.org/docs/13/queries-order.html
  #
  # source://ransack//lib/ransack/configuration.rb#170
  def postgres_fields_sort_option=(setting); end

  # source://ransack//lib/ransack/configuration.rb#7
  def predicates; end

  # source://ransack//lib/ransack/configuration.rb#7
  def predicates=(val); end

  # Ransack sanitizes many values in your custom scopes into booleans.
  # [1, '1', 't', 'T', 'true', 'TRUE'] all evaluate to true.
  # [0, '0', 'f', 'F', 'false', 'FALSE'] all evaluate to false.
  #
  # This default may be globally overridden in an initializer file like
  # `config/initializers/ransack.rb` as follows:
  #
  # Ransack.configure do |config|
  #   # Accept my custom scope values as what they are.
  #   config.sanitize_custom_scope_booleans = false
  # end
  #
  # source://ransack//lib/ransack/configuration.rb#155
  def sanitize_custom_scope_booleans=(boolean); end

  # The default `search_key` name is `:q`. The default key may be overridden
  # in an initializer file like `config/initializers/ransack.rb` as follows:
  #
  # Ransack.configure do |config|
  #   # Name the search_key `:query` instead of the default `:q`
  #   config.search_key = :query
  # end
  #
  # Sometimes there are situations when the default search parameter name
  # cannot be used, for instance if there were two searches on one page.
  # Another name can be set using the `search_key` option with Ransack
  # `ransack`, `search` and `@search_form_for` methods in controllers & views.
  #
  # In the controller:
  # In the view:
  # <%= f.search_form_for @search, as: :log_search %>
  #
  # source://ransack//lib/ransack/configuration.rb#87
  def search_key=(name); end

  # By default, Ransack displays strips all whitespace when searching for a string.
  # The default may be globally changed in an initializer file like
  # `config/initializers/ransack.rb` as follows:
  #
  # Ransack.configure do |config|
  #   # Enable whitespace stripping for string searches
  #   config.strip_whitespace = true
  # end
  #
  # source://ransack//lib/ransack/configuration.rb#196
  def strip_whitespace=(boolean); end

  class << self
    # source://ransack//lib/ransack/configuration.rb#7
    def options; end

    # source://ransack//lib/ransack/configuration.rb#7
    def options=(val); end

    # source://ransack//lib/ransack/configuration.rb#7
    def predicates; end

    # source://ransack//lib/ransack/configuration.rb#7
    def predicates=(val); end
  end
end

# source://ransack//lib/ransack/configuration.rb#9
class Ransack::Configuration::PredicateCollection
  # @return [PredicateCollection] a new instance of PredicateCollection
  #
  # source://ransack//lib/ransack/configuration.rb#12
  def initialize; end

  # source://ransack//lib/ransack/configuration.rb#17
  def [](*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/configuration.rb#19
  def []=(key, value); end

  # source://ransack//lib/ransack/configuration.rb#17
  def has_key?(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/configuration.rb#17
  def keys(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute sorted_names_with_underscores.
  #
  # source://ransack//lib/ransack/configuration.rb#10
  def sorted_names_with_underscores; end
end

# source://ransack//lib/ransack/constants.rb#2
module Ransack::Constants
  private

  # replace % \ to \% \\
  #
  # source://ransack//lib/ransack/constants.rb#163
  def escape_wildcards(unescaped); end

  class << self
    # replace % \ to \% \\
    #
    # source://ransack//lib/ransack/constants.rb#163
    def escape_wildcards(unescaped); end
  end
end

# source://ransack//lib/ransack/constants.rb#4
Ransack::Constants::AND = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#30
Ransack::Constants::AND_OR = T.let(T.unsafe(nil), Array)

# source://ransack//lib/ransack/constants.rb#33
Ransack::Constants::AREL_PREDICATES = T.let(T.unsafe(nil), Array)

# source://ransack//lib/ransack/constants.rb#22
Ransack::Constants::ASSOCIATION_JOIN = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#10
Ransack::Constants::ATTRIBUTE = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#11
Ransack::Constants::ATTRIBUTES = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#40
Ransack::Constants::A_S_I = T.let(T.unsafe(nil), Array)

# source://ransack//lib/ransack/constants.rb#28
Ransack::Constants::BOOLEAN_VALUES = T.let(T.unsafe(nil), Set)

# source://ransack//lib/ransack/constants.rb#6
Ransack::Constants::CAP_SEARCH = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#12
Ransack::Constants::COMBINATOR = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#46
Ransack::Constants::CONT = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#53
Ransack::Constants::DERIVED_PREDICATES = T.let(T.unsafe(nil), Array)

# source://ransack//lib/ransack/constants.rb#51
Ransack::Constants::DISTINCT = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#19
Ransack::Constants::DOT_ASTERIX = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#42
Ransack::Constants::EQ = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#44
Ransack::Constants::EQ_ANY = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#27
Ransack::Constants::FALSE_VALUES = T.let(T.unsafe(nil), Set)

# source://ransack//lib/ransack/constants.rb#18
Ransack::Constants::I = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#31
Ransack::Constants::IN_NOT_IN = T.let(T.unsafe(nil), Array)

# source://ransack//lib/ransack/constants.rb#24
Ransack::Constants::JOIN_NODE = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#16
Ransack::Constants::LEFT_PARENTHESIS = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#43
Ransack::Constants::NOT_EQ = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#45
Ransack::Constants::NOT_EQ_ALL = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#3
Ransack::Constants::OR = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#17
Ransack::Constants::Q = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#48
Ransack::Constants::RANSACK_SLASH_SEARCHES = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#49
Ransack::Constants::RANSACK_SLASH_SEARCHES_SLASH_SEARCH = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#7
Ransack::Constants::SEARCH = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#8
Ransack::Constants::SEARCHES = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#23
Ransack::Constants::STASHED_JOIN = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#21
Ransack::Constants::STRING_JOIN = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#32
Ransack::Constants::SUFFIXES = T.let(T.unsafe(nil), Array)

# source://ransack//lib/ransack/constants.rb#26
Ransack::Constants::TRUE_VALUES = T.let(T.unsafe(nil), Set)

# source://ransack//lib/ransack/constants.rb#14
Ransack::Constants::TWO_COLONS = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/constants.rb#15
Ransack::Constants::UNDERSCORE = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/context.rb#4
class Ransack::Context
  # << self
  #
  # @return [Context] a new instance of Context
  #
  # source://ransack//lib/ransack/context.rb#37
  def initialize(object, options = T.unsafe(nil)); end

  # Returns the value of attribute arel_visitor.
  #
  # source://ransack//lib/ransack/context.rb#5
  def arel_visitor; end

  # source://ransack//lib/ransack/context.rb#126
  def association_path(str, base = T.unsafe(nil)); end

  # Returns the value of attribute auth_object.
  #
  # source://ransack//lib/ransack/context.rb#6
  def auth_object; end

  # Sets the attribute auth_object
  #
  # @param value the value to set the attribute auth_object to.
  #
  # source://ransack//lib/ransack/context.rb#6
  def auth_object=(_arg0); end

  # Returns the value of attribute base.
  #
  # source://ransack//lib/ransack/context.rb#5
  def base; end

  # source://ransack//lib/ransack/context.rb#92
  def bind(object, str); end

  # source://ransack//lib/ransack/context.rb#50
  def bind_pair_for(key); end

  # source://ransack//lib/ransack/context.rb#76
  def chain_scope(scope, args); end

  # Convert a string representing a chain of associations and an attribute
  # into the attribute itself
  #
  # source://ransack//lib/ransack/context.rb#71
  def contextualize(str); end

  # Returns the value of attribute engine.
  #
  # source://ransack//lib/ransack/context.rb#5
  def engine; end

  # Returns the value of attribute klass.
  #
  # source://ransack//lib/ransack/context.rb#5
  def klass; end

  # source://ransack//lib/ransack/context.rb#59
  def klassify(obj); end

  # Returns the value of attribute object.
  #
  # source://ransack//lib/ransack/context.rb#5
  def object; end

  # source://ransack//lib/ransack/context.rb#157
  def ransackable_alias(str); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/context.rb#166
  def ransackable_association?(str, klass); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/context.rb#161
  def ransackable_attribute?(str, klass); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/context.rb#170
  def ransackable_scope?(str, klass); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/context.rb#174
  def ransackable_scope_skip_sanitize_args?(str, klass); end

  # source://ransack//lib/ransack/context.rb#88
  def scope_arity(scope); end

  # Returns the value of attribute search.
  #
  # source://ransack//lib/ransack/context.rb#5
  def search; end

  # Returns the value of attribute search_key.
  #
  # source://ransack//lib/ransack/context.rb#6
  def search_key; end

  # Sets the attribute search_key
  #
  # @param value the value to set the attribute search_key to.
  #
  # source://ransack//lib/ransack/context.rb#6
  def search_key=(_arg0); end

  # source://ransack//lib/ransack/context.rb#186
  def searchable_associations(str = T.unsafe(nil)); end

  # source://ransack//lib/ransack/context.rb#178
  def searchable_attributes(str = T.unsafe(nil)); end

  # source://ransack//lib/ransack/context.rb#182
  def sortable_attributes(str = T.unsafe(nil)); end

  # source://ransack//lib/ransack/context.rb#97
  def traverse(str, base = T.unsafe(nil)); end

  # source://ransack//lib/ransack/context.rb#149
  def unpolymorphize_association(str); end

  class << self
    # source://ransack//lib/ransack/context.rb#24
    def for(object, options = T.unsafe(nil)); end

    # source://ransack//lib/ransack/context.rb#11
    def for_class(klass, options = T.unsafe(nil)); end

    # source://ransack//lib/ransack/context.rb#17
    def for_object(object, options = T.unsafe(nil)); end
  end
end

# source://ransack//lib/ransack/helpers/form_builder.rb#26
module Ransack::Helpers; end

# source://ransack//lib/ransack/helpers/form_builder.rb#28
class Ransack::Helpers::FormBuilder < ::ActionView::Helpers::FormBuilder
  # source://ransack//lib/ransack/helpers/form_builder.rb#103
  def attribute_fields(*args, &block); end

  # @raise [ArgumentError]
  #
  # source://ransack//lib/ransack/helpers/form_builder.rb#46
  def attribute_select(options = T.unsafe(nil), html_options = T.unsafe(nil), action = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#156
  def combinator_select(options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#95
  def condition_fields(*args, &block); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#99
  def grouping_fields(*args, &block); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#30
  def label(method, *args, &block); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#107
  def predicate_fields(*args, &block); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#130
  def predicate_select(options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#115
  def search_fields(name, args, block); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#70
  def sort_direction_select(options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#83
  def sort_fields(*args, &block); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#87
  def sort_link(attribute, *args); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#78
  def sort_select(options = T.unsafe(nil), html_options = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#91
  def sort_url(attribute, *args); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#40
  def submit(value = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#111
  def value_fields(*args, &block); end

  private

  # source://ransack//lib/ransack/helpers/form_builder.rb#207
  def association_array(obj, prefix = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#224
  def association_hash(obj); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#213
  def association_object(obj); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#266
  def attr_from_base_and_column(base, column); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#250
  def attribute_collection_for_base(attributes, base = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#235
  def attribute_collection_for_bases(action, bases); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/helpers/form_builder.rb#177
  def can_use_default?(default, attribute, values); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#261
  def collection_for_base(action, base); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#193
  def combinator_choices; end

  # source://ransack//lib/ransack/helpers/form_builder.rb#270
  def formbuilder_error_message(action); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#239
  def get_attribute_element(action, base); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#182
  def mapped_values(values); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#186
  def sort_array; end

  # source://ransack//lib/ransack/helpers/form_builder.rb#170
  def template_collection_select(name, collection, options, html_options); end

  # source://ransack//lib/ransack/helpers/form_builder.rb#163
  def template_grouped_collection_select(collection, options, html_options); end
end

# source://ransack//lib/ransack/helpers/form_helper.rb#3
module Ransack::Helpers::FormHelper
  # +search_form_for+
  #
  #   <%= search_form_for(@q) do |f| %>
  #
  # source://ransack//lib/ransack/helpers/form_helper.rb#9
  def search_form_for(record, options = T.unsafe(nil), &proc); end

  # +search_form_with+
  #
  #   <%= search_form_with(model: @q) do |f| %>
  #
  # source://ransack//lib/ransack/helpers/form_helper.rb#21
  def search_form_with(record_or_options = T.unsafe(nil), options = T.unsafe(nil), &proc); end

  # +sort_link+
  #
  #   <%= sort_link(@q, :name, [:name, 'kind ASC'], 'Player Name') %>
  #
  #   You can also use a block:
  #
  #   <%= sort_link(@q, :name, [:name, 'kind ASC']) do %>
  #     <strong>Player Name</strong>
  #   <% end %>
  #
  # source://ransack//lib/ransack/helpers/form_helper.rb#65
  def sort_link(search_object, attribute, *args, &block); end

  # +sort_url+
  # <%= sort_url(@q, :created_at, default_order: :desc) %>
  #
  # source://ransack//lib/ransack/helpers/form_helper.rb#78
  def sort_url(search_object, attribute, *args); end

  # +turbo_search_form_for+
  #
  #   <%= turbo_search_form_for(@q) do |f| %>
  #
  # This is a turbo-enabled version of search_form_for that submits via turbo streams
  # instead of traditional HTML GET requests. Useful for seamless integration with
  # paginated results and other turbo-enabled components.
  #
  # source://ransack//lib/ransack/helpers/form_helper.rb#45
  def turbo_search_form_for(record, options = T.unsafe(nil), &proc); end

  private

  # source://ransack//lib/ransack/helpers/form_helper.rb#117
  def build_html_options(search, options, method); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#108
  def build_turbo_options(options); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#151
  def extract_search_and_routing_proxy(search); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#89
  def extract_search_and_set_url(record, options, method_name); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#125
  def finalize_form_options(options, html_options); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#131
  def finalize_form_with_options(options, html_options); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#146
  def html_option_for(option, search); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#137
  def options_for(record); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#141
  def parse_record(object); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#156
  def url(routing_proxy, options_for_url); end
end

# source://ransack//lib/ransack/helpers/form_helper.rb#164
class Ransack::Helpers::FormHelper::SortLink
  # @return [SortLink] a new instance of SortLink
  #
  # source://ransack//lib/ransack/helpers/form_helper.rb#165
  def initialize(search, attribute, args, params); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#186
  def default_arrow; end

  # source://ransack//lib/ransack/helpers/form_helper.rb#182
  def down_arrow; end

  # source://ransack//lib/ransack/helpers/form_helper.rb#203
  def html_options(args); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#190
  def name; end

  # source://ransack//lib/ransack/helpers/form_helper.rb#178
  def up_arrow; end

  # source://ransack//lib/ransack/helpers/form_helper.rb#197
  def url_options; end

  private

  # source://ransack//lib/ransack/helpers/form_helper.rb#285
  def default_sort_order(attr_name); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#272
  def detect_previous_sort_direction_and_invert_it(attr_name); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#304
  def direction_text(dir); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#280
  def existing_sort_direction(f = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#234
  def extract_label_and_mutate_args!(args); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#239
  def extract_options_and_mutate_args!(args); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#229
  def extract_sort_fields_and_mutate_args!(args); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/helpers/form_helper.rb#300
  def no_sort_direction_specified?(dir = T.unsafe(nil)); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#290
  def order_indicator; end

  # source://ransack//lib/ransack/helpers/form_helper.rb#221
  def parameters_hash(params); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#264
  def parse_sort(field); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#259
  def recursive_sort_params_build(fields); end

  # source://ransack//lib/ransack/helpers/form_helper.rb#244
  def search_and_sort_params; end

  # source://ransack//lib/ransack/helpers/form_helper.rb#248
  def search_params; end

  # source://ransack//lib/ransack/helpers/form_helper.rb#253
  def sort_params; end
end

# source://ransack//lib/ransack/invalid_search_error.rb#2
class Ransack::InvalidSearchError < ::ArgumentError; end

# source://ransack//lib/ransack/naming.rb#29
class Ransack::Name < ::String
  # @return [Name] a new instance of Name
  #
  # source://ransack//lib/ransack/naming.rb#34
  def initialize; end

  # Returns the value of attribute collection.
  #
  # source://ransack//lib/ransack/naming.rb#32
  def cache_key; end

  # Returns the value of attribute collection.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def collection; end

  # Returns the value of attribute element.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def element; end

  # Returns the value of attribute human.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def human; end

  # Returns the value of attribute i18n_key.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def i18n_key; end

  # Returns the value of attribute param_key.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def param_key; end

  # Returns the value of attribute partial_path.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def partial_path; end

  # Returns the value of attribute plural.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def plural; end

  # Returns the value of attribute route_key.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def route_key; end

  # Returns the value of attribute singular.
  #
  # source://ransack//lib/ransack/naming.rb#30
  def singular; end
end

# source://ransack//lib/ransack/naming.rb#2
module Ransack::Naming
  mixes_in_class_methods ::Ransack::ClassMethods

  # source://ransack//lib/ransack/naming.rb#24
  def model_name; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/naming.rb#8
  def persisted?; end

  # source://ransack//lib/ransack/naming.rb#12
  def to_key; end

  # source://ransack//lib/ransack/naming.rb#20
  def to_model; end

  # source://ransack//lib/ransack/naming.rb#16
  def to_param; end

  class << self
    # @private
    #
    # source://ransack//lib/ransack/naming.rb#4
    def included(base); end
  end
end

# source://ransack//lib/ransack/nodes/bindable.rb#2
module Ransack::Nodes; end

# source://ransack//lib/ransack/nodes/attribute.rb#3
class Ransack::Nodes::Attribute < ::Ransack::Nodes::Node
  include ::Ransack::Nodes::Bindable

  # @return [Attribute] a new instance of Attribute
  #
  # source://ransack//lib/ransack/nodes/attribute.rb#11
  def initialize(context, name = T.unsafe(nil), ransacker_args = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/attribute.rb#43
  def ==(other); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/attribute.rb#27
  def associated_collection?; end

  # source://ransack//lib/ransack/nodes/attribute.rb#8
  def blank?(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/nodes/attribute.rb#9
  def engine(*_arg0, **_arg1, &_arg2); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/attribute.rb#39
  def eql?(other); end

  # source://ransack//lib/ransack/nodes/attribute.rb#45
  def hash; end

  # source://ransack//lib/ransack/nodes/attribute.rb#53
  def inspect; end

  # Returns the value of attribute name.
  #
  # source://ransack//lib/ransack/nodes/attribute.rb#6
  def name; end

  # source://ransack//lib/ransack/nodes/attribute.rb#17
  def name=(name); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/attribute.rb#49
  def persisted?; end

  # source://ransack//lib/ransack/nodes/attribute.rb#8
  def present?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute ransacker_args.
  #
  # source://ransack//lib/ransack/nodes/attribute.rb#6
  def ransacker_args; end

  # source://ransack//lib/ransack/nodes/attribute.rb#31
  def type; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/attribute.rb#21
  def valid?; end
end

# source://ransack//lib/ransack/nodes/bindable.rb#3
module Ransack::Nodes::Bindable
  # source://ransack//lib/ransack/nodes/bindable.rb#10
  def arel_attribute; end

  # source://ransack//lib/ransack/nodes/bindable.rb#7
  def attr; end

  # Returns the value of attribute attr_name.
  #
  # source://ransack//lib/ransack/nodes/bindable.rb#5
  def attr_name; end

  # Sets the attribute attr_name
  #
  # @param value the value to set the attribute attr_name to.
  #
  # source://ransack//lib/ransack/nodes/bindable.rb#5
  def attr_name=(_arg0); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/bindable.rb#20
  def bound?; end

  # source://ransack//lib/ransack/nodes/bindable.rb#16
  def klass; end

  # Returns the value of attribute parent.
  #
  # source://ransack//lib/ransack/nodes/bindable.rb#5
  def parent; end

  # Sets the attribute parent
  #
  # @param value the value to set the attribute parent to.
  #
  # source://ransack//lib/ransack/nodes/bindable.rb#5
  def parent=(_arg0); end

  # source://ransack//lib/ransack/nodes/bindable.rb#12
  def ransacker; end

  # source://ransack//lib/ransack/nodes/bindable.rb#24
  def reset_binding!; end

  private

  # source://ransack//lib/ransack/nodes/bindable.rb#30
  def get_arel_attribute; end

  # source://ransack//lib/ransack/nodes/bindable.rb#38
  def get_attribute; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/bindable.rb#46
  def is_alias_attribute?; end
end

# source://ransack//lib/ransack/nodes/condition.rb#5
class Ransack::Nodes::Condition < ::Ransack::Nodes::Node
  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#200
  def ==(other); end

  # source://ransack//lib/ransack/nodes/condition.rb#79
  def a; end

  # source://ransack//lib/ransack/nodes/condition.rb#96
  def a=(args); end

  # source://ransack//lib/ransack/nodes/condition.rb#220
  def arel_predicate; end

  # source://ransack//lib/ransack/nodes/condition.rb#250
  def arel_predicate_for_attribute(attr); end

  # source://ransack//lib/ransack/nodes/condition.rb#262
  def attr_value_for_attribute(attr); end

  # source://ransack//lib/ransack/nodes/condition.rb#76
  def attributes; end

  # source://ransack//lib/ransack/nodes/condition.rb#81
  def attributes=(args); end

  # source://ransack//lib/ransack/nodes/condition.rb#174
  def build(params); end

  # == build_attribute
  #
  #  This method was originally called from Nodes::Grouping#new_condition
  #  only, without arguments, without #valid? checking, to build a new
  #  grouping condition.
  #
  #  After refactoring in 235eae3, it is now called from 2 places:
  #
  #  1. Nodes::Condition#attributes=, with +name+ argument passed or +name+
  #     and +ransacker_args+. Attributes are included only if #valid?.
  #
  #  2. Nodes::Grouping#new_condition without arguments. In this case, the
  #     #valid? conditional needs to be bypassed, otherwise nothing is
  #     built. The `name.nil?` conditional below currently does this.
  #
  #  TODO: Add test coverage for this behavior and ensure that `name.nil?`
  #  isn't fixing issue #701 by introducing untested regressions.
  #
  # source://ransack//lib/ransack/nodes/condition.rb#150
  def build_attribute(name = T.unsafe(nil), ransacker_args = T.unsafe(nil)); end

  # source://ransack//lib/ransack/nodes/condition.rb#160
  def build_value(val = T.unsafe(nil)); end

  # source://ransack//lib/ransack/nodes/condition.rb#228
  def casted_values_for_attribute(attr); end

  # source://ransack//lib/ransack/nodes/condition.rb#122
  def combinator; end

  # source://ransack//lib/ransack/nodes/condition.rb#126
  def combinator=(val); end

  # source://ransack//lib/ransack/nodes/condition.rb#270
  def default_type; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#193
  def eql?(other); end

  # source://ransack//lib/ransack/nodes/condition.rb#232
  def formatted_values_for_attribute(attr); end

  # source://ransack//lib/ransack/nodes/condition.rb#202
  def hash; end

  # source://ransack//lib/ransack/nodes/condition.rb#274
  def inspect; end

  # source://ransack//lib/ransack/nodes/condition.rb#188
  def key; end

  # source://ransack//lib/ransack/nodes/condition.rb#130
  def m; end

  # source://ransack//lib/ransack/nodes/condition.rb#129
  def m=(val); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#287
  def negative?; end

  # source://ransack//lib/ransack/nodes/condition.rb#333
  def not_nested_condition(attribute, parent_table); end

  # source://ransack//lib/ransack/nodes/condition.rb#218
  def p; end

  # source://ransack//lib/ransack/nodes/condition.rb#213
  def p=(name); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#184
  def persisted?; end

  # Returns the value of attribute predicate.
  #
  # source://ransack//lib/ransack/nodes/condition.rb#10
  def predicate; end

  # Sets the attribute predicate
  #
  # @param value the value to set the attribute predicate to.
  #
  # source://ransack//lib/ransack/nodes/condition.rb#10
  def predicate=(_arg0); end

  # source://ransack//lib/ransack/nodes/condition.rb#215
  def predicate_name; end

  # source://ransack//lib/ransack/nodes/condition.rb#206
  def predicate_name=(name); end

  # source://ransack//lib/ransack/nodes/condition.rb#101
  def v; end

  # source://ransack//lib/ransack/nodes/condition.rb#120
  def v=(args); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#67
  def valid?; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#72
  def valid_arity?; end

  # source://ransack//lib/ransack/nodes/condition.rb#224
  def validated_values; end

  # source://ransack//lib/ransack/nodes/condition.rb#166
  def value; end

  # source://ransack//lib/ransack/nodes/condition.rb#98
  def values; end

  # source://ransack//lib/ransack/nodes/condition.rb#103
  def values=(args); end

  private

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#373
  def casted_array?(predicate); end

  # source://ransack//lib/ransack/nodes/condition.rb#339
  def combinator_method; end

  # source://ransack//lib/ransack/nodes/condition.rb#343
  def format_predicate(attribute); end

  # source://ransack//lib/ransack/nodes/condition.rb#377
  def format_values_for(predicate); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#364
  def in_predicate?(predicate); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#369
  def like_predicate?(arel_predicate); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#383
  def replace_right_node?(predicate); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/condition.rb#394
  def valid_combinator?; end

  class << self
    # source://ransack//lib/ransack/nodes/condition.rb#13
    def extract(context, key, values); end

    private

    # source://ransack//lib/ransack/nodes/condition.rb#6
    def __class_attr_i18n_words; end

    # source://ransack//lib/ransack/nodes/condition.rb#6
    def __class_attr_i18n_words=(new_value); end

    # source://ransack//lib/ransack/nodes/condition.rb#37
    def extract_values_for_condition(key, context = T.unsafe(nil)); end
  end
end

# source://ransack//lib/ransack/nodes/grouping.rb#3
class Ransack::Nodes::Grouping < ::Ransack::Nodes::Node
  # @return [Grouping] a new instance of Grouping
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#14
  def initialize(context, combinator = T.unsafe(nil)); end

  # source://ransack//lib/ransack/nodes/grouping.rb#51
  def [](key); end

  # source://ransack//lib/ransack/nodes/grouping.rb#55
  def []=(key, value); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#124
  def attribute_method?(name); end

  # source://ransack//lib/ransack/nodes/grouping.rb#149
  def build(params); end

  # source://ransack//lib/ransack/nodes/grouping.rb#71
  def build_condition(opts = T.unsafe(nil)); end

  # source://ransack//lib/ransack/nodes/grouping.rb#138
  def build_grouping(params = T.unsafe(nil)); end

  # Returns the value of attribute conditions.
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#32
  def c; end

  # source://ransack//lib/ransack/nodes/grouping.rb#49
  def c=(conditions); end

  # Returns the value of attribute combinator.
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#5
  def combinator; end

  # Sets the attribute combinator
  #
  # @param value the value to set the attribute combinator to.
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#5
  def combinator=(_arg0); end

  # Returns the value of attribute conditions.
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#4
  def conditions; end

  # source://ransack//lib/ransack/nodes/grouping.rb#34
  def conditions=(conditions); end

  # source://ransack//lib/ransack/nodes/grouping.rb#12
  def each(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/nodes/grouping.rb#89
  def g; end

  # source://ransack//lib/ransack/nodes/grouping.rb#108
  def g=(groupings); end

  # source://ransack//lib/ransack/nodes/grouping.rb#86
  def groupings; end

  # source://ransack//lib/ransack/nodes/grouping.rb#91
  def groupings=(groupings); end

  # source://ransack//lib/ransack/nodes/grouping.rb#161
  def inspect; end

  # Returns the value of attribute combinator.
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#6
  def m; end

  # Sets the attribute combinator
  #
  # @param value the value to set the attribute combinator to.
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#7
  def m=(_arg0); end

  # source://ransack//lib/ransack/nodes/grouping.rb#110
  def method_missing(method_id, *args); end

  # source://ransack//lib/ransack/nodes/grouping.rb#77
  def new_condition(opts = T.unsafe(nil)); end

  # source://ransack//lib/ransack/nodes/grouping.rb#145
  def new_grouping(params = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#19
  def persisted?; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/grouping.rb#64
  def respond_to?(method_id); end

  # source://ransack//lib/ransack/nodes/grouping.rb#23
  def translate(key, options = T.unsafe(nil)); end

  # source://ransack//lib/ransack/nodes/grouping.rb#60
  def values; end

  private

  # source://ransack//lib/ransack/nodes/grouping.rb#180
  def read_attribute(name); end

  # source://ransack//lib/ransack/nodes/grouping.rb#194
  def remove_duplicate_conditions!; end

  # source://ransack//lib/ransack/nodes/grouping.rb#188
  def strip_predicate_and_index(str); end

  # source://ransack//lib/ransack/nodes/grouping.rb#173
  def write_attribute(name, val); end

  class << self
    private

    # source://ransack//lib/ransack/nodes/grouping.rb#9
    def __class_attr_i18n_words; end

    # source://ransack//lib/ransack/nodes/grouping.rb#9
    def __class_attr_i18n_words=(new_value); end
  end
end

# source://ransack//lib/ransack/nodes/node.rb#3
class Ransack::Nodes::Node
  # @return [Node] a new instance of Node
  #
  # source://ransack//lib/ransack/nodes/node.rb#21
  def initialize(context); end

  # Returns the value of attribute context.
  #
  # source://ransack//lib/ransack/nodes/node.rb#4
  def context; end

  # source://ransack//lib/ransack/nodes/node.rb#5
  def contextualize(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/nodes/node.rb#7
  def i18n_aliases; end

  # source://ransack//lib/ransack/nodes/node.rb#7
  def i18n_aliases=(_arg0); end

  # source://ransack//lib/ransack/nodes/node.rb#7
  def i18n_aliases?; end

  # source://ransack//lib/ransack/nodes/node.rb#6
  def i18n_words; end

  # source://ransack//lib/ransack/nodes/node.rb#6
  def i18n_words=(_arg0); end

  # source://ransack//lib/ransack/nodes/node.rb#6
  def i18n_words?; end

  # source://ransack//lib/ransack/nodes/node.rb#25
  def translate(key, options = T.unsafe(nil)); end

  class << self
    # source://ransack//lib/ransack/nodes/node.rb#16
    def i18n_alias(opts = T.unsafe(nil)); end

    # source://ransack//lib/ransack/nodes/node.rb#7
    def i18n_aliases; end

    # source://ransack//lib/ransack/nodes/node.rb#7
    def i18n_aliases=(value); end

    # source://ransack//lib/ransack/nodes/node.rb#7
    def i18n_aliases?; end

    # source://ransack//lib/ransack/nodes/node.rb#12
    def i18n_word(*args); end

    # source://ransack//lib/ransack/nodes/node.rb#6
    def i18n_words; end

    # source://ransack//lib/ransack/nodes/node.rb#6
    def i18n_words=(value); end

    # source://ransack//lib/ransack/nodes/node.rb#6
    def i18n_words?; end

    private

    # source://ransack//lib/ransack/nodes/node.rb#7
    def __class_attr_i18n_aliases; end

    # source://ransack//lib/ransack/nodes/node.rb#7
    def __class_attr_i18n_aliases=(new_value); end

    # source://ransack//lib/ransack/nodes/node.rb#6
    def __class_attr_i18n_words; end

    # source://ransack//lib/ransack/nodes/node.rb#6
    def __class_attr_i18n_words=(new_value); end
  end
end

# source://ransack//lib/ransack/nodes/sort.rb#3
class Ransack::Nodes::Sort < ::Ransack::Nodes::Node
  include ::Ransack::Nodes::Bindable

  # source://ransack//lib/ransack/nodes/sort.rb#17
  def build(params); end

  # Returns the value of attribute dir.
  #
  # source://ransack//lib/ransack/nodes/sort.rb#6
  def dir; end

  # source://ransack//lib/ransack/nodes/sort.rb#38
  def dir=(dir); end

  # Returns the value of attribute name.
  #
  # source://ransack//lib/ransack/nodes/sort.rb#6
  def name; end

  # source://ransack//lib/ransack/nodes/sort.rb#33
  def name=(name); end

  # Returns the value of attribute ransacker_args.
  #
  # source://ransack//lib/ransack/nodes/sort.rb#6
  def ransacker_args; end

  # source://ransack//lib/ransack/nodes/sort.rb#48
  def ransacker_args=(ransack_args); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/sort.rb#27
  def valid?; end

  class << self
    # source://ransack//lib/ransack/nodes/sort.rb#10
    def extract(context, str); end

    private

    # source://ransack//lib/ransack/nodes/sort.rb#7
    def __class_attr_i18n_words; end

    # source://ransack//lib/ransack/nodes/sort.rb#7
    def __class_attr_i18n_words=(new_value); end
  end
end

# source://ransack//lib/ransack/nodes/value.rb#3
class Ransack::Nodes::Value < ::Ransack::Nodes::Node
  # @return [Value] a new instance of Value
  #
  # source://ransack//lib/ransack/nodes/value.rb#7
  def initialize(context, value = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/value.rb#19
  def ==(other); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/value.rb#110
  def array_of_arrays?(val); end

  # source://ransack//lib/ransack/nodes/value.rb#5
  def blank?(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/nodes/value.rb#25
  def cast(type); end

  # source://ransack//lib/ransack/nodes/value.rb#68
  def cast_to_boolean(val); end

  # source://ransack//lib/ransack/nodes/value.rb#46
  def cast_to_date(val); end

  # source://ransack//lib/ransack/nodes/value.rb#90
  def cast_to_decimal(val); end

  # source://ransack//lib/ransack/nodes/value.rb#86
  def cast_to_float(val); end

  # source://ransack//lib/ransack/nodes/value.rb#82
  def cast_to_integer(val); end

  # source://ransack//lib/ransack/nodes/value.rb#102
  def cast_to_money(val); end

  # source://ransack//lib/ransack/nodes/value.rb#78
  def cast_to_string(val); end

  # source://ransack//lib/ransack/nodes/value.rb#57
  def cast_to_time(val); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/value.rb#16
  def eql?(other); end

  # source://ransack//lib/ransack/nodes/value.rb#21
  def hash; end

  # source://ransack//lib/ransack/nodes/value.rb#106
  def inspect; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/nodes/value.rb#12
  def persisted?; end

  # source://ransack//lib/ransack/nodes/value.rb#5
  def present?(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute value.
  #
  # source://ransack//lib/ransack/nodes/value.rb#4
  def value; end

  # Sets the attribute value
  #
  # @param value the value to set the attribute value to.
  #
  # source://ransack//lib/ransack/nodes/value.rb#4
  def value=(_arg0); end
end

# source://ransack//lib/ransack/predicate.rb#2
class Ransack::Predicate
  # @return [Predicate] a new instance of Predicate
  #
  # source://ransack//lib/ransack/predicate.rb#35
  def initialize(opts = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/predicate.rb#52
  def ==(other); end

  # Returns the value of attribute arel_predicate.
  #
  # source://ransack//lib/ransack/predicate.rb#3
  def arel_predicate; end

  # Returns the value of attribute case_insensitive.
  #
  # source://ransack//lib/ransack/predicate.rb#3
  def case_insensitive; end

  # Returns the value of attribute compound.
  #
  # source://ransack//lib/ransack/predicate.rb#3
  def compound; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/predicate.rb#48
  def eql?(other); end

  # source://ransack//lib/ransack/predicate.rb#58
  def format(val); end

  # Returns the value of attribute formatter.
  #
  # source://ransack//lib/ransack/predicate.rb#3
  def formatter; end

  # source://ransack//lib/ransack/predicate.rb#54
  def hash; end

  # Returns the value of attribute name.
  #
  # source://ransack//lib/ransack/predicate.rb#3
  def name; end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/predicate.rb#70
  def negative?; end

  # Returns the value of attribute type.
  #
  # source://ransack//lib/ransack/predicate.rb#3
  def type; end

  # source://ransack//lib/ransack/predicate.rb#66
  def validate(vals, type = T.unsafe(nil)); end

  # Returns the value of attribute validator.
  #
  # source://ransack//lib/ransack/predicate.rb#3
  def validator; end

  # Returns the value of attribute wants_array.
  #
  # source://ransack//lib/ransack/predicate.rb#3
  def wants_array; end

  class << self
    # source://ransack//lib/ransack/predicate.rb#16
    def detect_and_strip_from_string!(str); end

    # source://ransack//lib/ransack/predicate.rb#20
    def detect_from_string(str, chomp: T.unsafe(nil)); end

    # source://ransack//lib/ransack/predicate.rb#12
    def named(name); end

    # source://ransack//lib/ransack/predicate.rb#8
    def names; end
  end
end

# source://ransack//lib/ransack/ransacker.rb#2
class Ransack::Ransacker
  # @return [Ransacker] a new instance of Ransacker
  #
  # source://ransack//lib/ransack/ransacker.rb#8
  def initialize(klass, name, opts = T.unsafe(nil), &block); end

  # Returns the value of attribute args.
  #
  # source://ransack//lib/ransack/ransacker.rb#4
  def args; end

  # source://ransack//lib/ransack/ransacker.rb#19
  def attr_from(bindable); end

  # source://ransack//lib/ransack/ransacker.rb#6
  def call(*_arg0, **_arg1, &_arg2); end

  # Returns the value of attribute formatter.
  #
  # source://ransack//lib/ransack/ransacker.rb#4
  def formatter; end

  # Returns the value of attribute name.
  #
  # source://ransack//lib/ransack/ransacker.rb#4
  def name; end

  # Returns the value of attribute type.
  #
  # source://ransack//lib/ransack/ransacker.rb#4
  def type; end
end

# source://ransack//lib/ransack/active_record.rb#6
Ransack::SUPPORTS_ATTRIBUTE_ALIAS = T.let(T.unsafe(nil), TrueClass)

# source://ransack//lib/ransack/search.rb#13
class Ransack::Search
  include ::Ransack::Naming
  extend ::Ransack::ClassMethods

  # @return [Search] a new instance of Search
  #
  # source://ransack//lib/ransack/search.rb#23
  def initialize(object, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # Returns the value of attribute base.
  #
  # source://ransack//lib/ransack/search.rb#16
  def base; end

  # source://ransack//lib/ransack/search.rb#48
  def build(params); end

  # source://ransack//lib/ransack/search.rb#19
  def build_condition(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/search.rb#19
  def build_grouping(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/search.rb#93
  def build_sort(opts = T.unsafe(nil)); end

  # Returns the value of attribute context.
  #
  # source://ransack//lib/ransack/search.rb#16
  def context; end

  # source://ransack//lib/ransack/search.rb#119
  def inspect; end

  # source://ransack//lib/ransack/search.rb#18
  def klass(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/search.rb#103
  def method_missing(method_id, *args); end

  # source://ransack//lib/ransack/search.rb#19
  def new_condition(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/search.rb#19
  def new_grouping(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/search.rb#99
  def new_sort(opts = T.unsafe(nil)); end

  # source://ransack//lib/ransack/search.rb#18
  def object(*_arg0, **_arg1, &_arg2); end

  # source://ransack//lib/ransack/search.rb#44
  def result(opts = T.unsafe(nil)); end

  # source://ransack//lib/ransack/search.rb#91
  def s; end

  # source://ransack//lib/ransack/search.rb#86
  def s=(args); end

  # source://ransack//lib/ransack/search.rb#88
  def sorts; end

  # source://ransack//lib/ransack/search.rb#63
  def sorts=(args); end

  # source://ransack//lib/ransack/search.rb#19
  def translate(*_arg0, **_arg1, &_arg2); end

  private

  # source://ransack//lib/ransack/search.rb#134
  def add_scope(key, args); end

  # source://ransack//lib/ransack/search.rb#163
  def collapse_multiparameter_attributes!(attrs); end

  # source://ransack//lib/ransack/search.rb#149
  def sanitized_scope_args(args); end
end

# source://ransack//lib/ransack/translate.rb#8
module Ransack::Translate
  class << self
    # source://ransack//lib/ransack/translate.rb#56
    def association(key, options = T.unsafe(nil)); end

    # source://ransack//lib/ransack/translate.rb#18
    def attribute(key, options = T.unsafe(nil)); end

    # source://ransack//lib/ransack/translate.rb#14
    def predicate(key, options = T.unsafe(nil)); end

    # source://ransack//lib/ransack/translate.rb#10
    def word(key, options = T.unsafe(nil)); end

    private

    # source://ransack//lib/ransack/translate.rb#131
    def associated_attribute(associated_class); end

    # source://ransack//lib/ransack/translate.rb#119
    def association_name; end

    # source://ransack//lib/ransack/translate.rb#108
    def attr_fallback_name(associated_class); end

    # source://ransack//lib/ransack/translate.rb#75
    def attribute_name(context, name, include_associations = T.unsafe(nil)); end

    # source://ransack//lib/ransack/translate.rb#101
    def build_interpolations(associated_class); end

    # source://ransack//lib/ransack/translate.rb#89
    def default_attribute_name; end

    # source://ransack//lib/ransack/translate.rb#123
    def default_interpolation(associated_class); end

    # source://ransack//lib/ransack/translate.rb#93
    def fallback_args; end

    # source://ransack//lib/ransack/translate.rb#115
    def fallback_class(associated_class); end

    # source://ransack//lib/ransack/translate.rb#151
    def i18n_key(klass); end

    # source://ransack//lib/ransack/translate.rb#145
    def translated_ancestor_attributes; end

    # source://ransack//lib/ransack/translate.rb#139
    def translated_attribute(associated_class); end
  end
end

# source://ransack//lib/ransack.rb#11
class Ransack::UntraversableAssociationError < ::StandardError; end

# source://ransack//lib/ransack/version.rb#2
Ransack::VERSION = T.let(T.unsafe(nil), String)

# source://ransack//lib/ransack/visitor.rb#2
class Ransack::Visitor
  # source://ransack//lib/ransack/visitor.rb#4
  def accept(object); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/visitor.rb#8
  def can_accept?(object); end

  # @return [Boolean]
  #
  # source://ransack//lib/ransack/visitor.rb#44
  def quoted?(object); end

  # source://ransack//lib/ransack/visitor.rb#53
  def visit(object); end

  # source://ransack//lib/ransack/visitor.rb#12
  def visit_Array(object); end

  # source://ransack//lib/ransack/visitor.rb#16
  def visit_Ransack_Nodes_Condition(object); end

  # source://ransack//lib/ransack/visitor.rb#20
  def visit_Ransack_Nodes_Grouping(object); end

  # source://ransack//lib/ransack/visitor.rb#57
  def visit_Ransack_Nodes_Sort(object); end

  # source://ransack//lib/ransack/visitor.rb#28
  def visit_and(object); end

  # source://ransack//lib/ransack/visitor.rb#39
  def visit_or(object); end

  private

  # source://ransack//lib/ransack/visitor.rb#78
  def ordered(object); end
end

# source://ransack//lib/ransack/visitor.rb#70
Ransack::Visitor::DISPATCH = T.let(T.unsafe(nil), Hash)
