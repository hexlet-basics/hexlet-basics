# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `pagy` gem.
# Please instead update this file by running `bin/tapioca gem pagy`.


# Top superclass: it should define only what's common to all the subclasses
#
# source://pagy//lib/pagy/shared_methods.rb#3
class Pagy
  include ::Pagy::SharedMethods

  # Merge and validate the options, do some simple arithmetic and set the instance variables
  #
  # @return [Pagy] a new instance of Pagy
  #
  # source://pagy//lib/pagy.rb#31
  def initialize(**vars); end

  # Setup @last (overridden by the gearbox extra)
  #
  # source://pagy//lib/pagy.rb#45
  def assign_last; end

  # Assign @offset (overridden by the gearbox extra)
  #
  # source://pagy//lib/pagy.rb#51
  def assign_offset; end

  # Assign @prev and @next
  #
  # source://pagy//lib/pagy.rb#56
  def assign_prev_and_next; end

  # Checks the @page <= @last
  #
  # @raise [OverflowError]
  #
  # source://pagy//lib/pagy.rb#62
  def check_overflow; end

  # Returns the value of attribute count.
  #
  # source://pagy//lib/pagy.rb#27
  def count; end

  # Returns the value of attribute from.
  #
  # source://pagy//lib/pagy.rb#27
  def from; end

  # Returns the value of attribute in.
  #
  # source://pagy//lib/pagy.rb#27
  def in; end

  # Label for the current page. Allow the customization of the output (overridden by the calendar extra)
  #
  # source://pagy//lib/pagy.rb#67
  def label; end

  # Label for any page. Allow the customization of the output (overridden by the calendar extra)
  #
  # source://pagy//lib/pagy.rb#70
  def label_for(page); end

  # Returns the value of attribute last.
  #
  # source://pagy//lib/pagy.rb#27
  def last; end

  # Returns the value of attribute next.
  #
  # source://pagy//lib/pagy.rb#27
  def next; end

  # Returns the value of attribute offset.
  #
  # source://pagy//lib/pagy.rb#27
  def offset; end

  # Returns the value of attribute last.
  #
  # source://pagy//lib/pagy.rb#27
  def pages; end

  # Returns the value of attribute prev.
  #
  # source://pagy//lib/pagy.rb#27
  def prev; end

  # Return the array of page numbers and :gap e.g. [1, :gap, 8, "9", 10, :gap, 36]
  #
  # @raise [VariableError]
  #
  # source://pagy//lib/pagy.rb#73
  def series(size: T.unsafe(nil), **_); end

  # Returns the value of attribute to.
  #
  # source://pagy//lib/pagy.rb#27
  def to; end

  class << self
    # Gem root pathname to get the path of Pagy files stylesheets, javascripts, apps, locales, etc.
    #
    # source://pagy//lib/pagy.rb#21
    def root; end
  end
end

# Define a dummy params method if it's not already defined in the including module
#
# source://pagy//lib/pagy/backend.rb#8
module Pagy::Backend
  private

  # Return Pagy object and paginated results
  #
  # source://pagy//lib/pagy/backend.rb#12
  def pagy(collection, **vars); end

  # Get the count from the collection
  #
  # source://pagy//lib/pagy/backend.rb#21
  def pagy_get_count(collection, vars); end

  # Sub-method called only by #pagy: here for easy customization of fetching by overriding
  # You may need to override this method for collections without offset|limit
  #
  # source://pagy//lib/pagy/backend.rb#28
  def pagy_get_items(collection, pagy); end

  # Override for limit extra
  #
  # source://pagy//lib/pagy/backend.rb#33
  def pagy_get_limit(_vars); end

  # Get the page integer from the params
  # Overridable by the jsonapi extra
  #
  # source://pagy//lib/pagy/backend.rb#39
  def pagy_get_page(vars, force_integer: T.unsafe(nil)); end
end

# Core default: constant for easy access, but mutable for customizable defaults
#
# source://pagy//lib/pagy.rb#12
Pagy::DEFAULT = T.let(T.unsafe(nil), Hash)

# Frontend modules are specially optimized for performance.
# The resulting code may not look very elegant, but produces the best benchmarks
#
# source://pagy//lib/pagy/frontend.rb#14
module Pagy::Frontend
  include ::Pagy::UrlHelpers

  # Return a performance optimized lambda to generate the HTML anchor element (a tag)
  # Benchmarked on a 20 link nav: it is ~22x faster and uses ~18x less memory than rails' link_to
  #
  # source://pagy//lib/pagy/frontend.rb#19
  def pagy_anchor(pagy, anchor_string: T.unsafe(nil), **vars); end

  # Return examples: "Displaying items 41-60 of 324 in total" or "Displaying Products 41-60 of 324 in total"
  #
  # source://pagy//lib/pagy/frontend.rb#31
  def pagy_info(pagy, id: T.unsafe(nil), item_name: T.unsafe(nil)); end

  # Generic pagination: it returns the html with the series of links to the pages
  #
  # source://pagy//lib/pagy/frontend.rb#49
  def pagy_nav(pagy, id: T.unsafe(nil), aria_label: T.unsafe(nil), **vars); end

  # Similar to I18n.t: just ~18x faster using ~10x less memory
  # (@pagy_locale explicitly initialized in order to avoid warning)
  #
  # source://pagy//lib/pagy/frontend.rb#72
  def pagy_t(key, **opts); end

  private

  # source://pagy//lib/pagy/frontend.rb#78
  def nav_aria_label(pagy, aria_label: T.unsafe(nil)); end

  # source://pagy//lib/pagy/frontend.rb#91
  def next_a(pagy, a, text: T.unsafe(nil), aria_label: T.unsafe(nil)); end

  # source://pagy//lib/pagy/frontend.rb#83
  def prev_a(pagy, a, text: T.unsafe(nil), aria_label: T.unsafe(nil)); end
end

# Pagy i18n implementation, compatible with the I18n gem, just a lot faster and lighter
#
# source://pagy//lib/pagy/i18n.rb#8
module Pagy::I18n
  extend ::Pagy::I18n

  # Public method to configure the locales: overrides the default, build the DATA and freezes it
  #
  # source://pagy//lib/pagy/i18n.rb#151
  def load(*locales); end

  # Translate and pluralize the key with the locale DATA
  #
  # source://pagy//lib/pagy/i18n.rb#158
  def t(locale, key, **opts); end

  # Translate and pluralize the key with the locale DATA
  #
  # source://pagy//lib/pagy/i18n.rb#158
  def translate(locale, key, **opts); end

  private

  # Build the DATA hash out of the passed locales
  #
  # source://pagy//lib/pagy/i18n.rb#134
  def build(*locales); end

  # Create a flat hash with dotted notation keys
  #
  # source://pagy//lib/pagy/i18n.rb#127
  def flatten(initial, prefix = T.unsafe(nil)); end
end

# Stores the i18n DATA structure for each loaded locale
# default on the first locale DATA
#
# source://pagy//lib/pagy/i18n.rb#122
Pagy::I18n::DATA = T.let(T.unsafe(nil), Hash)

# Pluralization rules
#
# source://pagy//lib/pagy/i18n.rb#12
module Pagy::I18n::P11n; end

# Store the RULE to apply to each LOCALE
# the :one_other RULE is the default for locales missing from this list
#
# source://pagy//lib/pagy/i18n.rb#95
Pagy::I18n::P11n::LOCALE = T.let(T.unsafe(nil), Hash)

# Store the proc defining each pluralization RULE
# Logic adapted from https://github.com/svenfuchs/rails-i18n
#
# source://pagy//lib/pagy/i18n.rb#26
Pagy::I18n::P11n::RULE = T.let(T.unsafe(nil), Hash)

# I18n configuration error
#
# source://pagy//lib/pagy/exceptions.rb#21
class Pagy::I18nError < ::StandardError; end

# Generic internal error
#
# source://pagy//lib/pagy/exceptions.rb#24
class Pagy::InternalError < ::StandardError; end

# source://pagy//lib/pagy/frontend.rb#10
Pagy::LABEL_TOKEN = T.let(T.unsafe(nil), String)

# Specific overflow error
#
# source://pagy//lib/pagy/exceptions.rb#18
class Pagy::OverflowError < ::Pagy::VariableError; end

# Used for search and replace, hardcoded also in the pagy.js file
#
# source://pagy//lib/pagy/frontend.rb#9
Pagy::PAGE_TOKEN = T.let(T.unsafe(nil), String)

# Shared with Keyset
#
# source://pagy//lib/pagy/shared_methods.rb#5
module Pagy::SharedMethods
  # Validates and assign the passed vars: var must be present and value.to_i must be >= to min
  #
  # source://pagy//lib/pagy/shared_methods.rb#9
  def assign_and_check(name_min); end

  # Assign @limit (overridden by the gearbox extra)
  #
  # source://pagy//lib/pagy/shared_methods.rb#17
  def assign_limit; end

  # Assign @vars
  #
  # source://pagy//lib/pagy/shared_methods.rb#22
  def assign_vars(default, vars); end

  # Returns the value of attribute limit.
  #
  # source://pagy//lib/pagy/shared_methods.rb#6
  def limit; end

  # Returns the value of attribute page.
  #
  # source://pagy//lib/pagy/shared_methods.rb#6
  def page; end

  # Returns the value of attribute vars.
  #
  # source://pagy//lib/pagy/shared_methods.rb#6
  def vars; end
end

# Provide the helpers to handle the url in frontend and backend
#
# source://pagy//lib/pagy/url_helpers.rb#5
module Pagy::UrlHelpers
  # Add the page and limit params
  # Overridable by the jsonapi extra
  #
  # source://pagy//lib/pagy/url_helpers.rb#21
  def pagy_set_query_params(page, vars, query_params); end

  # Return the URL for the page, relying on the params method and Rack by default.
  # It supports all Rack-based frameworks (Sinatra, Padrino, Rails, ...).
  # For non-rack environments you can use the standalone extra
  #
  # source://pagy//lib/pagy/url_helpers.rb#9
  def pagy_url_for(pagy, page, absolute: T.unsafe(nil), fragment: T.unsafe(nil), **_); end
end

# source://pagy//lib/pagy.rb#9
Pagy::VERSION = T.let(T.unsafe(nil), String)

# Generic variable error
#
# source://pagy//lib/pagy/exceptions.rb#5
class Pagy::VariableError < ::ArgumentError
  # Set the variables and prepare the message
  #
  # @return [VariableError] a new instance of VariableError
  #
  # source://pagy//lib/pagy/exceptions.rb#9
  def initialize(pagy, variable, description, value); end

  # Returns the value of attribute pagy.
  #
  # source://pagy//lib/pagy/exceptions.rb#6
  def pagy; end

  # Returns the value of attribute value.
  #
  # source://pagy//lib/pagy/exceptions.rb#6
  def value; end

  # Returns the value of attribute variable.
  #
  # source://pagy//lib/pagy/exceptions.rb#6
  def variable; end
end
