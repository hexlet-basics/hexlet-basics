# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `valid_email2` gem.
# Please instead update this file by running `bin/tapioca gem valid_email2`.

module ValidEmail2
  class << self
    # source://valid_email2//lib/valid_email2.rb#15
    def blacklist; end

    # source://valid_email2//lib/valid_email2.rb#11
    def disposable_emails; end

    # source://valid_email2//lib/valid_email2.rb#19
    def whitelist; end

    private

    # source://valid_email2//lib/valid_email2.rb#29
    def load_file(path); end

    # source://valid_email2//lib/valid_email2.rb#25
    def load_if_exists(path); end
  end
end

class ValidEmail2::Address
  # @return [Address] a new instance of Address
  #
  # source://valid_email2//lib/valid_email2/address.rb#23
  def initialize(address, dns_timeout = T.unsafe(nil)); end

  # Returns the value of attribute address.
  #
  # source://valid_email2//lib/valid_email2/address.rb#9
  def address; end

  # Sets the attribute address
  #
  # @param value the value to set the attribute address to.
  #
  # source://valid_email2//lib/valid_email2/address.rb#9
  def address=(_arg0); end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#88
  def blacklisted?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#72
  def disposable?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#76
  def disposable_domain?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#80
  def disposable_mx_server?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#64
  def dotted?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#68
  def subaddressed?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#37
  def valid?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#56
  def valid_address?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#44
  def valid_domain?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#92
  def valid_mx?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#98
  def valid_strict_mx?; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#84
  def whitelisted?; end

  private

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#128
  def address_contain_emoticons?(email); end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#106
  def domain_is_in?(domain_list); end

  # source://valid_email2//lib/valid_email2/address.rb#141
  def mx_or_a_servers; end

  # @return [Boolean]
  #
  # source://valid_email2//lib/valid_email2/address.rb#116
  def mx_server_is_in?(domain_list); end

  # source://valid_email2//lib/valid_email2/address.rb#134
  def mx_servers; end

  class << self
    # source://valid_email2//lib/valid_email2/address.rb#15
    def prohibited_domain_characters_regex; end

    # source://valid_email2//lib/valid_email2/address.rb#19
    def prohibited_domain_characters_regex=(val); end
  end
end

# source://valid_email2//lib/valid_email2/address.rb#12
ValidEmail2::Address::DEFAULT_RECIPIENT_DELIMITER = T.let(T.unsafe(nil), String)

# source://valid_email2//lib/valid_email2/address.rb#13
ValidEmail2::Address::DOT_DELIMITER = T.let(T.unsafe(nil), String)

# source://valid_email2//lib/valid_email2/address.rb#11
ValidEmail2::Address::PROHIBITED_DOMAIN_CHARACTERS_REGEX = T.let(T.unsafe(nil), Regexp)

# source://valid_email2//lib/valid_email2.rb#6
ValidEmail2::BLACKLIST_FILE = T.let(T.unsafe(nil), String)

# source://valid_email2//lib/valid_email2.rb#8
ValidEmail2::DISPOSABLE_FILE = T.let(T.unsafe(nil), String)

class ValidEmail2::EmailValidator < ::ActiveModel::EachValidator
  # source://valid_email2//lib/valid_email2/email_validator.rb#7
  def default_options; end

  # source://valid_email2//lib/valid_email2/email_validator.rb#68
  def error(record, attribute); end

  # source://valid_email2//lib/valid_email2/email_validator.rb#56
  def sanitized_values(input); end

  # source://valid_email2//lib/valid_email2/email_validator.rb#11
  def validate_each(record, attribute, value); end
end

# source://valid_email2//lib/valid_email2.rb#7
ValidEmail2::WHITELIST_FILE = T.let(T.unsafe(nil), String)
