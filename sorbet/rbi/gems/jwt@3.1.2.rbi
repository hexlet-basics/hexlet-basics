# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jwt` gem.
# Please instead update this file by running `bin/tapioca gem jwt`.


# JSON Web Token implementation
#
# Should be up to date with the latest spec:
# https://tools.ietf.org/html/rfc7519
#
# source://jwt//lib/jwt/version.rb#7
module JWT
  extend ::JWT::Configuration

  private

  # Decodes a JWT to extract the payload and header
  #
  # @param jwt [String] the JWT to decode.
  # @param key [String] the key used to verify the JWT.
  # @param verify [Boolean] whether to verify the JWT signature.
  # @param options [Hash] additional options for decoding.
  # @return [Array<Hash>] the decoded payload and headers.
  #
  # source://jwt//lib/jwt.rb#45
  def decode(jwt, key = T.unsafe(nil), verify = T.unsafe(nil), options = T.unsafe(nil), &keyfinder); end

  # Encodes a payload into a JWT.
  #
  # @param payload [Hash] the payload to encode.
  # @param key [String] the key used to sign the JWT.
  # @param algorithm [String] the algorithm used to sign the JWT.
  # @param header_fields [Hash] additional headers to include in the JWT.
  # @return [String] the encoded JWT.
  #
  # source://jwt//lib/jwt.rb#31
  def encode(payload, key, algorithm = T.unsafe(nil), header_fields = T.unsafe(nil)); end

  class << self
    # Decodes a JWT to extract the payload and header
    #
    # @param jwt [String] the JWT to decode.
    # @param key [String] the key used to verify the JWT.
    # @param verify [Boolean] whether to verify the JWT signature.
    # @param options [Hash] additional options for decoding.
    # @return [Array<Hash>] the decoded payload and headers.
    #
    # source://jwt//lib/jwt.rb#45
    def decode(jwt, key = T.unsafe(nil), verify = T.unsafe(nil), options = T.unsafe(nil), &keyfinder); end

    # Encodes a payload into a JWT.
    #
    # @param payload [Hash] the payload to encode.
    # @param key [String] the key used to sign the JWT.
    # @param algorithm [String] the algorithm used to sign the JWT.
    # @param header_fields [Hash] additional headers to include in the JWT.
    # @return [String] the encoded JWT.
    #
    # source://jwt//lib/jwt.rb#31
    def encode(payload, key, algorithm = T.unsafe(nil), header_fields = T.unsafe(nil)); end

    # Returns the gem version of the JWT library.
    #
    # @return [Gem::Version] the gem version.
    #
    # source://jwt//lib/jwt/version.rb#11
    def gem_version; end

    # Checks if the OpenSSL version is 3 or greater.
    #
    # @api private
    # @return [Boolean] true if OpenSSL version is 3 or greater, false otherwise.
    #
    # source://jwt//lib/jwt/version.rb#29
    def openssl_3?; end

    # Checks if there is an OpenSSL 3 HMAC empty key regression.
    #
    # @api private
    # @return [Boolean] true if there is an OpenSSL 3 HMAC empty key regression, false otherwise.
    #
    # source://jwt//lib/jwt/version.rb#39
    def openssl_3_hmac_empty_key_regression?; end

    # Returns the OpenSSL version.
    #
    # @api private
    # @return [Gem::Version] the OpenSSL version.
    #
    # source://jwt//lib/jwt/version.rb#47
    def openssl_version; end
  end
end

# Base64 encoding and decoding
#
# @api private
#
# source://jwt//lib/jwt/base64.rb#8
class JWT::Base64
  class << self
    # Decode a string with URL-safe Base64 complying with RFC 4648.
    #
    # @api private
    #
    # source://jwt//lib/jwt/base64.rb#18
    def url_decode(str); end

    # Encode a string with URL-safe Base64 complying with RFC 4648 (not padded).
    #
    # @api private
    #
    # source://jwt//lib/jwt/base64.rb#12
    def url_encode(str); end
  end
end

# The Base64DecodeError class is raised when there is an error decoding a Base64-encoded string.
#
# source://jwt//lib/jwt/error.rb#50
class JWT::Base64DecodeError < ::JWT::DecodeError; end

# JWT Claim verifications
# https://datatracker.ietf.org/doc/html/rfc7519#section-4
#
# Verification is supported for the following claims:
# exp
# nbf
# iss
# iat
# jti
# aud
# sub
# required
# numeric
#
# source://jwt//lib/jwt/claims/audience.rb#4
module JWT::Claims
  class << self
    # Returns the errors in the claims of the JWT token.
    #
    # @param options [Array] the options for verifying the claims.
    # @return [Array<JWT::Claims::Error>] the errors in the claims of the JWT
    #
    # source://jwt//lib/jwt/claims.rb#62
    def payload_errors(payload, *options); end

    # Checks if the claims in the JWT payload are valid.
    #
    # @param payload [Hash] the JWT payload.
    # @param options [Array] the options for verifying the claims.
    # @return [Boolean] true if the claims are valid, false otherwise
    #
    # source://jwt//lib/jwt/claims.rb#54
    def valid_payload?(payload, *options); end

    # Checks if the claims in the JWT payload are valid.
    #
    # @example
    #
    #   ::JWT::Claims.verify_payload!({"exp" => Time.now.to_i + 10}, :exp)
    #   ::JWT::Claims.verify_payload!({"exp" => Time.now.to_i - 10}, exp: { leeway: 11})
    # @param payload [Hash] the JWT payload.
    # @param options [Array] the options for verifying the claims.
    # @raise [JWT::DecodeError] if any claim is invalid.
    # @return [void]
    #
    # source://jwt//lib/jwt/claims.rb#45
    def verify_payload!(payload, *options); end
  end
end

# The Audience class is responsible for validating the audience claim ('aud') in a JWT token.
#
# source://jwt//lib/jwt/claims/audience.rb#6
class JWT::Claims::Audience
  # Initializes a new Audience instance.
  #
  # @param expected_audience [String, Array<String>] the expected audience(s) for the JWT token.
  # @return [Audience] a new instance of Audience
  #
  # source://jwt//lib/jwt/claims/audience.rb#10
  def initialize(expected_audience:); end

  # Verifies the audience claim ('aud') in the JWT token.
  #
  # @param context [Object] the context containing the JWT payload.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::InvalidAudError] if the audience claim is invalid.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/audience.rb#20
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute expected_audience.
  #
  # source://jwt//lib/jwt/claims/audience.rb#27
  def expected_audience; end
end

# Responsible of validation the crit header
#
# source://jwt//lib/jwt/claims/crit.rb#6
class JWT::Claims::Crit
  # Initializes a new Crit instance.
  #
  # @param expected_crits [String] the expected crit header values for the JWT token.
  # @return [Crit] a new instance of Crit
  #
  # source://jwt//lib/jwt/claims/crit.rb#10
  def initialize(expected_crits:); end

  # Verifies the critical claim ('crit') in the JWT token header.
  #
  # @param context [Object] the context containing the JWT payload and header.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::InvalidCritError] if the crit claim is invalid.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/crit.rb#20
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute expected_crits.
  #
  # source://jwt//lib/jwt/claims/crit.rb#32
  def expected_crits; end
end

# Verifiers to support the ::JWT.decode method
#
# @api private
#
# source://jwt//lib/jwt/claims/decode_verifier.rb#13
module JWT::Claims::DecodeVerifier
  class << self
    # @api private
    #
    # source://jwt//lib/jwt/claims/decode_verifier.rb#29
    def verify!(payload, options); end
  end
end

# @api private
#
# source://jwt//lib/jwt/claims/decode_verifier.rb#14
JWT::Claims::DecodeVerifier::VERIFIERS = T.let(T.unsafe(nil), Hash)

# Represents a claim verification error
#
# source://jwt//lib/jwt/claims.rb#32
class JWT::Claims::Error < ::Struct
  # Returns the value of attribute message
  #
  # @return [Object] the current value of message
  #
  # source://jwt//lib/jwt/claims.rb#32
  def message; end

  # Sets the attribute message
  #
  # @param value [Object] the value to set the attribute message to.
  # @return [Object] the newly set value
  #
  # source://jwt//lib/jwt/claims.rb#32
  def message=(_); end

  class << self
    # source://jwt//lib/jwt/claims.rb#32
    def [](*_arg0); end

    # source://jwt//lib/jwt/claims.rb#32
    def inspect; end

    # source://jwt//lib/jwt/claims.rb#32
    def keyword_init?; end

    # source://jwt//lib/jwt/claims.rb#32
    def members; end

    # source://jwt//lib/jwt/claims.rb#32
    def new(*_arg0); end
  end
end

# The Expiration class is responsible for validating the expiration claim ('exp') in a JWT token.
#
# source://jwt//lib/jwt/claims/expiration.rb#6
class JWT::Claims::Expiration
  # Initializes a new Expiration instance.
  #
  # @param leeway [Integer] the amount of leeway (in seconds) to allow when validating the expiration time. Default: 0.
  # @return [Expiration] a new instance of Expiration
  #
  # source://jwt//lib/jwt/claims/expiration.rb#10
  def initialize(leeway:); end

  # Verifies the expiration claim ('exp') in the JWT token.
  #
  # @param context [Object] the context containing the JWT payload.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::ExpiredSignature] if the token has expired.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/expiration.rb#20
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute leeway.
  #
  # source://jwt//lib/jwt/claims/expiration.rb#29
  def leeway; end
end

# The IssuedAt class is responsible for validating the issued at claim ('iat') in a JWT token.
#
# source://jwt//lib/jwt/claims/issued_at.rb#6
class JWT::Claims::IssuedAt
  # Verifies the issued at claim ('iat') in the JWT token.
  #
  # @param context [Object] the context containing the JWT payload.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::InvalidIatError] if the issued at claim is invalid.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/issued_at.rb#13
  def verify!(context:, **_args); end
end

# The Issuer class is responsible for validating the issuer claim ('iss') in a JWT token.
#
# source://jwt//lib/jwt/claims/issuer.rb#6
class JWT::Claims::Issuer
  # Initializes a new Issuer instance.
  #
  # @param issuers [String, Symbol, Array<String, Symbol>] the expected issuer(s) for the JWT token.
  # @return [Issuer] a new instance of Issuer
  #
  # source://jwt//lib/jwt/claims/issuer.rb#10
  def initialize(issuers:); end

  # Verifies the issuer claim ('iss') in the JWT token.
  #
  # @param context [Object] the context containing the JWT payload.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::InvalidIssuerError] if the issuer claim is invalid.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/issuer.rb#20
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute issuers.
  #
  # source://jwt//lib/jwt/claims/issuer.rb#31
  def issuers; end
end

# The JwtId class is responsible for validating the JWT ID claim ('jti') in a JWT token.
#
# source://jwt//lib/jwt/claims/jwt_id.rb#6
class JWT::Claims::JwtId
  # Initializes a new JwtId instance.
  #
  # @param validator [#call] an object responding to `call` to validate the JWT ID.
  # @return [JwtId] a new instance of JwtId
  #
  # source://jwt//lib/jwt/claims/jwt_id.rb#10
  def initialize(validator:); end

  # Verifies the JWT ID claim ('jti') in the JWT token.
  #
  # @param context [Object] the context containing the JWT payload.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::InvalidJtiError] if the JWT ID claim is invalid or missing.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/jwt_id.rb#20
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute validator.
  #
  # source://jwt//lib/jwt/claims/jwt_id.rb#32
  def validator; end
end

# The NotBefore class is responsible for validating the 'nbf' (Not Before) claim in a JWT token.
#
# source://jwt//lib/jwt/claims/not_before.rb#6
class JWT::Claims::NotBefore
  # Initializes a new NotBefore instance.
  #
  # @param leeway [Integer] the amount of leeway (in seconds) to allow when validating the 'nbf' claim. Defaults to 0.
  # @return [NotBefore] a new instance of NotBefore
  #
  # source://jwt//lib/jwt/claims/not_before.rb#10
  def initialize(leeway:); end

  # Verifies the 'nbf' (Not Before) claim in the JWT token.
  #
  # @param context [Object] the context containing the JWT payload.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::ImmatureSignature] if the 'nbf' claim has not been reached.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/not_before.rb#20
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute leeway.
  #
  # source://jwt//lib/jwt/claims/not_before.rb#29
  def leeway; end
end

# The Numeric class is responsible for validating numeric claims in a JWT token.
# The numeric claims are: exp, iat and nbf
#
# source://jwt//lib/jwt/claims/numeric.rb#7
class JWT::Claims::Numeric
  # Verifies the numeric claims in the JWT context.
  #
  # @param context [Object] the context containing the JWT payload.
  # @raise [JWT::InvalidClaimError] if any numeric claim is invalid.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/numeric.rb#22
  def verify!(context:); end

  private

  # @raise [InvalidPayload]
  #
  # source://jwt//lib/jwt/claims/numeric.rb#34
  def validate_is_numeric(payload, claim); end

  # source://jwt//lib/jwt/claims/numeric.rb#28
  def validate_numeric_claims(payload); end
end

# List of numeric claims that can be validated.
#
# source://jwt//lib/jwt/claims/numeric.rb#9
JWT::Claims::Numeric::NUMERIC_CLAIMS = T.let(T.unsafe(nil), Array)

# The Required class is responsible for validating that all required claims are present in a JWT token.
#
# source://jwt//lib/jwt/claims/required.rb#6
class JWT::Claims::Required
  # Initializes a new Required instance.
  #
  # @param required_claims [Array<String>] the list of required claims.
  # @return [Required] a new instance of Required
  #
  # source://jwt//lib/jwt/claims/required.rb#10
  def initialize(required_claims:); end

  # Verifies that all required claims are present in the JWT payload.
  #
  # @param context [Object] the context containing the JWT payload.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::MissingRequiredClaim] if any required claim is missing.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/required.rb#20
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute required_claims.
  #
  # source://jwt//lib/jwt/claims/required.rb#30
  def required_claims; end
end

# The Subject class is responsible for validating the subject claim ('sub') in a JWT token.
#
# source://jwt//lib/jwt/claims/subject.rb#6
class JWT::Claims::Subject
  # Initializes a new Subject instance.
  #
  # @param expected_subject [String] the expected subject for the JWT token.
  # @return [Subject] a new instance of Subject
  #
  # source://jwt//lib/jwt/claims/subject.rb#10
  def initialize(expected_subject:); end

  # Verifies the subject claim ('sub') in the JWT token.
  #
  # @param context [Object] the context containing the JWT payload.
  # @param _args [Hash] additional arguments (not used).
  # @raise [JWT::InvalidSubError] if the subject claim is invalid.
  # @return [nil]
  #
  # source://jwt//lib/jwt/claims/subject.rb#20
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute expected_subject.
  #
  # source://jwt//lib/jwt/claims/subject.rb#27
  def expected_subject; end
end

# Context class to contain the data passed to individual claim validators
#
# @api private
#
# source://jwt//lib/jwt/claims/decode_verifier.rb#8
class JWT::Claims::VerificationContext < ::Struct
  # Returns the value of attribute payload
  #
  # @return [Object] the current value of payload
  #
  # source://jwt//lib/jwt/claims/decode_verifier.rb#8
  def payload; end

  # Sets the attribute payload
  #
  # @param value [Object] the value to set the attribute payload to.
  # @return [Object] the newly set value
  #
  # source://jwt//lib/jwt/claims/decode_verifier.rb#8
  def payload=(_); end

  class << self
    # source://jwt//lib/jwt/claims/decode_verifier.rb#8
    def [](*_arg0); end

    # source://jwt//lib/jwt/claims/decode_verifier.rb#8
    def inspect; end

    # source://jwt//lib/jwt/claims/decode_verifier.rb#8
    def keyword_init?; end

    # source://jwt//lib/jwt/claims/decode_verifier.rb#8
    def members; end

    # source://jwt//lib/jwt/claims/decode_verifier.rb#8
    def new(*_arg0); end
  end
end

# @api private
#
# source://jwt//lib/jwt/claims/verifier.rb#6
module JWT::Claims::Verifier
  class << self
    # @api private
    #
    # source://jwt//lib/jwt/claims/verifier.rb#32
    def errors(context, *options); end

    # @api private
    #
    # source://jwt//lib/jwt/claims/verifier.rb#24
    def verify!(context, *options); end

    private

    # @api private
    #
    # source://jwt//lib/jwt/claims/verifier.rb#44
    def iterate_verifiers(*options); end

    # @api private
    #
    # source://jwt//lib/jwt/claims/verifier.rb#54
    def verify_one!(context, verifier, options); end
  end
end

# @api private
#
# source://jwt//lib/jwt/claims/verifier.rb#7
JWT::Claims::Verifier::VERIFIERS = T.let(T.unsafe(nil), Hash)

# The Configuration module provides methods to configure JWT settings.
#
# source://jwt//lib/jwt/configuration/decode_configuration.rb#4
module JWT::Configuration
  # Returns the JWT configuration container.
  #
  # @return [JWT::Configuration::Container] the configuration container.
  #
  # source://jwt//lib/jwt/configuration.rb#19
  def configuration; end

  # Configures the JWT settings.
  #
  # @yield [config] Gives the current configuration to the block.
  # @yieldparam config [JWT::Configuration::Container] the configuration container.
  #
  # source://jwt//lib/jwt/configuration.rb#12
  def configure; end
end

# The Container class holds the configuration settings for JWT.
#
# source://jwt//lib/jwt/configuration/container.rb#9
class JWT::Configuration::Container
  # Initializes a new Container instance and resets the configuration.
  #
  # @return [Container] a new instance of Container
  #
  # source://jwt//lib/jwt/configuration/container.rb#23
  def initialize; end

  # @return [DecodeConfiguration] the decode configuration.
  #
  # source://jwt//lib/jwt/configuration/container.rb#16
  def decode; end

  # @return [DecodeConfiguration] the decode configuration.
  #
  # source://jwt//lib/jwt/configuration/container.rb#16
  def decode=(_arg0); end

  # Returns the value of attribute deprecation_warnings.
  #
  # source://jwt//lib/jwt/configuration/container.rb#20
  def deprecation_warnings; end

  # Sets the deprecation warnings setting.
  #
  # @param value [Symbol] the deprecation warnings setting. Must be one of `:once`, `:warn`, or `:silent`.
  # @raise [ArgumentError] if the value is not one of the supported values.
  # @return [void]
  #
  # source://jwt//lib/jwt/configuration/container.rb#44
  def deprecation_warnings=(value); end

  # @return [JwkConfiguration] the JWK configuration.
  #
  # source://jwt//lib/jwt/configuration/container.rb#16
  def jwk; end

  # @return [JwkConfiguration] the JWK configuration.
  #
  # source://jwt//lib/jwt/configuration/container.rb#16
  def jwk=(_arg0); end

  # Resets the configuration to default values.
  #
  # @return [void]
  #
  # source://jwt//lib/jwt/configuration/container.rb#30
  def reset!; end

  # @return [Boolean] whether strict Base64 decoding is enabled.
  #
  # source://jwt//lib/jwt/configuration/container.rb#16
  def strict_base64_decoding; end

  # Sets the attribute strict_base64_decoding
  #
  # @param value the value to set the attribute strict_base64_decoding to.
  #
  # source://jwt//lib/jwt/configuration/container.rb#16
  def strict_base64_decoding=(_arg0); end
end

# source://jwt//lib/jwt/configuration/container.rb#37
JWT::Configuration::Container::DEPRECATION_WARNINGS_VALUES = T.let(T.unsafe(nil), Array)

# The DecodeConfiguration class holds the configuration settings for decoding JWT tokens.
#
# source://jwt//lib/jwt/configuration/decode_configuration.rb#6
class JWT::Configuration::DecodeConfiguration
  # Initializes a new DecodeConfiguration instance with default settings.
  #
  # @return [DecodeConfiguration] a new instance of DecodeConfiguration
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#40
  def initialize; end

  # @return [Array<String>] the list of acceptable algorithms.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def algorithms; end

  # @return [Array<String>] the list of acceptable algorithms.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def algorithms=(_arg0); end

  # @return [Integer] the leeway in seconds for time-based claims.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def leeway; end

  # @return [Integer] the leeway in seconds for time-based claims.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def leeway=(_arg0); end

  # @return [Array<String>] the list of required claims.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def required_claims; end

  # Sets the attribute required_claims
  #
  # @param value the value to set the attribute required_claims to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def required_claims=(_arg0); end

  # @api private
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#54
  def to_h; end

  # @return [Boolean] whether to verify the audience claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_aud; end

  # @return [Boolean] whether to verify the audience claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_aud=(_arg0); end

  # @return [Boolean] whether to verify the expiration claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_expiration; end

  # @return [Boolean] whether to verify the expiration claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_expiration=(_arg0); end

  # @return [Boolean] whether to verify the issued at claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_iat; end

  # @return [Boolean] whether to verify the issued at claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_iat=(_arg0); end

  # @return [Boolean] whether to verify the issuer claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_iss; end

  # @return [Boolean] whether to verify the issuer claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_iss=(_arg0); end

  # @return [Boolean] whether to verify the JWT ID claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_jti; end

  # @return [Boolean] whether to verify the JWT ID claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_jti=(_arg0); end

  # @return [Boolean] whether to verify the not before claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_not_before; end

  # @return [Boolean] whether to verify the not before claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_not_before=(_arg0); end

  # @return [Boolean] whether to verify the subject claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_sub; end

  # @return [Boolean] whether to verify the subject claim.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#28
  def verify_sub=(_arg0); end
end

# @api private
#
# source://jwt//lib/jwt/configuration/jwk_configuration.rb#9
class JWT::Configuration::JwkConfiguration
  # @api private
  # @return [JwkConfiguration] a new instance of JwkConfiguration
  #
  # source://jwt//lib/jwt/configuration/jwk_configuration.rb#10
  def initialize; end

  # @api private
  #
  # source://jwt//lib/jwt/configuration/jwk_configuration.rb#25
  def kid_generator; end

  # @api private
  #
  # source://jwt//lib/jwt/configuration/jwk_configuration.rb#25
  def kid_generator=(_arg0); end

  # @api private
  #
  # source://jwt//lib/jwt/configuration/jwk_configuration.rb#14
  def kid_generator_type=(value); end
end

# The Decode class is responsible for decoding and verifying JWT tokens.
#
# source://jwt//lib/jwt/decode.rb#8
class JWT::Decode
  # Initializes a new Decode instance.
  #
  # @param jwt [String] the JWT to decode.
  # @param key [String, Array<String>] the key(s) to use for verification.
  # @param verify [Boolean] whether to verify the token's signature.
  # @param options [Hash] additional options for decoding and verification.
  # @param keyfinder [Proc] an optional key finder block to dynamically find the key for verification.
  # @raise [JWT::DecodeError] if decoding or verification fails.
  # @return [Decode] a new instance of Decode
  #
  # source://jwt//lib/jwt/decode.rb#22
  def initialize(jwt, key, verify, options, &keyfinder); end

  # Decodes the JWT token and verifies its segments if verification is enabled.
  #
  # @return [Array<Hash>] an array containing the decoded payload and header.
  #
  # source://jwt//lib/jwt/decode.rb#35
  def decode_segments; end

  private

  # source://jwt//lib/jwt/decode.rb#119
  def alg_in_header; end

  # source://jwt//lib/jwt/decode.rb#90
  def allowed_algorithms; end

  # source://jwt//lib/jwt/decode.rb#81
  def allowed_and_valid_algorithms; end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/decode.rb#98
  def find_key(&keyfinder); end

  # source://jwt//lib/jwt/decode.rb#85
  def given_algorithms; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/decode.rb#115
  def none_algorithm?; end

  # source://jwt//lib/jwt/decode.rb#94
  def resolve_allowed_algorithms; end

  # source://jwt//lib/jwt/decode.rb#66
  def set_key; end

  # Returns the value of attribute token.
  #
  # source://jwt//lib/jwt/decode.rb#49
  def token; end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/decode.rb#106
  def validate_segment_count!; end

  # @raise [JWT::IncorrectAlgorithm]
  #
  # source://jwt//lib/jwt/decode.rb#59
  def verify_algo; end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/decode.rb#51
  def verify_signature; end
end

# Order is very important - first check for string keys, next for symbols
#
# source://jwt//lib/jwt/decode.rb#10
JWT::Decode::ALGORITHM_KEYS = T.let(T.unsafe(nil), Array)

# The DecodeError class is raised when there is an error decoding a JWT.
#
# source://jwt//lib/jwt/error.rb#8
class JWT::DecodeError < ::StandardError; end

# The Encode class is responsible for encoding JWT tokens.
#
# source://jwt//lib/jwt/encode.rb#7
class JWT::Encode
  # Initializes a new Encode instance.
  #
  # @option options
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the options for encoding the JWT token.
  # @return [Encode] a new instance of Encode
  #
  # source://jwt//lib/jwt/encode.rb#15
  def initialize(options); end

  # Encodes the JWT token and returns its segments.
  #
  # @return [String] the encoded JWT token.
  #
  # source://jwt//lib/jwt/encode.rb#24
  def segments; end
end

# The EncodeError class is raised when there is an error encoding a JWT.
#
# source://jwt//lib/jwt/error.rb#5
class JWT::EncodeError < ::StandardError; end

# Represents an encoded JWT token
#
# Processing an encoded and signed token:
#
#   token = JWT::Token.new(payload: {pay: 'load'})
#   token.sign!(algorithm: 'HS256', key: 'secret')
#
#   encoded_token = JWT::EncodedToken.new(token.jwt)
#   encoded_token.verify_signature!(algorithm: 'HS256', key: 'secret')
#   encoded_token.payload # => {'pay' => 'load'}
#
# source://jwt//lib/jwt/encoded_token.rb#14
class JWT::EncodedToken
  # Initializes a new EncodedToken instance.
  #
  # @param jwt [String] the encoded JWT token.
  # @raise [ArgumentError] if the provided JWT is not a String.
  # @return [EncodedToken] a new instance of EncodedToken
  #
  # source://jwt//lib/jwt/encoded_token.rb#43
  def initialize(jwt); end

  # Returns the errors of the claims of the token.
  #
  # @param options [Array<Symbol>, Hash] the claims to verify. By default, it checks the 'exp' claim.
  # @return [Array<Symbol>] the errors of the claims.
  #
  # source://jwt//lib/jwt/encoded_token.rb#182
  def claim_errors(*options); end

  # Returns the encoded header of the JWT token.
  #
  # @return [String] the encoded header.
  #
  # source://jwt//lib/jwt/encoded_token.rb#75
  def encoded_header; end

  # Sets or returns the encoded payload of the JWT token.
  #
  # @return [String] the encoded payload.
  #
  # source://jwt//lib/jwt/encoded_token.rb#97
  def encoded_payload; end

  # Sets or returns the encoded payload of the JWT token.
  #
  # @return [String] the encoded payload.
  #
  # source://jwt//lib/jwt/encoded_token.rb#97
  def encoded_payload=(_arg0); end

  # Returns the encoded signature of the JWT token.
  #
  # @return [String] the encoded signature.
  #
  # source://jwt//lib/jwt/encoded_token.rb#63
  def encoded_signature; end

  # Returns the decoded header of the JWT token.
  #
  # @return [Hash] the header.
  #
  # source://jwt//lib/jwt/encoded_token.rb#68
  def header; end

  # Returns the original token provided to the class.
  #
  # @return [String] The JWT token.
  #
  # source://jwt//lib/jwt/encoded_token.rb#37
  def jwt; end

  # Returns the payload of the JWT token. Access requires the signature and claims to have been verified.
  #
  # @raise [JWT::DecodeError] if the signature has not been verified.
  # @return [Hash] the payload.
  #
  # source://jwt//lib/jwt/encoded_token.rb#81
  def payload; end

  # Returns the decoded signature of the JWT token.
  #
  # @return [String] the decoded signature.
  #
  # source://jwt//lib/jwt/encoded_token.rb#56
  def signature; end

  # Returns the signing input of the JWT token.
  #
  # @return [String] the signing input.
  #
  # source://jwt//lib/jwt/encoded_token.rb#102
  def signing_input; end

  # Returns the original token provided to the class.
  #
  # @return [String] The JWT token.
  #
  # source://jwt//lib/jwt/encoded_token.rb#193
  def to_s; end

  # Returns the payload of the JWT token without requiring the signature to have been verified.
  #
  # @return [Hash] the payload.
  #
  # source://jwt//lib/jwt/encoded_token.rb#90
  def unverified_payload; end

  # @param signature [Hash] the parameters for signature verification (see {#verify_signature!}).
  # @param claims [Array<Symbol>, Hash] the claims to verify (see {#verify_claims!}).
  # @return [Boolean] true if the signature and claims are valid, false otherwise.
  #
  # source://jwt//lib/jwt/encoded_token.rb#128
  def valid?(signature:, claims: T.unsafe(nil)); end

  # Returns whether the claims of the token are valid.
  #
  # @param options [Array<Symbol>, Hash] the claims to verify. By default, it checks the 'exp' claim.
  # @return [Boolean] whether the claims are valid.
  #
  # source://jwt//lib/jwt/encoded_token.rb#189
  def valid_claims?(*options); end

  # Checks if the signature of the JWT token is valid.
  #
  # @param algorithm [String, Array<String>, Object, Array<Object>] the algorithm(s) to use for verification.
  # @param key [String, Array<String>, JWT::JWK::KeyBase, Array<JWT::JWK::KeyBase>] the key(s) to use for verification.
  # @param key_finder [#call] an object responding to `call` to find the key for verification.
  # @raise [ArgumentError]
  # @return [Boolean] true if the signature is valid, false otherwise.
  #
  # source://jwt//lib/jwt/encoded_token.rb#153
  def valid_signature?(algorithm: T.unsafe(nil), key: T.unsafe(nil), key_finder: T.unsafe(nil)); end

  # Verifies the token signature and claims.
  # By default it verifies the 'exp' claim.
  #
  # @example
  #   encoded_token.verify!(signature: { algorithm: 'HS256', key: 'secret' }, claims: [:exp])
  # @param signature [Hash] the parameters for signature verification (see {#verify_signature!}).
  # @param claims [Array<Symbol>, Hash] the claims to verify (see {#verify_claims!}).
  # @raise [JWT::DecodeError] if the signature or claim verification fails.
  # @return [nil]
  #
  # source://jwt//lib/jwt/encoded_token.rb#116
  def verify!(signature:, claims: T.unsafe(nil)); end

  # Verifies the claims of the token.
  #
  # @param options [Array<Symbol>, Hash] the claims to verify. By default, it checks the 'exp' claim.
  # @raise [JWT::DecodeError] if the claims are invalid.
  #
  # source://jwt//lib/jwt/encoded_token.rb#170
  def verify_claims!(*options); end

  # Verifies the signature of the JWT token.
  #
  # @param algorithm [String, Array<String>, Object, Array<Object>] the algorithm(s) to use for verification.
  # @param key [String, Array<String>] the key(s) to use for verification.
  # @param key_finder [#call] an object responding to `call` to find the key for verification.
  # @raise [JWT::VerificationError] if the signature verification fails.
  # @raise [ArgumentError] if neither key nor key_finder is provided, or if both are provided.
  # @return [nil]
  #
  # source://jwt//lib/jwt/encoded_token.rb#141
  def verify_signature!(algorithm:, key: T.unsafe(nil), key_finder: T.unsafe(nil)); end

  private

  # source://jwt//lib/jwt/encoded_token.rb#197
  def claims_options(options); end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/encoded_token.rb#203
  def decode_payload; end

  # source://jwt//lib/jwt/encoded_token.rb#232
  def decoded_payload; end

  # source://jwt//lib/jwt/encoded_token.rb#226
  def parse(segment); end

  # source://jwt//lib/jwt/encoded_token.rb#218
  def parse_and_decode(segment); end

  # source://jwt//lib/jwt/encoded_token.rb#222
  def parse_unencoded(segment); end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/encoded_token.rb#214
  def unencoded_payload?; end
end

# Allow access to the unverified payload for claim verification.
#
# @private
#
# source://jwt//lib/jwt/encoded_token.rb#17
class JWT::EncodedToken::ClaimsContext
  extend ::Forwardable

  # @return [ClaimsContext] a new instance of ClaimsContext
  #
  # source://jwt//lib/jwt/encoded_token.rb#22
  def initialize(token); end

  # source://jwt//lib/jwt/encoded_token.rb#20
  def header(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/encoded_token.rb#26
  def payload; end

  # source://jwt//lib/jwt/encoded_token.rb#20
  def unverified_payload(*args, **_arg1, &block); end
end

# source://jwt//lib/jwt/encoded_token.rb#31
JWT::EncodedToken::DEFAULT_CLAIMS = T.let(T.unsafe(nil), Array)

# The ExpiredSignature class is raised when the JWT signature has expired.
#
# source://jwt//lib/jwt/error.rb#14
class JWT::ExpiredSignature < ::JWT::DecodeError; end

# The ImmatureSignature class is raised when the JWT signature is immature.
#
# source://jwt//lib/jwt/error.rb#20
class JWT::ImmatureSignature < ::JWT::DecodeError; end

# The IncorrectAlgorithm class is raised when the JWT algorithm is incorrect.
#
# source://jwt//lib/jwt/error.rb#17
class JWT::IncorrectAlgorithm < ::JWT::DecodeError; end

# The InvalidAudError class is raised when the JWT audience (aud) claim is invalid.
#
# source://jwt//lib/jwt/error.rb#32
class JWT::InvalidAudError < ::JWT::DecodeError; end

# The InvalidCritError class is raised when the JWT crit header is invalid.
#
# source://jwt//lib/jwt/error.rb#38
class JWT::InvalidCritError < ::JWT::DecodeError; end

# The InvalidIatError class is raised when the JWT issued at (iat) claim is invalid.
#
# source://jwt//lib/jwt/error.rb#29
class JWT::InvalidIatError < ::JWT::DecodeError; end

# The InvalidIssuerError class is raised when the JWT issuer is invalid.
#
# source://jwt//lib/jwt/error.rb#23
class JWT::InvalidIssuerError < ::JWT::DecodeError; end

# The InvalidJtiError class is raised when the JWT ID (jti) claim is invalid.
#
# source://jwt//lib/jwt/error.rb#41
class JWT::InvalidJtiError < ::JWT::DecodeError; end

# The InvalidPayload class is raised when the JWT payload is invalid.
#
# source://jwt//lib/jwt/error.rb#44
class JWT::InvalidPayload < ::JWT::DecodeError; end

# The InvalidSubError class is raised when the JWT subject (sub) claim is invalid.
#
# source://jwt//lib/jwt/error.rb#35
class JWT::InvalidSubError < ::JWT::DecodeError; end

# @api private
#
# source://jwt//lib/jwt/json.rb#7
class JWT::JSON
  class << self
    # @api private
    #
    # source://jwt//lib/jwt/json.rb#9
    def generate(data); end

    # @api private
    #
    # source://jwt//lib/jwt/json.rb#13
    def parse(data); end
  end
end

# The JWA module contains all supported algorithms.
#
# source://jwt//lib/jwt/jwa/signing_algorithm.rb#5
module JWT::JWA
  class << self
    # @api private
    #
    # source://jwt//lib/jwt/jwa.rb#66
    def create_signer(algorithm:, key:); end

    # @api private
    #
    # source://jwt//lib/jwt/jwa.rb#77
    def create_verifiers(algorithms:, keys:, preferred_algorithm:); end

    # source://jwt//lib/jwt/jwa/signing_algorithm.rb#51
    def find(algo); end

    # source://jwt//lib/jwt/jwa/signing_algorithm.rb#47
    def register_algorithm(algo); end

    # @api private
    # @raise [ArgumentError]
    #
    # source://jwt//lib/jwt/jwa.rb#48
    def resolve(algorithm); end

    # @api private
    #
    # source://jwt//lib/jwt/jwa.rb#59
    def resolve_and_sort(algorithms:, preferred_algorithm:); end

    # @api private
    # @raise [error_class]
    #
    # source://jwt//lib/jwt/jwa.rb#88
    def validate_jwk_algorithms!(jwks, algorithms, error_class); end

    private

    # source://jwt//lib/jwt/jwa/signing_algorithm.rb#57
    def algorithms; end
  end
end

# ECDSA signing algorithm
#
# source://jwt//lib/jwt/jwa/ecdsa.rb#6
class JWT::JWA::Ecdsa
  include ::JWT::JWA::SigningAlgorithm
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods

  # @return [Ecdsa] a new instance of Ecdsa
  #
  # source://jwt//lib/jwt/jwa/ecdsa.rb#9
  def initialize(alg, digest); end

  # @raise [IncorrectAlgorithm]
  #
  # source://jwt//lib/jwt/jwa/ecdsa.rb#14
  def sign(data:, signing_key:); end

  # source://jwt//lib/jwt/jwa/ecdsa.rb#26
  def verify(data:, signature:, verification_key:); end

  private

  # source://jwt//lib/jwt/jwa/ecdsa.rb#105
  def asn1_to_raw(signature, public_key); end

  # source://jwt//lib/jwt/jwa/ecdsa.rb#94
  def curve_by_name(name); end

  # Returns the value of attribute digest.
  #
  # source://jwt//lib/jwt/jwa/ecdsa.rb#92
  def digest; end

  # source://jwt//lib/jwt/jwa/ecdsa.rb#98
  def raw_to_asn1(signature, private_key); end

  class << self
    # source://jwt//lib/jwt/jwa/ecdsa.rb#75
    def create_public_key_from_point(point); end

    # @api private
    #
    # source://jwt//lib/jwt/jwa/ecdsa.rb#68
    def curve_by_name(name); end
  end
end

# source://jwt//lib/jwt/jwa/ecdsa.rb#40
JWT::JWA::Ecdsa::NAMED_CURVES = T.let(T.unsafe(nil), Hash)

# Implementation of the HMAC family of algorithms
#
# source://jwt//lib/jwt/jwa/hmac.rb#6
class JWT::JWA::Hmac
  include ::JWT::JWA::SigningAlgorithm
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods

  # @return [Hmac] a new instance of Hmac
  #
  # source://jwt//lib/jwt/jwa/hmac.rb#9
  def initialize(alg, digest); end

  # source://jwt//lib/jwt/jwa/hmac.rb#14
  def sign(data:, signing_key:); end

  # source://jwt//lib/jwt/jwa/hmac.rb#25
  def verify(data:, signature:, verification_key:); end

  private

  # Returns the value of attribute digest.
  #
  # source://jwt//lib/jwt/jwa/hmac.rb#35
  def digest; end
end

# Copy of https://github.com/rails/rails/blob/v7.0.3.1/activesupport/lib/active_support/security_utils.rb
#
# source://jwt//lib/jwt/jwa/hmac.rb#39
module JWT::JWA::Hmac::SecurityUtils
  private

  # :nocov:
  #
  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwa/hmac.rb#46
  def fixed_length_secure_compare(a, b); end

  # Secure string comparison for strings of variable length.
  #
  # While a timing attack would not be able to discern the content of
  # a secret compared via secure_compare, it is possible to determine
  # the secret length. This should be considered when using secure_compare
  # to compare weak, short secrets to user input.
  #
  # source://jwt//lib/jwt/jwa/hmac.rb#70
  def secure_compare(a, b); end

  class << self
    # :nocov:
    #
    # @raise [ArgumentError]
    #
    # source://jwt//lib/jwt/jwa/hmac.rb#62
    def fixed_length_secure_compare(a, b); end

    # Secure string comparison for strings of variable length.
    #
    # While a timing attack would not be able to discern the content of
    # a secret compared via secure_compare, it is possible to determine
    # the secret length. This should be considered when using secure_compare
    # to compare weak, short secrets to user input.
    #
    # source://jwt//lib/jwt/jwa/hmac.rb#73
    def secure_compare(a, b); end
  end
end

# Implementation of the none algorithm
#
# source://jwt//lib/jwt/jwa/none.rb#6
class JWT::JWA::None
  include ::JWT::JWA::SigningAlgorithm
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods

  # @return [None] a new instance of None
  #
  # source://jwt//lib/jwt/jwa/none.rb#9
  def initialize; end

  # source://jwt//lib/jwt/jwa/none.rb#13
  def sign(*_arg0); end

  # source://jwt//lib/jwt/jwa/none.rb#17
  def verify(*_arg0); end
end

# Implementation of the RSASSA-PSS family of algorithms
#
# source://jwt//lib/jwt/jwa/ps.rb#6
class JWT::JWA::Ps
  include ::JWT::JWA::SigningAlgorithm
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods

  # @return [Ps] a new instance of Ps
  #
  # source://jwt//lib/jwt/jwa/ps.rb#9
  def initialize(alg); end

  # source://jwt//lib/jwt/jwa/ps.rb#14
  def sign(data:, signing_key:); end

  # source://jwt//lib/jwt/jwa/ps.rb#21
  def verify(data:, signature:, verification_key:); end

  private

  # Returns the value of attribute digest_algorithm.
  #
  # source://jwt//lib/jwt/jwa/ps.rb#33
  def digest_algorithm; end
end

# Implementation of the RSA family of algorithms
#
# source://jwt//lib/jwt/jwa/rsa.rb#6
class JWT::JWA::Rsa
  include ::JWT::JWA::SigningAlgorithm
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods

  # @return [Rsa] a new instance of Rsa
  #
  # source://jwt//lib/jwt/jwa/rsa.rb#9
  def initialize(alg); end

  # source://jwt//lib/jwt/jwa/rsa.rb#14
  def sign(data:, signing_key:); end

  # source://jwt//lib/jwt/jwa/rsa.rb#21
  def verify(data:, signature:, verification_key:); end

  private

  # Returns the value of attribute digest.
  #
  # source://jwt//lib/jwt/jwa/rsa.rb#33
  def digest; end
end

# @api private
#
# source://jwt//lib/jwt/jwa.rb#33
class JWT::JWA::SignerContext
  # @api private
  # @return [SignerContext] a new instance of SignerContext
  #
  # source://jwt//lib/jwt/jwa.rb#36
  def initialize(jwa:, key:); end

  # @api private
  #
  # source://jwt//lib/jwt/jwa.rb#34
  def jwa; end

  # @api private
  #
  # source://jwt//lib/jwt/jwa.rb#41
  def sign(*args, **kwargs); end
end

# Base functionality for signing algorithms
#
# source://jwt//lib/jwt/jwa/signing_algorithm.rb#7
module JWT::JWA::SigningAlgorithm
  mixes_in_class_methods ::JWT::JWA::SigningAlgorithm::ClassMethods

  # Returns the value of attribute alg.
  #
  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#19
  def alg; end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#25
  def header(*_arg0); end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#41
  def raise_sign_error!(message); end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#37
  def raise_verify_error!(message); end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#29
  def sign(*_arg0); end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#21
  def valid_alg?(alg_to_check); end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#33
  def verify(*_arg0); end

  class << self
    # @private
    #
    # source://jwt//lib/jwt/jwa/signing_algorithm.rb#15
    def included(klass); end
  end
end

# Class methods for the SigningAlgorithm module
#
# source://jwt//lib/jwt/jwa/signing_algorithm.rb#9
module JWT::JWA::SigningAlgorithm::ClassMethods
  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#10
  def register_algorithm(algo); end
end

# Represents an unsupported algorithm
#
# source://jwt//lib/jwt/jwa/unsupported.rb#6
module JWT::JWA::Unsupported
  extend ::JWT::JWA::SigningAlgorithm

  class << self
    # source://jwt//lib/jwt/jwa/unsupported.rb#10
    def sign(*_arg0); end

    # @raise [JWT::VerificationError]
    #
    # source://jwt//lib/jwt/jwa/unsupported.rb#14
    def verify(*_arg0); end
  end
end

# @api private
#
# source://jwt//lib/jwt/jwa.rb#17
class JWT::JWA::VerifierContext
  # @api private
  # @return [VerifierContext] a new instance of VerifierContext
  #
  # source://jwt//lib/jwt/jwa.rb#20
  def initialize(jwa:, keys:); end

  # @api private
  #
  # source://jwt//lib/jwt/jwa.rb#18
  def jwa; end

  # @api private
  #
  # source://jwt//lib/jwt/jwa.rb#25
  def verify(*args, **kwargs); end
end

# JSON Web Key (JWK)
#
# source://jwt//lib/jwt/jwk/kid_as_key_digest.rb#4
module JWT::JWK
  class << self
    # source://jwt//lib/jwt/jwk.rb#25
    def classes; end

    # source://jwt//lib/jwt/jwk.rb#10
    def create_from(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://jwt//lib/jwt/jwk.rb#31
    def import(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://jwt//lib/jwt/jwk.rb#30
    def new(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

    private

    # source://jwt//lib/jwt/jwk.rb#39
    def generate_mappings; end

    # source://jwt//lib/jwt/jwk.rb#35
    def mappings; end
  end
end

# JWK representation for Elliptic Curve (EC) keys
#
# source://jwt//lib/jwt/jwk/ec.rb#8
class JWT::JWK::EC < ::JWT::JWK::KeyBase
  # @return [EC] a new instance of EC
  #
  # source://jwt//lib/jwt/jwk/ec.rb#17
  def initialize(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/ec.rb#68
  def []=(key, value); end

  # source://jwt//lib/jwt/jwk/ec.rb#55
  def export(options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/ec.rb#74
  def jwa; end

  # source://jwt//lib/jwt/jwk/ec.rb#61
  def key_digest; end

  # source://jwt//lib/jwt/jwk/ec.rb#31
  def keypair; end

  # source://jwt//lib/jwt/jwk/ec.rb#51
  def members; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwk/ec.rb#35
  def private?; end

  # source://jwt//lib/jwt/jwk/ec.rb#47
  def public_key; end

  # source://jwt//lib/jwt/jwk/ec.rb#39
  def signing_key; end

  # source://jwt//lib/jwt/jwk/ec.rb#43
  def verify_key; end

  private

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/ec.rb#101
  def check_jwk_params!(key_params, params); end

  # source://jwt//lib/jwt/jwk/ec.rb#166
  def create_ec_key(jwk_crv, jwk_x, jwk_y, jwk_d); end

  # source://jwt//lib/jwt/jwk/ec.rb#146
  def create_point(jwk_crv, jwk_x, jwk_y); end

  # source://jwt//lib/jwt/jwk/ec.rb#197
  def decode_octets(base64_encoded_coordinate); end

  # source://jwt//lib/jwt/jwk/ec.rb#83
  def ec_key; end

  # source://jwt//lib/jwt/jwk/ec.rb#128
  def encode_octets(octets); end

  # source://jwt//lib/jwt/jwk/ec.rb#87
  def extract_key_params(key); end

  # source://jwt//lib/jwt/jwk/ec.rb#107
  def keypair_components(ec_keypair); end

  # source://jwt//lib/jwt/jwk/ec.rb#134
  def parse_ec_key(key); end

  class << self
    # source://jwt//lib/jwt/jwk/ec.rb#221
    def import(jwk_data); end

    # source://jwt//lib/jwt/jwk/ec.rb#225
    def to_openssl_curve(crv); end
  end
end

# source://jwt//lib/jwt/jwk/ec.rb#11
JWT::JWK::EC::BINARY = T.let(T.unsafe(nil), Integer)

# source://jwt//lib/jwt/jwk/ec.rb#14
JWT::JWK::EC::EC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/ec.rb#13
JWT::JWK::EC::EC_PRIVATE_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/ec.rb#12
JWT::JWK::EC::EC_PUBLIC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/ec.rb#9
JWT::JWK::EC::KTY = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/jwk/ec.rb#10
JWT::JWK::EC::KTYS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/ec.rb#15
JWT::JWK::EC::ZERO_BYTE = T.let(T.unsafe(nil), String)

# JWK for HMAC keys
#
# source://jwt//lib/jwt/jwk/hmac.rb#6
class JWT::JWK::HMAC < ::JWT::JWK::KeyBase
  # @return [HMAC] a new instance of HMAC
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#13
  def initialize(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#64
  def []=(key, value); end

  # See https://tools.ietf.org/html/rfc7517#appendix-A.3
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#48
  def export(options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/hmac.rb#58
  def key_digest; end

  # source://jwt//lib/jwt/jwk/hmac.rb#27
  def keypair; end

  # source://jwt//lib/jwt/jwk/hmac.rb#54
  def members; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#31
  def private?; end

  # source://jwt//lib/jwt/jwk/hmac.rb#35
  def public_key; end

  # source://jwt//lib/jwt/jwk/hmac.rb#43
  def signing_key; end

  # source://jwt//lib/jwt/jwk/hmac.rb#39
  def verify_key; end

  private

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#89
  def check_jwk(keypair, params); end

  # source://jwt//lib/jwt/jwk/hmac.rb#76
  def extract_key_params(key); end

  # source://jwt//lib/jwt/jwk/hmac.rb#72
  def secret; end

  class << self
    # source://jwt//lib/jwt/jwk/hmac.rb#96
    def import(jwk_data); end
  end
end

# source://jwt//lib/jwt/jwk/hmac.rb#11
JWT::JWK::HMAC::HMAC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/hmac.rb#10
JWT::JWK::HMAC::HMAC_PRIVATE_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/hmac.rb#9
JWT::JWK::HMAC::HMAC_PUBLIC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/hmac.rb#7
JWT::JWK::HMAC::KTY = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/jwk/hmac.rb#8
JWT::JWK::HMAC::KTYS = T.let(T.unsafe(nil), Array)

# Base for JWK implementations
#
# source://jwt//lib/jwt/jwk/key_base.rb#6
class JWT::JWK::KeyBase
  # @return [KeyBase] a new instance of KeyBase
  #
  # source://jwt//lib/jwt/jwk/key_base.rb#12
  def initialize(options, params = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/key_base.rb#55
  def <=>(other); end

  # source://jwt//lib/jwt/jwk/key_base.rb#41
  def ==(other); end

  # source://jwt//lib/jwt/jwk/key_base.rb#33
  def [](key); end

  # source://jwt//lib/jwt/jwk/key_base.rb#37
  def []=(key, value); end

  # source://jwt//lib/jwt/jwk/key_base.rb#53
  def eql?(other); end

  # source://jwt//lib/jwt/jwk/key_base.rb#29
  def hash; end

  # @raise [JWT::JWKError]
  #
  # source://jwt//lib/jwt/jwk/key_base.rb#61
  def jwa; end

  # source://jwt//lib/jwt/jwk/key_base.rb#25
  def kid; end

  # Returns the value of attribute parameters.
  #
  # source://jwt//lib/jwt/jwk/key_base.rb#69
  def parameters; end

  # source://jwt//lib/jwt/jwk/key_base.rb#49
  def sign(**kwargs); end

  # source://jwt//lib/jwt/jwk/key_base.rb#45
  def verify(**kwargs); end

  class << self
    # @private
    #
    # source://jwt//lib/jwt/jwk/key_base.rb#7
    def inherited(klass); end
  end
end

# JSON Web Key keyfinder
# To find the key for a given kid
#
# source://jwt//lib/jwt/jwk/key_finder.rb#7
class JWT::JWK::KeyFinder
  # Initializes a new KeyFinder instance.
  #
  # @option options
  # @option options
  # @option options
  # @param options [Hash] the options to create a KeyFinder with
  # @return [KeyFinder] a new instance of KeyFinder
  #
  # source://jwt//lib/jwt/jwk/key_finder.rb#15
  def initialize(options); end

  # Returns the key for the given token
  #
  # @param token [JWT::EncodedToken] the token
  # @raise [::JWT::DecodeError]
  #
  # source://jwt//lib/jwt/jwk/key_finder.rb#43
  def call(token); end

  # Returns the verification key for the given kid
  #
  # @param kid [String] the key id
  # @raise [::JWT::DecodeError]
  #
  # source://jwt//lib/jwt/jwk/key_finder.rb#30
  def key_for(kid, key_field = T.unsafe(nil)); end

  private

  # source://jwt//lib/jwt/jwk/key_finder.rb#58
  def resolve_key(kid, key_field); end
end

# @api private
#
# source://jwt//lib/jwt/jwk/kid_as_key_digest.rb#6
class JWT::JWK::KidAsKeyDigest
  # @api private
  # @return [KidAsKeyDigest] a new instance of KidAsKeyDigest
  #
  # source://jwt//lib/jwt/jwk/kid_as_key_digest.rb#7
  def initialize(jwk); end

  # @api private
  #
  # source://jwt//lib/jwt/jwk/kid_as_key_digest.rb#11
  def generate; end
end

# JSON Web Key (JWK) representation of a RSA key
#
# source://jwt//lib/jwt/jwk/rsa.rb#6
class JWT::JWK::RSA < ::JWT::JWK::KeyBase
  # @return [RSA] a new instance of RSA
  #
  # source://jwt//lib/jwt/jwk/rsa.rb#17
  def initialize(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/rsa.rb#68
  def []=(key, value); end

  # source://jwt//lib/jwt/jwk/rsa.rb#51
  def export(options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/rsa.rb#62
  def key_digest; end

  # source://jwt//lib/jwt/jwk/rsa.rb#31
  def keypair; end

  # source://jwt//lib/jwt/jwk/rsa.rb#58
  def members; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwk/rsa.rb#35
  def private?; end

  # source://jwt//lib/jwt/jwk/rsa.rb#39
  def public_key; end

  # source://jwt//lib/jwt/jwk/rsa.rb#43
  def signing_key; end

  # source://jwt//lib/jwt/jwk/rsa.rb#47
  def verify_key; end

  private

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/rsa.rb#94
  def check_jwk_params!(key_params, params); end

  # source://jwt//lib/jwt/jwk/rsa.rb#126
  def decode_open_ssl_bn(jwk_data); end

  # source://jwt//lib/jwt/jwk/rsa.rb#120
  def encode_open_ssl_bn(key_part); end

  # source://jwt//lib/jwt/jwk/rsa.rb#80
  def extract_key_params(key); end

  # source://jwt//lib/jwt/jwk/rsa.rb#114
  def jwk_attributes(*attributes); end

  # source://jwt//lib/jwt/jwk/rsa.rb#100
  def parse_rsa_key(key); end

  # source://jwt//lib/jwt/jwk/rsa.rb#76
  def rsa_key; end

  class << self
    # source://jwt//lib/jwt/jwk/rsa.rb#197
    def create_rsa_key(rsa_parameters); end

    # :nocov:
    # Before openssl 2.0, we need to use the accessors to set the key
    #
    # source://jwt//lib/jwt/jwk/rsa.rb#171
    def create_rsa_key_using_accessors(rsa_parameters); end

    # source://jwt//lib/jwt/jwk/rsa.rb#141
    def create_rsa_key_using_der(rsa_parameters); end

    # source://jwt//lib/jwt/jwk/rsa.rb#159
    def create_rsa_key_using_sets(rsa_parameters); end

    # source://jwt//lib/jwt/jwk/rsa.rb#135
    def decode_open_ssl_bn(jwk_data); end

    # source://jwt//lib/jwt/jwk/rsa.rb#131
    def import(jwk_data); end

    # :nocov:
    #
    # @raise [JWT::JWKError]
    #
    # source://jwt//lib/jwt/jwk/rsa.rb#187
    def validate_rsa_parameters!(rsa_parameters); end
  end
end

# source://jwt//lib/jwt/jwk/rsa.rb#7
JWT::JWK::RSA::BINARY = T.let(T.unsafe(nil), Integer)

# source://jwt//lib/jwt/jwk/rsa.rb#8
JWT::JWK::RSA::KTY = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/jwk/rsa.rb#9
JWT::JWK::RSA::KTYS = T.let(T.unsafe(nil), Array)

# https://www.rfc-editor.org/rfc/rfc3447#appendix-A.1.2
#
# source://jwt//lib/jwt/jwk/rsa.rb#15
JWT::JWK::RSA::RSA_ASN1_SEQUENCE = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/rsa.rb#12
JWT::JWK::RSA::RSA_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/rsa.rb#14
JWT::JWK::RSA::RSA_OPT_PARAMS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/rsa.rb#11
JWT::JWK::RSA::RSA_PRIVATE_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/rsa.rb#10
JWT::JWK::RSA::RSA_PUBLIC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# JSON Web Key Set (JWKS) representation
# https://tools.ietf.org/html/rfc7517
#
# source://jwt//lib/jwt/jwk/set.rb#9
class JWT::JWK::Set
  include ::Enumerable
  extend ::Forwardable

  # @return [Set] a new instance of Set
  #
  # source://jwt//lib/jwt/jwk/set.rb#15
  def initialize(jwks = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/set.rb#78
  def +(enum); end

  # source://jwt//lib/jwt/jwk/set.rb#79
  def <<(key); end

  # source://jwt//lib/jwt/jwk/set.rb#69
  def ==(other); end

  # source://jwt//lib/jwt/jwk/set.rb#64
  def add(key); end

  # source://jwt//lib/jwt/jwk/set.rb#37
  def delete(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/jwk/set.rb#37
  def dig(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/jwk/set.rb#37
  def each(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/jwk/set.rb#73
  def eql?(other); end

  # source://jwt//lib/jwt/jwk/set.rb#33
  def export(options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/set.rb#74
  def filter!(&block); end

  # Returns the value of attribute keys.
  #
  # source://jwt//lib/jwt/jwk/set.rb#13
  def keys; end

  # source://jwt//lib/jwt/jwk/set.rb#75
  def length(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/jwk/set.rb#55
  def merge(enum); end

  # source://jwt//lib/jwt/jwk/set.rb#45
  def reject!(&block); end

  # source://jwt//lib/jwt/jwk/set.rb#39
  def select!(&block); end

  # source://jwt//lib/jwt/jwk/set.rb#37
  def size(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/jwk/set.rb#60
  def union(enum); end

  # source://jwt//lib/jwt/jwk/set.rb#51
  def uniq!(&block); end

  # For symbolic manipulation
  #
  # source://jwt//lib/jwt/jwk/set.rb#77
  def |(enum); end
end

# https://tools.ietf.org/html/rfc7638
#
# source://jwt//lib/jwt/jwk/thumbprint.rb#6
class JWT::JWK::Thumbprint
  # @return [Thumbprint] a new instance of Thumbprint
  #
  # source://jwt//lib/jwt/jwk/thumbprint.rb#9
  def initialize(jwk); end

  # source://jwt//lib/jwt/jwk/thumbprint.rb#13
  def generate; end

  # Returns the value of attribute jwk.
  #
  # source://jwt//lib/jwt/jwk/thumbprint.rb#7
  def jwk; end

  # source://jwt//lib/jwt/jwk/thumbprint.rb#23
  def to_s; end
end

# The JWKError class is raised when there is an error with the JSON Web Key (JWK).
#
# source://jwt//lib/jwt/error.rb#53
class JWT::JWKError < ::JWT::DecodeError; end

# The MissingRequiredClaim class is raised when a required claim is missing from the JWT.
#
# source://jwt//lib/jwt/error.rb#47
class JWT::MissingRequiredClaim < ::JWT::DecodeError; end

# Represents a JWT token
#
# Basic token signed using the HS256 algorithm:
#
#   token = JWT::Token.new(payload: {pay: 'load'})
#   token.sign!(algorithm: 'HS256', key: 'secret')
#   token.jwt # => eyJhb....
#
# Custom headers will be combined with generated headers:
#   token = JWT::Token.new(payload: {pay: 'load'}, header: {custom: "value"})
#   token.sign!(algorithm: 'HS256', key: 'secret')
#   token.header # => {"custom"=>"value", "alg"=>"HS256"}
#
# source://jwt//lib/jwt/token.rb#17
class JWT::Token
  # Initializes a new Token instance.
  #
  # @param header [Hash] the header of the JWT token.
  # @param payload [Hash] the payload of the JWT token.
  # @return [Token] a new instance of Token
  #
  # source://jwt//lib/jwt/token.rb#22
  def initialize(payload:, header: T.unsafe(nil)); end

  # Returns the errors of the claims of the token.
  #
  # @param options [Array<Symbol>, Hash] the claims to verify.
  # @return [Array<Symbol>] the errors of the claims.
  #
  # source://jwt//lib/jwt/token.rb#115
  def claim_errors(*options); end

  # Detaches the payload according to https://datatracker.ietf.org/doc/html/rfc7515#appendix-F
  #
  # source://jwt//lib/jwt/token.rb#82
  def detach_payload!; end

  # Returns the encoded header of the JWT token.
  #
  # @return [String] the encoded header of the JWT token.
  #
  # source://jwt//lib/jwt/token.rb#49
  def encoded_header; end

  # Returns the encoded payload of the JWT token.
  #
  # @return [String] the encoded payload of the JWT token.
  #
  # source://jwt//lib/jwt/token.rb#61
  def encoded_payload; end

  # Returns the encoded signature of the JWT token.
  #
  # @return [String] the encoded signature of the JWT token.
  #
  # source://jwt//lib/jwt/token.rb#37
  def encoded_signature; end

  # Returns the decoded header of the JWT token.
  #
  # @return [Hash] the header of the JWT token.
  #
  # source://jwt//lib/jwt/token.rb#44
  def header; end

  # Returns the JWT token as a string.
  #
  # @raise [JWT::EncodeError] if the token is not signed or other encoding issues
  # @return [String] the JWT token as a string.
  #
  # source://jwt//lib/jwt/token.rb#76
  def jwt; end

  # Returns the payload of the JWT token.
  #
  # @return [Hash] the payload of the JWT token.
  #
  # source://jwt//lib/jwt/token.rb#56
  def payload; end

  # Signs the JWT token.
  #
  # @param key [String, JWT::JWK::KeyBase] the key to use for signing.
  # @param algorithm [String, Object] the algorithm to use for signing.
  # @raise [JWT::EncodeError] if the token is already signed or other problems when signing
  # @return [void]
  #
  # source://jwt//lib/jwt/token.rb#94
  def sign!(key:, algorithm:); end

  # Returns the decoded signature of the JWT token.
  #
  # @return [String] the decoded signature of the JWT token.
  #
  # source://jwt//lib/jwt/token.rb#30
  def signature; end

  # Returns the signing input of the JWT token.
  #
  # @return [String] the signing input of the JWT token.
  #
  # source://jwt//lib/jwt/token.rb#68
  def signing_input; end

  # Returns the JWT token as a string.
  # Returns the JWT token as a string.
  #
  # @raise [JWT::EncodeError] if the token is not signed or other encoding issues
  # @return [String] the JWT token as a string.
  # @return [String] the JWT token as a string.
  #
  # source://jwt//lib/jwt/token.rb#129
  def to_s; end

  # Returns whether the claims of the token are valid.
  #
  # @param options [Array<Symbol>, Hash] the claims to verify.
  # @return [Boolean] whether the claims are valid.
  #
  # source://jwt//lib/jwt/token.rb#122
  def valid_claims?(*options); end

  # Verifies the claims of the token.
  #
  # @param options [Array<Symbol>, Hash] the claims to verify.
  # @raise [JWT::DecodeError] if the claims are invalid.
  #
  # source://jwt//lib/jwt/token.rb#108
  def verify_claims!(*options); end
end

# The UnsupportedEcdsaCurve class is raised when the ECDSA curve is unsupported.
#
# source://jwt//lib/jwt/error.rb#26
class JWT::UnsupportedEcdsaCurve < ::JWT::IncorrectAlgorithm; end

# Version constants
#
# source://jwt//lib/jwt/version.rb#16
module JWT::VERSION; end

# source://jwt//lib/jwt/version.rb#17
JWT::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# source://jwt//lib/jwt/version.rb#18
JWT::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# source://jwt//lib/jwt/version.rb#20
JWT::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# source://jwt//lib/jwt/version.rb#22
JWT::VERSION::STRING = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/version.rb#19
JWT::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# The VerificationError class is raised when there is an error verifying a JWT.
#
# source://jwt//lib/jwt/error.rb#11
class JWT::VerificationError < ::JWT::DecodeError; end

# If the x5c header certificate chain can be validated by trusted root
# certificates, and none of the certificates are revoked, returns the public
# key from the first certificate.
# See https://tools.ietf.org/html/rfc7515#section-4.1.6
#
# source://jwt//lib/jwt/x5c_key_finder.rb#8
class JWT::X5cKeyFinder
  # @raise [ArgumentError]
  # @return [X5cKeyFinder] a new instance of X5cKeyFinder
  #
  # source://jwt//lib/jwt/x5c_key_finder.rb#9
  def initialize(root_certificates, crls = T.unsafe(nil)); end

  # source://jwt//lib/jwt/x5c_key_finder.rb#15
  def from(x5c_header_or_certificates); end

  private

  # source://jwt//lib/jwt/x5c_key_finder.rb#33
  def build_store(root_certificates, crls); end

  # source://jwt//lib/jwt/x5c_key_finder.rb#42
  def parse_certificates(x5c_header_or_certificates); end
end
