# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `semantic` gem.
# Please instead update this file by running `bin/tapioca gem semantic`.

# See: http://semver.org
module Semantic; end

# source://semantic//lib/semantic.rb#2
Semantic::GEM_VERSION = T.let(T.unsafe(nil), String)

class Semantic::Version
  include ::Comparable

  # @raise [ArgumentError]
  # @return [Version] a new instance of Version
  #
  # source://semantic//lib/semantic/version.rb#12
  def initialize(version_str); end

  # source://semantic//lib/semantic/version.rb#83
  def <=>(other_version); end

  # Returns the value of attribute build.
  #
  # source://semantic//lib/semantic/version.rb#10
  def build; end

  # source://semantic//lib/semantic/version.rb#25
  def build=(b); end

  # source://semantic//lib/semantic/version.rb#35
  def compare_pre(prea, preb); end

  # @return [Boolean]
  #
  # source://semantic//lib/semantic/version.rb#79
  def eql?(other_version); end

  # source://semantic//lib/semantic/version.rb#75
  def hash; end

  # source://semantic//lib/semantic/version.rb#29
  def identifiers(pre); end

  # source://semantic//lib/semantic/version.rb#123
  def increment!(term); end

  # Returns the value of attribute major.
  #
  # source://semantic//lib/semantic/version.rb#9
  def major; end

  # source://semantic//lib/semantic/version.rb#120
  def major!; end

  # Sets the attribute major
  #
  # @param value the value to set the attribute major to.
  #
  # source://semantic//lib/semantic/version.rb#9
  def major=(_arg0); end

  # Returns the value of attribute minor.
  #
  # source://semantic//lib/semantic/version.rb#9
  def minor; end

  # source://semantic//lib/semantic/version.rb#120
  def minor!; end

  # Sets the attribute minor
  #
  # @param value the value to set the attribute minor to.
  #
  # source://semantic//lib/semantic/version.rb#9
  def minor=(_arg0); end

  # Returns the value of attribute patch.
  #
  # source://semantic//lib/semantic/version.rb#9
  def patch; end

  # source://semantic//lib/semantic/version.rb#120
  def patch!; end

  # Sets the attribute patch
  #
  # @param value the value to set the attribute patch to.
  #
  # source://semantic//lib/semantic/version.rb#9
  def patch=(_arg0); end

  # Returns the value of attribute pre.
  #
  # source://semantic//lib/semantic/version.rb#9
  def pre; end

  # Sets the attribute pre
  #
  # @param value the value to set the attribute pre to.
  #
  # source://semantic//lib/semantic/version.rb#9
  def pre=(_arg0); end

  # @raise [ArgumentError]
  # @return [Boolean]
  #
  # source://semantic//lib/semantic/version.rb#114
  def satisfied_by?(versions); end

  # @return [Boolean]
  #
  # source://semantic//lib/semantic/version.rb#94
  def satisfies?(other_version); end

  # source://semantic//lib/semantic/version.rb#55
  def to_a; end

  # source://semantic//lib/semantic/version.rb#55
  def to_array; end

  # source://semantic//lib/semantic/version.rb#66
  def to_h; end

  # source://semantic//lib/semantic/version.rb#66
  def to_hash; end

  # source://semantic//lib/semantic/version.rb#59
  def to_s; end

  # source://semantic//lib/semantic/version.rb#59
  def to_string; end

  private

  # source://semantic//lib/semantic/version.rb#138
  def pad_version_string(version_string); end

  # @return [Boolean]
  #
  # source://semantic//lib/semantic/version.rb#152
  def pessimistic_match?(other_version_string); end

  # @return [Boolean]
  #
  # source://semantic//lib/semantic/version.rb#162
  def satisfies_comparator?(comparator, other_version_string); end

  # @raise [ArgumentError]
  #
  # source://semantic//lib/semantic/version.rb#172
  def semverified(version_string); end

  # @return [Boolean]
  #
  # source://semantic//lib/semantic/version.rb#146
  def tilde_matches?(other_version_string); end
end

# source://semantic//lib/semantic/version.rb#6
Semantic::Version::SemVerRegexp = T.let(T.unsafe(nil), Regexp)
