# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `js-routes` gem.
# Please instead update this file by running `bin/tapioca gem js-routes`.

module JsRoutes
  class << self
    # source://js-routes//lib/js_routes.rb#20
    def configuration; end

    # source://js-routes//lib/js_routes.rb#32
    def definitions(**opts); end

    # source://js-routes//lib/js_routes.rb#36
    def definitions!(file_name = T.unsafe(nil), **opts); end

    # source://js-routes//lib/js_routes.rb#24
    def generate(**opts); end

    # source://js-routes//lib/js_routes.rb#28
    def generate!(file_name = T.unsafe(nil), **opts); end

    # source://js-routes//lib/js_routes.rb#41
    def json(string); end

    # source://js-routes//lib/js_routes.rb#16
    def setup(&block); end
  end
end

class JsRoutes::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://js-routes//lib/js_routes/configuration.rb#24
  def initialize(attributes = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/configuration.rb#45
  def [](attribute); end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def application; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def application=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#30
  def assign(attributes = T.unsafe(nil), &block); end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def camel_case; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def camel_case=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def compact; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def compact=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def default_url_options; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def default_url_options=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def documentation; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def documentation=(_arg0); end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/configuration.rb#61
  def dts?; end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/configuration.rb#57
  def esm?; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def exclude; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def exclude=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def file; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def file=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def include; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def include=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#49
  def merge(attributes); end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/configuration.rb#65
  def modern?; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def module_type; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def module_type=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def namespace; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def namespace=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#77
  def output_file; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def prefix; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def prefix=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#69
  def require_esm; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def serializer; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def serializer=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#73
  def source_file; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def special_options_key; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def special_options_key=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#53
  def to_hash; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def url_links; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  def url_links=(_arg0); end

  protected

  # source://js-routes//lib/js_routes/configuration.rb#97
  def default_file_name; end

  # source://js-routes//lib/js_routes/configuration.rb#101
  def normalize; end

  # source://js-routes//lib/js_routes/configuration.rb#88
  def normalize_and_verify; end

  # source://js-routes//lib/js_routes/configuration.rb#93
  def pathname(*parts); end

  # source://js-routes//lib/js_routes/configuration.rb#105
  def verify; end
end

# source://js-routes//lib/js_routes/configuration.rb#5
JsRoutes::Configuration::DEFAULTS = T.let(T.unsafe(nil), Hash)

class JsRoutes::Engine < ::Rails::Engine; end
module JsRoutes::Generators; end

class JsRoutes::Generators::Middleware < ::Rails::Generators::Base
  # source://js-routes//lib/js_routes/generators/middleware.rb#7
  def create_middleware; end

  protected

  # source://js-routes//lib/js_routes/generators/middleware.rb#45
  def gitignore_content; end

  # source://js-routes//lib/js_routes/generators/middleware.rb#26
  def middleware_content; end

  # source://js-routes//lib/js_routes/generators/middleware.rb#19
  def pack_content; end

  # source://js-routes//lib/js_routes/generators/middleware.rb#35
  def rakefile_content; end
end

class JsRoutes::Generators::Webpacker < ::Rails::Generators::Base
  # source://js-routes//lib/js_routes/generators/webpacker.rb#7
  def create_webpack; end

  protected

  # source://js-routes//lib/js_routes/generators/webpacker.rb#26
  def loader_content; end

  # source://js-routes//lib/js_routes/generators/webpacker.rb#19
  def pack_content; end
end

class JsRoutes::Instance
  # Implementation
  #
  # @return [Instance] a new instance of Instance
  #
  # source://js-routes//lib/js_routes/instance.rb#12
  def initialize(options = T.unsafe(nil)); end

  # Returns the value of attribute configuration.
  #
  # source://js-routes//lib/js_routes/instance.rb#7
  def configuration; end

  # source://js-routes//lib/js_routes/instance.rb#16
  def generate; end

  # source://js-routes//lib/js_routes/instance.rb#32
  def generate!; end

  protected

  # source://js-routes//lib/js_routes/instance.rb#158
  def app_from_route(route); end

  # source://js-routes//lib/js_routes/instance.rb#89
  def application; end

  # source://js-routes//lib/js_routes/instance.rb#136
  def export_separator; end

  # source://js-routes//lib/js_routes/instance.rb#52
  def js_variables; end

  # source://js-routes//lib/js_routes/instance.rb#93
  def json(string); end

  # source://js-routes//lib/js_routes/instance.rb#146
  def mounted_app_routes(route); end

  # source://js-routes//lib/js_routes/instance.rb#97
  def named_routes; end

  # source://js-routes//lib/js_routes/instance.rb#127
  def prevent_types_export; end

  # source://js-routes//lib/js_routes/instance.rb#169
  def route_helpers_if_match(route, parent_route = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/instance.rb#120
  def routes_export; end

  # source://js-routes//lib/js_routes/instance.rb#140
  def routes_list; end

  # source://js-routes//lib/js_routes/instance.rb#101
  def routes_object; end

  # source://js-routes//lib/js_routes/instance.rb#109
  def static_exports; end

  # source://js-routes//lib/js_routes/instance.rb#69
  def wrapper_variable; end
end

# A Rack middleware that automatically updates routes file
# whenever routes.rb is modified
#
# Inspired by
# https://github.com/fnando/i18n-js/blob/main/lib/i18n/js/middleware.rb
class JsRoutes::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://js-routes//lib/js_routes/middleware.rb#8
  def initialize(app); end

  # source://js-routes//lib/js_routes/middleware.rb#14
  def call(env); end

  protected

  # source://js-routes//lib/js_routes/middleware.rb#29
  def regenerate; end

  # source://js-routes//lib/js_routes/middleware.rb#34
  def routes_mtime; end

  # source://js-routes//lib/js_routes/middleware.rb#21
  def update_js_routes; end
end

class JsRoutes::Route
  # @return [Route] a new instance of Route
  #
  # source://js-routes//lib/js_routes/route.rb#18
  def initialize(configuration, route, parent_route = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/route.rb#35
  def body(absolute); end

  # Returns the value of attribute configuration.
  #
  # source://js-routes//lib/js_routes/route.rb#16
  def configuration; end

  # source://js-routes//lib/js_routes/route.rb#40
  def definition_body; end

  # source://js-routes//lib/js_routes/route.rb#30
  def helper_types; end

  # source://js-routes//lib/js_routes/route.rb#24
  def helpers; end

  # source://js-routes//lib/js_routes/route.rb#46
  def optional_parts_type; end

  # Returns the value of attribute parent_route.
  #
  # source://js-routes//lib/js_routes/route.rb#16
  def parent_route; end

  # Returns the value of attribute route.
  #
  # source://js-routes//lib/js_routes/route.rb#16
  def route; end

  protected

  # source://js-routes//lib/js_routes/route.rb#137
  def apply_case(*values); end

  # source://js-routes//lib/js_routes/route.rb#53
  def arguments(absolute); end

  # source://js-routes//lib/js_routes/route.rb#103
  def base_arguments; end

  # source://js-routes//lib/js_routes/route.rb#61
  def base_name; end

  # source://js-routes//lib/js_routes/route.rb#83
  def documentation; end

  # source://js-routes//lib/js_routes/route.rb#127
  def documentation_params; end

  # source://js-routes//lib/js_routes/route.rb#78
  def helper_name(absolute); end

  # source://js-routes//lib/js_routes/route.rb#74
  def json(value); end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/route.rb#133
  def match?(matchers); end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/route.rb#57
  def match_configuration?; end

  # source://js-routes//lib/js_routes/route.rb#99
  def optional_parts; end

  # source://js-routes//lib/js_routes/route.rb#66
  def parent_spec; end

  # source://js-routes//lib/js_routes/route.rb#107
  def parts_table; end

  # source://js-routes//lib/js_routes/route.rb#95
  def required_parts; end

  # This function serializes Journey route into JSON structure
  # We do not use Hash for human readable serialization
  # And preffer Array serialization because it is shorter.
  # Routes.js file will be smaller.
  #
  # source://js-routes//lib/js_routes/route.rb#146
  def serialize(spec, parent_spec = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/route.rb#164
  def serialize_spec(spec, parent_spec = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/route.rb#70
  def spec; end
end

# source://js-routes//lib/js_routes/route.rb#3
JsRoutes::Route::FILTERED_DEFAULT_PARTS = T.let(T.unsafe(nil), Array)

# source://js-routes//lib/js_routes/route.rb#5
JsRoutes::Route::NODE_TYPES = T.let(T.unsafe(nil), Hash)

# source://js-routes//lib/js_routes/route.rb#4
JsRoutes::Route::URL_OPTIONS = T.let(T.unsafe(nil), Array)

class JsRoutes::SprocketsExtension
  # @return [SprocketsExtension] a new instance of SprocketsExtension
  #
  # source://js-routes//lib/js_routes/engine.rb#3
  def initialize(filename, &block); end

  # source://js-routes//lib/js_routes/engine.rb#8
  def render(context, empty_hash_wtf); end

  class << self
    # source://js-routes//lib/js_routes/engine.rb#20
    def call(input); end

    # source://js-routes//lib/js_routes/engine.rb#12
    def run(filename, source, context); end
  end
end

# source://js-routes//lib/js_routes/version.rb#2
JsRoutes::VERSION = T.let(T.unsafe(nil), String)
