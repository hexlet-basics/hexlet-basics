# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `user_agent_parser` gem.
# Please instead update this file by running `bin/tapioca gem user_agent_parser`.

module UserAgentParser
  class << self
    # Parse the given +user_agent_string+, returning a +UserAgent+
    #
    # source://user_agent_parser//lib/user_agent_parser.rb#13
    def parse(user_agent_string, **args); end
  end
end

# source://user_agent_parser//lib/user_agent_parser.rb#10
UserAgentParser::DefaultPatternsPath = T.let(T.unsafe(nil), String)

class UserAgentParser::Device
  # @return [Device] a new instance of Device
  #
  # source://user_agent_parser//lib/user_agent_parser/device.rb#11
  def initialize(family = T.unsafe(nil), model = T.unsafe(nil), brand = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://user_agent_parser//lib/user_agent_parser/device.rb#25
  def ==(other); end

  # Returns the value of attribute brand.
  #
  # source://user_agent_parser//lib/user_agent_parser/device.rb#7
  def brand; end

  # @return [Boolean]
  #
  # source://user_agent_parser//lib/user_agent_parser/device.rb#25
  def eql?(other); end

  # Returns the value of attribute family.
  #
  # source://user_agent_parser//lib/user_agent_parser/device.rb#7
  def family; end

  # source://user_agent_parser//lib/user_agent_parser/device.rb#21
  def inspect; end

  # Returns the value of attribute model.
  #
  # source://user_agent_parser//lib/user_agent_parser/device.rb#7
  def model; end

  # Returns the value of attribute family.
  #
  # source://user_agent_parser//lib/user_agent_parser/device.rb#7
  def name; end

  # source://user_agent_parser//lib/user_agent_parser/device.rb#31
  def to_h; end

  # source://user_agent_parser//lib/user_agent_parser/device.rb#17
  def to_s; end
end

# source://user_agent_parser//lib/user_agent_parser/device.rb#5
UserAgentParser::Device::DEFAULT_FAMILY = T.let(T.unsafe(nil), String)

class UserAgentParser::OperatingSystem
  # @return [OperatingSystem] a new instance of OperatingSystem
  #
  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#11
  def initialize(family = T.unsafe(nil), version = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#26
  def ==(other); end

  # @return [Boolean]
  #
  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#26
  def eql?(other); end

  # Returns the value of attribute family.
  #
  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#7
  def family; end

  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#22
  def inspect; end

  # Returns the value of attribute family.
  #
  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#7
  def name; end

  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#34
  def to_h; end

  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#16
  def to_s; end

  # Returns the value of attribute version.
  #
  # source://user_agent_parser//lib/user_agent_parser/operating_system.rb#7
  def version; end
end

# source://user_agent_parser//lib/user_agent_parser/operating_system.rb#5
UserAgentParser::OperatingSystem::DEFAULT_FAMILY = T.let(T.unsafe(nil), String)

class UserAgentParser::Parser
  extend ::Gem::Deprecate

  # @return [Parser] a new instance of Parser
  #
  # source://user_agent_parser//lib/user_agent_parser/parser.rb#29
  def initialize(patterns_path: T.unsafe(nil), patterns_paths: T.unsafe(nil)); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#42
  def _deprecated_patterns_path; end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#36
  def parse(user_agent); end

  def patterns_path(*args, **_arg1, &block); end

  # Returns the value of attribute patterns_paths.
  #
  # source://user_agent_parser//lib/user_agent_parser/parser.rb#27
  def patterns_paths; end

  private

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#128
  def device_from_pattern_match(pattern, match); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#109
  def first_pattern_match(patterns, value); end

  # Maps replacement keys to their values
  #
  # source://user_agent_parser//lib/user_agent_parser/parser.rb#153
  def from_pattern_match(keys, pattern, match); end

  # Interpolates a string with data from matches if specified
  #
  # source://user_agent_parser//lib/user_agent_parser/parser.rb#166
  def interpolate(replacement, match); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#49
  def load_patterns(patterns_paths); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#58
  def load_patterns_file(path); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#122
  def os_from_pattern_match(pattern, match); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#99
  def parse_device(user_agent); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#89
  def parse_os(user_agent); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#71
  def parse_pattern(patterns); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#79
  def parse_ua(user_agent, os = T.unsafe(nil), device = T.unsafe(nil)); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#116
  def user_agent_from_pattern_match(pattern, match, os = T.unsafe(nil), device = T.unsafe(nil)); end

  # source://user_agent_parser//lib/user_agent_parser/parser.rb#174
  def version_from_segments(*segments); end
end

# source://user_agent_parser//lib/user_agent_parser/parser.rb#9
UserAgentParser::Parser::FAMILY_REPLACEMENT_KEYS = T.let(T.unsafe(nil), Array)

# source://user_agent_parser//lib/user_agent_parser/parser.rb#17
UserAgentParser::Parser::OS_REPLACEMENT_KEYS = T.let(T.unsafe(nil), Array)

class UserAgentParser::UserAgent
  # @return [UserAgent] a new instance of UserAgent
  #
  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#11
  def initialize(family = T.unsafe(nil), version = T.unsafe(nil), os = T.unsafe(nil), device = T.unsafe(nil)); end

  # @return [Boolean]
  #
  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#31
  def ==(other); end

  # Returns the value of attribute device.
  #
  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#7
  def device; end

  # @return [Boolean]
  #
  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#31
  def eql?(other); end

  # Returns the value of attribute family.
  #
  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#7
  def family; end

  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#24
  def inspect; end

  # Returns the value of attribute family.
  #
  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#7
  def name; end

  # Returns the value of attribute os.
  #
  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#7
  def os; end

  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#40
  def to_h; end

  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#18
  def to_s; end

  # Returns the value of attribute version.
  #
  # source://user_agent_parser//lib/user_agent_parser/user_agent.rb#7
  def version; end
end

# source://user_agent_parser//lib/user_agent_parser/user_agent.rb#5
UserAgentParser::UserAgent::DEFAULT_FAMILY = T.let(T.unsafe(nil), String)

class UserAgentParser::Version
  include ::Comparable

  # @return [Version] a new instance of Version
  #
  # source://user_agent_parser//lib/user_agent_parser/version.rb#16
  def initialize(*args); end

  # source://user_agent_parser//lib/user_agent_parser/version.rb#52
  def <=>(other); end

  # @return [Boolean]
  #
  # source://user_agent_parser//lib/user_agent_parser/version.rb#47
  def eql?(other); end

  # source://user_agent_parser//lib/user_agent_parser/version.rb#43
  def inspect; end

  # source://user_agent_parser//lib/user_agent_parser/version.rb#27
  def major; end

  # source://user_agent_parser//lib/user_agent_parser/version.rb#31
  def minor; end

  # source://user_agent_parser//lib/user_agent_parser/version.rb#35
  def patch; end

  # source://user_agent_parser//lib/user_agent_parser/version.rb#39
  def patch_minor; end

  # source://user_agent_parser//lib/user_agent_parser/version.rb#56
  def segments; end

  # source://user_agent_parser//lib/user_agent_parser/version.rb#60
  def to_h; end

  # Returns the value of attribute version.
  #
  # source://user_agent_parser//lib/user_agent_parser/version.rb#13
  def to_s; end

  # Returns the value of attribute version.
  #
  # source://user_agent_parser//lib/user_agent_parser/version.rb#13
  def version; end
end

# Private: Regex used to split string version string into major, minor,
# patch, and patch_minor.
#
# source://user_agent_parser//lib/user_agent_parser/version.rb#11
UserAgentParser::Version::SEGMENTS_REGEX = T.let(T.unsafe(nil), Regexp)
