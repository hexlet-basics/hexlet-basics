# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sshkit` gem.
# Please instead update this file by running `bin/tapioca gem sshkit`.


# source://sshkit//lib/core_ext/array.rb#1
class Array
  include ::Enumerable

  # source://sshkit//lib/core_ext/array.rb#2
  def extract_options!; end
end

# source://sshkit//lib/core_ext/hash.rb#1
class Hash
  include ::Enumerable

  # source://sshkit//lib/core_ext/hash.rb#2
  def symbolize_keys; end

  # source://sshkit//lib/core_ext/hash.rb#8
  def symbolize_keys!; end
end

# source://sshkit//lib/sshkit/backends/netssh.rb#6
module Net::SSH
  class << self
    # source://net-ssh/7.3.0/lib/net/ssh.rb#298
    def assign_defaults(options); end

    # source://net-ssh/7.3.0/lib/net/ssh.rb#288
    def configuration_for(host, use_ssh_config); end

    # source://net-ssh/7.3.0/lib/net/ssh.rb#225
    def start(host, user = T.unsafe(nil), options = T.unsafe(nil), &block); end

    private

    # source://net-ssh/7.3.0/lib/net/ssh.rb#311
    def _sanitize_options(options); end

    # source://net-ssh/7.3.0/lib/net/ssh.rb#320
    def _support_deprecated_option_paranoid(options); end
  end
end

# source://sshkit//lib/sshkit/backends/netssh.rb#7
class Net::SSH::Config
  class << self
    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#60
    def default_auth_methods; end

    # source://sshkit//lib/sshkit/backends/netssh.rb#11
    def default_files; end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#186
    def expandable_default_files; end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#68
    def for(host, files = T.unsafe(nil)); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#80
    def load(path, host, settings = T.unsafe(nil), base_dir = T.unsafe(nil)); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#176
    def translate(settings); end

    private

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#365
    def eval_match_conditions(condition, host, settings); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#353
    def included_file_paths(base_dir, config_paths); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#336
    def interpret_size(size); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#345
    def merge_challenge_response_with_keyboard_interactive(hash); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#316
    def pattern2regex(pattern); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#301
    def setup_proxy(type, value); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#361
    def tokenize_config_value(str); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#235
    def translate_config_key(hash, key, value, settings); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#208
    def translate_keepalive(hash, value); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#197
    def translate_verify_host_key(value); end

    # source://net-ssh/7.3.0/lib/net/ssh/config.rb#400
    def unquote(string); end
  end
end

module Net::SSH::Proxy; end

# source://sshkit//lib/sshkit/backends/connection_pool.rb#15
class Net::SSH::Proxy::Command
  # source://net-ssh/7.3.0/lib/net/ssh/proxy/command.rb#32
  def initialize(command_line_template); end

  # source://net-ssh/7.3.0/lib/net/ssh/proxy/command.rb#116
  def close_on_error(io); end

  # source://net-ssh/7.3.0/lib/net/ssh/proxy/command.rb#23
  def command_line; end

  # source://net-ssh/7.3.0/lib/net/ssh/proxy/command.rb#20
  def command_line_template; end

  # Ensure a stable string value is used, rather than memory address.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#17
  def inspect; end

  # source://net-ssh/7.3.0/lib/net/ssh/proxy/command.rb#40
  def open(host, port, connection_options = T.unsafe(nil)); end

  # source://net-ssh/7.3.0/lib/net/ssh/proxy/command.rb#26
  def timeout; end

  # source://net-ssh/7.3.0/lib/net/ssh/proxy/command.rb#26
  def timeout=(_arg0); end
end

# Â @author Lee Hambley
#
# source://sshkit//lib/sshkit.rb#1
module SSHKit
  class << self
    # source://sshkit//lib/sshkit.rb#14
    def config; end

    # Sets the attribute config
    #
    # @param value the value to set the attribute config to.
    #
    # source://sshkit//lib/sshkit.rb#7
    def config=(_arg0); end

    # @yield [config]
    #
    # source://sshkit//lib/sshkit.rb#9
    def configure; end

    # source://sshkit//lib/sshkit.rb#18
    def reset_configuration!; end
  end
end

# source://sshkit//lib/sshkit/backends/abstract.rb#5
module SSHKit::Backend
  class << self
    # The Backend instance that is running in the current thread. If no Backend
    # is running, returns `nil` instead.
    #
    # Example:
    #
    #   on(:local) do
    #     self == SSHKit::Backend.current # => true
    #   end
    #
    # source://sshkit//lib/sshkit/backends/abstract.rb#18
    def current; end
  end
end

# source://sshkit//lib/sshkit/backends/abstract.rb#22
class SSHKit::Backend::Abstract
  extend ::Forwardable

  # @return [Abstract] a new instance of Abstract
  #
  # source://sshkit//lib/sshkit/backends/abstract.rb#36
  def initialize(host, &block); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#105
  def as(who, &_block); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#70
  def background(*args); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#64
  def capture(*args); end

  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#13
  def capture_with_debug(*args, **kwargs); end

  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#9
  def capture_with_info(*args, **kwargs); end

  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#17
  def capture_with_pretty_json(*args, **kwargs); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def debug(*args, **_arg1, &block); end

  # @raise [MethodUnavailableError]
  #
  # source://sshkit//lib/sshkit/backends/abstract.rb#137
  def download!(_remote, _local = T.unsafe(nil), _options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def error(*args, **_arg1, &block); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#78
  def execute(*args); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def fatal(*args, **_arg1, &block); end

  # Returns the value of attribute host.
  #
  # source://sshkit//lib/sshkit/backends/abstract.rb#27
  def host; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def info(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def log(*args, **_arg1, &block); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#51
  def make(commands = T.unsafe(nil)); end

  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#21
  def puts_by_host(host, output, type: T.unsafe(nil)); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#55
  def rake(commands = T.unsafe(nil)); end

  # Used in execute_command to hide redact() args a user passes in
  #
  # source://sshkit//lib/sshkit/backends/abstract.rb#47
  def redact(arg); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#29
  def run; end

  # source://sshkit//lib/sshkit/backends/abstract.rb#59
  def test(*args); end

  # Backends which extend the Abstract backend should implement the following methods:
  #
  # @raise [MethodUnavailableError]
  #
  # source://sshkit//lib/sshkit/backends/abstract.rb#136
  def upload!(_local, _remote, _options = T.unsafe(nil)); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def warn(*args, **_arg1, &block); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#97
  def with(environment, &_block); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#83
  def within(directory, &_block); end

  private

  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#36
  def command(args, options); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#147
  def create_command_and_execute(args, options); end

  # @raise [MethodUnavailableError]
  #
  # source://sshkit//lib/sshkit/backends/abstract.rb#138
  def execute_command(_cmd); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#143
  def output; end

  # source://sshkit//lib/sshkit/backends/abstract.rb#151
  def pwd_path; end

  class << self
    # source://sshkit//lib/sshkit/backends/abstract.rb#126
    def config; end

    # @yield [config]
    #
    # source://sshkit//lib/sshkit/backends/abstract.rb#130
    def configure; end
  end
end

# The ConnectionPool caches connections and allows them to be reused, so long as
# the reuse happens within the `idle_timeout` period. Timed out connections are
# eventually closed, forcing a new connection to be used in that case.
#
# Additionally, a background thread is started to check for abandoned
# connections that have timed out without any attempt at being reused. These
# are eventually closed as well and removed from the cache.
#
# If `idle_timeout` set to `false`, `0`, or `nil`, no caching is performed, and
# a new connection is created and then immediately closed each time. The default
# timeout is 30 (seconds).
#
# There is a single public method: `with`. Example usage:
#
#   pool = SSHKit::Backend::ConnectionPool.new
#   pool.with(Net::SSH.method(:start), "host", "username") do |connection|
#     # do stuff with connection
#   end
#
# source://sshkit//lib/sshkit/backends/connection_pool.rb#41
class SSHKit::Backend::ConnectionPool
  # @return [ConnectionPool] a new instance of ConnectionPool
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#44
  def initialize(idle_timeout = T.unsafe(nil)); end

  # Immediately close all cached connections and empty the pool.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#80
  def close_connections; end

  # Immediately remove all cached connections, without closing them. This only
  # exists for unit test purposes.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#75
  def flush_connections; end

  # Returns the value of attribute idle_timeout.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#42
  def idle_timeout; end

  # Sets the attribute idle_timeout
  #
  # @param value the value to set the attribute idle_timeout to.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#42
  def idle_timeout=(_arg0); end

  # Creates a new connection or reuses a cached connection (if possible) and
  # yields the connection to the given block. Connections are created by
  # invoking the `connection_factory` proc with the given `args`. The arguments
  # are used to construct a key used for caching.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#60
  def with(connection_factory, *args); end

  protected

  # Returns the value of attribute caches.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#90
  def caches; end

  # Returns the value of attribute timed_out_connections.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#90
  def timed_out_connections; end

  private

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#98
  def cache_enabled?; end

  # source://sshkit//lib/sshkit/backends/connection_pool.rb#94
  def cache_key_for_connection_args(args); end

  # Look up a Cache that matches the given connection arguments.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#103
  def find_cache(args); end

  # Immediately close any connections that are pending closure.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#147
  def process_deferred_close; end

  # Loops indefinitely to close connections and to find abandoned connections
  # that need to be closed.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#135
  def run_eviction_loop; end

  # Close the given `connection` immediately, assuming it responds to a `close`
  # method. If it doesn't, or if `nil` is provided, it is silently ignored. Any
  # `StandardError` is also silently ignored. Returns `true` if the connection
  # was closed; `false` if it was already closed or could not be closed due to
  # an error.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#172
  def silently_close_connection(connection); end

  # Adds the connection to a queue that is processed asynchronously by a
  # background thread. The connection will eventually be closed.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#163
  def silently_close_connection_later(connection); end

  # Cache creation needs to happen in a mutex, because otherwise a race
  # condition might cause two identical caches to be created for the same key.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#114
  def thread_safe_find_or_create_cache(key); end

  # Update cache key with changed args to prevent cache miss
  #
  # source://sshkit//lib/sshkit/backends/connection_pool.rb#123
  def update_key_if_args_changed(cache, args); end
end

# A Cache holds connections for a given key. Each connection is stored along
# with an expiration time so that its idle duration can be measured.
#
# source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#3
class SSHKit::Backend::ConnectionPool::Cache
  # @return [Cache] a new instance of Cache
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#6
  def initialize(key, idle_timeout, closer); end

  # Close all connections and completely clear the cache.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#52
  def clear; end

  # Close and remove any connections in this Cache that have been idle for
  # too long.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#36
  def evict; end

  # Returns the value of attribute key.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#4
  def key; end

  # Sets the attribute key
  #
  # @param value the value to set the attribute key to.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#4
  def key=(_arg0); end

  # Remove and return a fresh connection from this Cache. Returns `nil` if
  # the Cache is empty or if all existing connections have gone stale.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#16
  def pop; end

  # Return a connection to this Cache.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#25
  def push(conn); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#59
  def same_key?(other_key); end

  protected

  # Returns the value of attribute closer.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#65
  def closer; end

  # Returns the value of attribute connections.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#65
  def connections; end

  # Returns the value of attribute idle_timeout.
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#65
  def idle_timeout; end

  private

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#73
  def closed?(conn); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/backends/connection_pool/cache.rb#69
  def fresh?(expires_at); end
end

# source://sshkit//lib/sshkit/backends/connection_pool/nil_cache.rb#3
class SSHKit::Backend::ConnectionPool::NilCache < ::Struct
  def closer; end
  def closer=(_); end

  # source://sshkit//lib/sshkit/backends/connection_pool/nil_cache.rb#4
  def pop; end

  # source://sshkit//lib/sshkit/backends/connection_pool/nil_cache.rb#8
  def push(conn); end

  # source://sshkit//lib/sshkit/backends/connection_pool/nil_cache.rb#12
  def same_key?(_key); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://sshkit//lib/sshkit/backends/local.rb#7
class SSHKit::Backend::Local < ::SSHKit::Backend::Abstract
  # @return [Local] a new instance of Local
  #
  # source://sshkit//lib/sshkit/backends/local.rb#9
  def initialize(_ = T.unsafe(nil), &block); end

  # source://sshkit//lib/sshkit/backends/local.rb#28
  def download!(remote, local = T.unsafe(nil), _options = T.unsafe(nil)); end

  # source://sshkit//lib/sshkit/backends/local.rb#13
  def upload!(local, remote, options = T.unsafe(nil)); end

  private

  # source://sshkit//lib/sshkit/backends/local.rb#41
  def execute_command(cmd); end
end

# source://sshkit//lib/sshkit/backends/abstract.rb#7
class SSHKit::Backend::MethodUnavailableError < ::SSHKit::StandardError; end

# source://sshkit//lib/sshkit/backends/netssh.rb#23
class SSHKit::Backend::Netssh < ::SSHKit::Backend::Abstract
  extend ::SSHKit::Backend::Netssh::LimitConcurrentStartsClass

  # source://sshkit//lib/sshkit/backends/netssh.rb#87
  def download!(remote, local = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://sshkit//lib/sshkit/backends/netssh.rb#79
  def upload!(local, remote, options = T.unsafe(nil)); end

  private

  # source://sshkit//lib/sshkit/backends/netssh.rb#141
  def execute_command(cmd); end

  # source://sshkit//lib/sshkit/backends/netssh.rb#116
  def transfer_summarizer(action, options = T.unsafe(nil)); end

  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#83
  def with_ssh(&block); end

  # source://sshkit//lib/sshkit/backends/netssh.rb#201
  def with_transfer(summarizer); end

  class << self
    # @raise [ArgumentError]
    #
    # source://sshkit//lib/sshkit/backends/netssh.rb#24
    def assert_valid_transfer_method!(method); end

    # source://sshkit//lib/sshkit/backends/netssh.rb#109
    def config; end

    # @yield [config]
    #
    # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#68
    def configure(&block); end

    # Returns the value of attribute pool.
    #
    # source://sshkit//lib/sshkit/backends/netssh.rb#103
    def pool; end

    # Sets the attribute pool
    #
    # @param value the value to set the attribute pool to.
    #
    # source://sshkit//lib/sshkit/backends/netssh.rb#103
    def pool=(_arg0); end
  end
end

# source://sshkit//lib/sshkit/backends/netssh.rb#30
class SSHKit::Backend::Netssh::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://sshkit//lib/sshkit/backends/netssh.rb#35
  def initialize; end

  # Returns the value of attribute connection_timeout.
  #
  # source://sshkit//lib/sshkit/backends/netssh.rb#31
  def connection_timeout; end

  # Sets the attribute connection_timeout
  #
  # @param value the value to set the attribute connection_timeout to.
  #
  # source://sshkit//lib/sshkit/backends/netssh.rb#31
  def connection_timeout=(_arg0); end

  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#61
  def max_concurrent_starts; end

  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#61
  def max_concurrent_starts=(_arg0); end

  # Returns the value of attribute pty.
  #
  # source://sshkit//lib/sshkit/backends/netssh.rb#31
  def pty; end

  # Sets the attribute pty
  #
  # @param value the value to set the attribute pty to.
  #
  # source://sshkit//lib/sshkit/backends/netssh.rb#31
  def pty=(_arg0); end

  # source://sshkit//lib/sshkit/backends/netssh.rb#45
  def ssh_options; end

  # Sets the attribute ssh_options
  #
  # @param value the value to set the attribute ssh_options to.
  #
  # source://sshkit//lib/sshkit/backends/netssh.rb#33
  def ssh_options=(_arg0); end

  # Returns the value of attribute transfer_method.
  #
  # source://sshkit//lib/sshkit/backends/netssh.rb#32
  def transfer_method; end

  # source://sshkit//lib/sshkit/backends/netssh.rb#39
  def transfer_method=(method); end

  private

  # Set default options early for ConnectionPool cache key
  #
  # source://sshkit//lib/sshkit/backends/netssh.rb#64
  def assign_defaults; end

  # source://sshkit//lib/sshkit/backends/netssh.rb#52
  def default_options; end
end

# source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#113
class SSHKit::Backend::Netssh::KnownHosts
  # @return [KnownHosts] a new instance of KnownHosts
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#114
  def initialize; end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#127
  def add(*args); end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#120
  def search_for(host, options = T.unsafe(nil)); end

  private

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#134
  def known_hosts_file(path); end
end

# source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#9
class SSHKit::Backend::Netssh::KnownHostsKeys
  # @return [KnownHostsKeys] a new instance of KnownHostsKeys
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#10
  def initialize(path); end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#17
  def keys_for(hostlist); end

  private

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#92
  def empty_line?(scanner); end

  # Returns the value of attribute hosts_hashes.
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#41
  def hosts_hashes; end

  # Sets the attribute hosts_hashes
  #
  # @param value the value to set the attribute hosts_hashes to.
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#41
  def hosts_hashes=(_arg0); end

  # Returns the value of attribute hosts_keys.
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#41
  def hosts_keys; end

  # Sets the attribute hosts_keys
  #
  # @param value the value to set the attribute hosts_keys to.
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#41
  def hosts_keys=(_arg0); end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#47
  def parse_file; end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#87
  def parse_host_hash(line); end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#97
  def parse_hostlist(scanner); end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#107
  def parse_key(scanner); end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#71
  def parse_line(scanner, hosts_keys, hosts_hashes); end

  # Returns the value of attribute path.
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#40
  def path; end

  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#43
  def sha1; end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/backends/netssh/known_hosts.rb#102
  def supported_type?(scanner); end
end

# Printer is used to implement --dry-run in Capistrano
#
# source://sshkit//lib/sshkit/backends/printer.rb#5
class SSHKit::Backend::Printer < ::SSHKit::Backend::Abstract
  # source://sshkit//lib/sshkit/backends/abstract.rb#78
  def download!(*args); end

  # source://sshkit//lib/sshkit/backends/printer.rb#7
  def execute_command(cmd); end

  # source://sshkit//lib/sshkit/backends/printer.rb#14
  def test(*_arg0); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#78
  def upload!(*args); end
end

# source://sshkit//lib/sshkit/backends/skipper.rb#4
class SSHKit::Backend::Skipper < ::SSHKit::Backend::Abstract
  # @return [Skipper] a new instance of Skipper
  #
  # source://sshkit//lib/sshkit/backends/skipper.rb#6
  def initialize(&block); end

  # source://sshkit//lib/sshkit/backends/skipper.rb#17
  def debug(_messages); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#78
  def download!(*args); end

  # source://sshkit//lib/sshkit/backends/skipper.rb#17
  def error(_messages); end

  # source://sshkit//lib/sshkit/backends/skipper.rb#10
  def execute_command(cmd); end

  # source://sshkit//lib/sshkit/backends/skipper.rb#17
  def fatal(_messages); end

  # source://sshkit//lib/sshkit/backends/skipper.rb#17
  def info(_messages); end

  # suppress all messages except `warn`
  #
  # source://sshkit//lib/sshkit/backends/skipper.rb#17
  def log(_messages); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#78
  def test(*args); end

  # source://sshkit//lib/sshkit/backends/abstract.rb#78
  def upload!(*args); end
end

# Very basic support for ANSI color, so that we don't have to rely on
# any external dependencies. This class handles colorizing strings, and
# automatically disabling color if the underlying output is not a tty.
#
# source://sshkit//lib/sshkit/color.rb#6
class SSHKit::Color
  # @return [Color] a new instance of Color
  #
  # source://sshkit//lib/sshkit/color.rb#26
  def initialize(output, env = T.unsafe(nil)); end

  # Converts the given obj to string and surrounds in the appropriate ANSI
  # color escape sequence, based on the specified color and mode. The color
  # must be a symbol (see COLOR_CODES for a complete list).
  #
  # If the underlying output does not support ANSI color (see `colorize?),
  # the string will be not be colorized. Likewise if the specified color
  # symbol is unrecognized, the string will not be colorized.
  #
  # Note that the only mode currently support is :bold. All other values
  # will be silently ignored (i.e. treated the same as mode=nil).
  #
  # source://sshkit//lib/sshkit/color.rb#41
  def colorize(obj, color, mode = T.unsafe(nil)); end

  # Returns `true` if the underlying output is a tty, or if the SSHKIT_COLOR
  # environment variable is set.
  #
  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/color.rb#54
  def colorize?; end
end

# source://sshkit//lib/sshkit/color.rb#7
SSHKit::Color::COLOR_CODES = T.let(T.unsafe(nil), Hash)

# @author Lee Hambley
#
# source://sshkit//lib/sshkit/command.rb#9
class SSHKit::Command
  # Initialize a new Command object
  #
  # command name, with optional variadaric args
  # nothing in stdin or stdout
  #
  # @param A [Array] list of arguments, the first is considered to be the
  # @raise [ArgumentError]
  # @return [Command] An un-started command object with no exit staus, and
  #
  # source://sshkit//lib/sshkit/command.rb#22
  def initialize(*args); end

  # Returns the value of attribute args.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def args; end

  # Returns the value of attribute command.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def command; end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/command.rb#32
  def complete?; end

  # source://sshkit//lib/sshkit/command.rb#149
  def environment_hash; end

  # source://sshkit//lib/sshkit/command.rb#153
  def environment_string; end

  # Returns the value of attribute exit_status.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def exit_status; end

  # source://sshkit//lib/sshkit/command.rb#88
  def exit_status=(new_exit_status); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/command.rb#51
  def failed?; end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/command.rb#51
  def failure?; end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/command.rb#32
  def finished?; end

  # Returns the value of attribute full_stderr.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def full_stderr; end

  # Returns the value of attribute full_stdout.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def full_stdout; end

  # source://sshkit//lib/sshkit/command.rb#183
  def group(&_block); end

  # source://sshkit//lib/sshkit/command.rb#125
  def host; end

  # source://sshkit//lib/sshkit/command.rb#173
  def in_background(&_block); end

  # source://sshkit//lib/sshkit/command.rb#82
  def on_stderr(channel, data); end

  # source://sshkit//lib/sshkit/command.rb#76
  def on_stdout(channel, data); end

  # Returns the value of attribute options.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def options; end

  # source://sshkit//lib/sshkit/command.rb#101
  def runtime; end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/command.rb#140
  def should_map?; end

  # Returns the value of attribute started.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def started; end

  # source://sshkit//lib/sshkit/command.rb#41
  def started=(new_started); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/command.rb#37
  def started?; end

  # Returns the value of attribute started_at.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def started_at; end

  # source://sshkit//lib/sshkit/command.rb#66
  def stderr; end

  # source://sshkit//lib/sshkit/command.rb#71
  def stderr=(new_value); end

  # source://sshkit//lib/sshkit/command.rb#56
  def stdout; end

  # source://sshkit//lib/sshkit/command.rb#61
  def stdout=(new_value); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/command.rb#46
  def success?; end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/command.rb#46
  def successful?; end

  # source://sshkit//lib/sshkit/command.rb#190
  def to_command; end

  # source://sshkit//lib/sshkit/command.rb#106
  def to_hash; end

  # source://sshkit//lib/sshkit/command.rb#214
  def to_s; end

  # source://sshkit//lib/sshkit/command.rb#178
  def umask(&_block); end

  # source://sshkit//lib/sshkit/command.rb#167
  def user(&_block); end

  # Returns the value of attribute uuid.
  #
  # source://sshkit//lib/sshkit/command.rb#13
  def uuid; end

  # source://sshkit//lib/sshkit/command.rb#129
  def verbosity; end

  # source://sshkit//lib/sshkit/command.rb#161
  def with(&_block); end

  # source://sshkit//lib/sshkit/command.rb#207
  def with_redaction; end

  # source://sshkit//lib/sshkit/command.rb#144
  def within(&_block); end

  private

  # source://sshkit//lib/sshkit/command.rb#240
  def call_interaction_handler(stream_name, data, channel); end

  # source://sshkit//lib/sshkit/command.rb#229
  def default_options; end

  # source://sshkit//lib/sshkit/command.rb#246
  def log_reader_deprecation(stream); end

  # source://sshkit//lib/sshkit/command.rb#253
  def log_writer_deprecation(stream); end

  # source://sshkit//lib/sshkit/command.rb#236
  def sanitize_command(cmd); end

  class << self
    # allow using home directory but escape everything else like spaces etc
    #
    # source://sshkit//lib/sshkit/command.rb#223
    def shellescape_except_tilde(file); end
  end
end

# source://sshkit//lib/sshkit/command.rb#11
class SSHKit::Command::Failed < ::SSHKit::StandardError; end

# source://sshkit//lib/sshkit/command_map.rb#2
class SSHKit::CommandMap
  # @return [CommandMap] a new instance of CommandMap
  #
  # source://sshkit//lib/sshkit/command_map.rb#36
  def initialize(value = T.unsafe(nil)); end

  # source://sshkit//lib/sshkit/command_map.rb#40
  def [](command); end

  # source://sshkit//lib/sshkit/command_map.rb#55
  def []=(command, new_command); end

  # source://sshkit//lib/sshkit/command_map.rb#59
  def clear; end

  # source://sshkit//lib/sshkit/command_map.rb#63
  def defaults; end

  # source://sshkit//lib/sshkit/command_map.rb#51
  def prefix; end
end

# source://sshkit//lib/sshkit/command_map.rb#3
class SSHKit::CommandMap::CommandHash
  # @return [CommandHash] a new instance of CommandHash
  #
  # source://sshkit//lib/sshkit/command_map.rb#4
  def initialize(defaults = T.unsafe(nil)); end

  # source://sshkit//lib/sshkit/command_map.rb#9
  def [](key); end

  # source://sshkit//lib/sshkit/command_map.rb#13
  def []=(key, value); end

  private

  # source://sshkit//lib/sshkit/command_map.rb#19
  def normalize_key(key); end
end

# source://sshkit//lib/sshkit/command_map.rb#24
class SSHKit::CommandMap::PrefixProvider
  # @return [PrefixProvider] a new instance of PrefixProvider
  #
  # source://sshkit//lib/sshkit/command_map.rb#25
  def initialize; end

  # source://sshkit//lib/sshkit/command_map.rb#29
  def [](command); end
end

# source://sshkit//lib/sshkit/command_map.rb#34
SSHKit::CommandMap::TO_VALUE = T.let(T.unsafe(nil), Proc)

# source://sshkit//lib/sshkit/configuration.rb#3
class SSHKit::Configuration
  # source://sshkit//lib/sshkit/configuration.rb#42
  def backend; end

  # Sets the attribute backend
  #
  # @param value the value to set the attribute backend to.
  #
  # source://sshkit//lib/sshkit/configuration.rb#6
  def backend=(_arg0); end

  # source://sshkit//lib/sshkit/configuration.rb#79
  def command_map; end

  # source://sshkit//lib/sshkit/configuration.rb#83
  def command_map=(value); end

  # source://sshkit//lib/sshkit/configuration.rb#24
  def default_env; end

  # Sets the attribute default_env
  #
  # @param value the value to set the attribute default_env to.
  #
  # source://sshkit//lib/sshkit/configuration.rb#6
  def default_env=(_arg0); end

  # source://sshkit//lib/sshkit/configuration.rb#28
  def default_runner; end

  # Sets the attribute default_runner
  #
  # @param value the value to set the attribute default_runner to.
  #
  # source://sshkit//lib/sshkit/configuration.rb#6
  def default_runner=(_arg0); end

  # source://sshkit//lib/sshkit/configuration.rb#32
  def default_runner_config; end

  # source://sshkit//lib/sshkit/configuration.rb#36
  def default_runner_config=(config_hash); end

  # source://sshkit//lib/sshkit/configuration.rb#12
  def deprecation_logger; end

  # source://sshkit//lib/sshkit/configuration.rb#20
  def deprecation_output=(out); end

  # TODO: deprecate in favor of `use_format`
  #
  # source://sshkit//lib/sshkit/configuration.rb#55
  def format=(format); end

  # source://sshkit//lib/sshkit/configuration.rb#8
  def output; end

  # Sets the attribute output
  #
  # @param value the value to set the attribute output to.
  #
  # source://sshkit//lib/sshkit/configuration.rb#6
  def output=(_arg0); end

  # source://sshkit//lib/sshkit/configuration.rb#46
  def output_verbosity; end

  # source://sshkit//lib/sshkit/configuration.rb#50
  def output_verbosity=(verbosity); end

  # Returns the value of attribute umask.
  #
  # source://sshkit//lib/sshkit/configuration.rb#5
  def umask; end

  # Sets the attribute umask
  #
  # @param value the value to set the attribute umask to.
  #
  # source://sshkit//lib/sshkit/configuration.rb#5
  def umask=(_arg0); end

  # Tell SSHKit to use the specified `formatter` for stdout. The formatter
  # can be the name of a built-in SSHKit formatter, like `:pretty`, a
  # formatter class, like `SSHKit::Formatter::Pretty`, or a custom formatter
  # class you've written yourself.
  #
  # Additional arguments will be passed to the formatter's constructor.
  #
  # Example:
  #
  #   config.use_format(:pretty)
  #
  # Is equivalent to:
  #
  #   config.output = SSHKit::Formatter::Pretty.new($stdout)
  #
  # source://sshkit//lib/sshkit/configuration.rb#74
  def use_format(formatter, *args); end

  private

  # source://sshkit//lib/sshkit/configuration.rb#93
  def formatter_class(symbol); end

  # source://sshkit//lib/sshkit/configuration.rb#89
  def logger(verbosity); end
end

# source://sshkit//lib/sshkit/coordinator.rb#3
class SSHKit::Coordinator
  # @return [Coordinator] a new instance of Coordinator
  #
  # source://sshkit//lib/sshkit/coordinator.rb#7
  def initialize(raw_hosts); end

  # source://sshkit//lib/sshkit/coordinator.rb#12
  def each(options = T.unsafe(nil), &block); end

  # Returns the value of attribute hosts.
  #
  # source://sshkit//lib/sshkit/coordinator.rb#5
  def hosts; end

  # Sets the attribute hosts
  #
  # @param value the value to set the attribute hosts to.
  #
  # source://sshkit//lib/sshkit/coordinator.rb#5
  def hosts=(_arg0); end

  private

  # source://sshkit//lib/sshkit/coordinator.rb#29
  def default_options; end

  # source://sshkit//lib/sshkit/coordinator.rb#33
  def resolve_hosts; end
end

# source://sshkit//lib/sshkit/dsl.rb#3
module SSHKit::DSL
  # source://sshkit//lib/sshkit/dsl.rb#5
  def on(hosts, options = T.unsafe(nil), &block); end

  # source://sshkit//lib/sshkit/dsl.rb#9
  def run_locally(&block); end
end

# source://sshkit//lib/sshkit/deprecation_logger.rb#4
class SSHKit::DeprecationLogger
  # @return [DeprecationLogger] a new instance of DeprecationLogger
  #
  # source://sshkit//lib/sshkit/deprecation_logger.rb#5
  def initialize(out); end

  # source://sshkit//lib/sshkit/deprecation_logger.rb#10
  def log(message); end
end

# source://sshkit//lib/sshkit/formatters/abstract.rb#5
module SSHKit::Formatter; end

# source://sshkit//lib/sshkit/formatters/abstract.rb#7
class SSHKit::Formatter::Abstract
  extend ::Forwardable

  # @return [Abstract] a new instance of Abstract
  #
  # source://sshkit//lib/sshkit/formatters/abstract.rb#14
  def initialize(output, options = T.unsafe(nil)); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#39
  def <<(obj); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def colorize(*args, **_arg1, &block); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#21
  def debug(message); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#21
  def error(message); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#21
  def fatal(message); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#21
  def info(message); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#21
  def log(message); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#31
  def log_command_data(command, _stream_type, _stream_data); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#35
  def log_command_exit(command); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#27
  def log_command_start(command); end

  # Returns the value of attribute options.
  #
  # source://sshkit//lib/sshkit/formatters/abstract.rb#10
  def options; end

  # Returns the value of attribute original_output.
  #
  # source://sshkit//lib/sshkit/formatters/abstract.rb#10
  def original_output; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def read(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def rewind(*args, **_arg1, &block); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#21
  def warn(message); end

  # source://sshkit//lib/sshkit/formatters/abstract.rb#43
  def write(_obj); end
end

# source://sshkit//lib/sshkit/formatters/black_hole.rb#5
class SSHKit::Formatter::BlackHole < ::SSHKit::Formatter::Abstract
  # source://sshkit//lib/sshkit/formatters/black_hole.rb#7
  def write(_obj); end
end

# source://sshkit//lib/sshkit/formatters/dot.rb#5
class SSHKit::Formatter::Dot < ::SSHKit::Formatter::Abstract
  # source://sshkit//lib/sshkit/formatters/dot.rb#7
  def log_command_exit(command); end

  # source://sshkit//lib/sshkit/formatters/dot.rb#11
  def write(_obj); end
end

# source://sshkit//lib/sshkit/formatters/pretty.rb#5
class SSHKit::Formatter::Pretty < ::SSHKit::Formatter::Abstract
  # source://sshkit//lib/sshkit/formatters/pretty.rb#25
  def log_command_data(command, stream_type, stream_data); end

  # source://sshkit//lib/sshkit/formatters/pretty.rb#35
  def log_command_exit(command); end

  # source://sshkit//lib/sshkit/formatters/pretty.rb#18
  def log_command_start(command); end

  # source://sshkit//lib/sshkit/formatters/pretty.rb#10
  def write(obj); end

  protected

  # source://sshkit//lib/sshkit/formatters/pretty.rb#44
  def format_message(verbosity, message, uuid = T.unsafe(nil)); end

  private

  # source://sshkit//lib/sshkit/formatters/pretty.rb#52
  def write_message(verbosity, message, uuid = T.unsafe(nil)); end
end

# source://sshkit//lib/sshkit/formatters/pretty.rb#8
SSHKit::Formatter::Pretty::LEVEL_COLORS = T.let(T.unsafe(nil), Array)

# source://sshkit//lib/sshkit/formatters/pretty.rb#7
SSHKit::Formatter::Pretty::LEVEL_NAMES = T.let(T.unsafe(nil), Array)

# source://sshkit//lib/sshkit/formatters/simple_text.rb#5
class SSHKit::Formatter::SimpleText < ::SSHKit::Formatter::Pretty
  # Historically, SimpleText formatter was used to disable coloring, so we maintain that behaviour
  #
  # source://sshkit//lib/sshkit/formatters/simple_text.rb#8
  def colorize(obj, _color, _mode = T.unsafe(nil)); end

  # source://sshkit//lib/sshkit/formatters/simple_text.rb#12
  def format_message(_verbosity, message, _uuid = T.unsafe(nil)); end
end

# source://sshkit//lib/sshkit/host.rb#8
class SSHKit::Host
  # @return [Host] a new instance of Host
  #
  # source://sshkit//lib/sshkit/host.rb#25
  def initialize(host_string_or_options_hash); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/host.rb#64
  def ==(other_host); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/host.rb#64
  def eql?(other_host); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/host.rb#64
  def equal?(other_host); end

  # source://sshkit//lib/sshkit/host.rb#89
  def first_suitable_parser(host); end

  # source://sshkit//lib/sshkit/host.rb#56
  def hash; end

  # Returns the value of attribute hostname.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def hostname; end

  # Sets the attribute hostname
  #
  # @param value the value to set the attribute hostname to.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def hostname=(_arg0); end

  # source://sshkit//lib/sshkit/host.rb#13
  def key=(new_key); end

  # source://sshkit//lib/sshkit/host.rb#21
  def keys; end

  # source://sshkit//lib/sshkit/host.rb#17
  def keys=(new_keys); end

  # @return [Boolean]
  #
  # source://sshkit//lib/sshkit/host.rb#52
  def local?; end

  # source://sshkit//lib/sshkit/host.rb#74
  def netssh_options; end

  # Returns the value of attribute password.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def password; end

  # Sets the attribute password
  #
  # @param value the value to set the attribute password to.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def password=(_arg0); end

  # Returns the value of attribute port.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def port; end

  # Sets the attribute port
  #
  # @param value the value to set the attribute port to.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def port=(_arg0); end

  # source://sshkit//lib/sshkit/host.rb#85
  def properties; end

  # Returns the value of attribute ssh_options.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def ssh_options; end

  # Sets the attribute ssh_options
  #
  # @param value the value to set the attribute ssh_options to.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def ssh_options=(_arg0); end

  # source://sshkit//lib/sshkit/host.rb#70
  def to_s; end

  # Returns the value of attribute transfer_method.
  #
  # source://sshkit//lib/sshkit/host.rb#11
  def transfer_method; end

  # source://sshkit//lib/sshkit/host.rb#46
  def transfer_method=(method); end

  # Returns the value of attribute user.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def user; end

  # Sets the attribute user
  #
  # @param value the value to set the attribute user to.
  #
  # source://sshkit//lib/sshkit/host.rb#10
  def user=(_arg0); end

  # source://sshkit//lib/sshkit/host.rb#60
  def username; end
end

# source://sshkit//lib/sshkit/host.rb#142
class SSHKit::HostWithPortParser < ::SSHKit::SimpleHostParser
  # source://sshkit//lib/sshkit/host.rb#152
  def hostname; end

  # source://sshkit//lib/sshkit/host.rb#148
  def port; end

  class << self
    # @return [Boolean]
    #
    # source://sshkit//lib/sshkit/host.rb#144
    def suitable?(host_string); end
  end
end

# @private
#
# source://sshkit//lib/sshkit/host.rb#160
class SSHKit::HostWithUsernameAndPortParser < ::SSHKit::SimpleHostParser
  # source://sshkit//lib/sshkit/host.rb#167
  def hostname; end

  # source://sshkit//lib/sshkit/host.rb#170
  def port; end

  # source://sshkit//lib/sshkit/host.rb#164
  def username; end

  class << self
    # @return [Boolean]
    #
    # source://sshkit//lib/sshkit/host.rb#161
    def suitable?(host_string); end
  end
end

# @private
#
# source://sshkit//lib/sshkit/host.rb#198
class SSHKit::HostWithUsernameParser < ::SSHKit::SimpleHostParser
  # source://sshkit//lib/sshkit/host.rb#205
  def hostname; end

  # source://sshkit//lib/sshkit/host.rb#202
  def username; end

  class << self
    # @return [Boolean]
    #
    # source://sshkit//lib/sshkit/host.rb#199
    def suitable?(host_string); end
  end
end

# @private
#
# source://sshkit//lib/sshkit/host.rb#128
class SSHKit::IPv6HostParser < ::SSHKit::SimpleHostParser
  # source://sshkit//lib/sshkit/host.rb#137
  def hostname; end

  # source://sshkit//lib/sshkit/host.rb#133
  def port; end

  class << self
    # @return [Boolean]
    #
    # source://sshkit//lib/sshkit/host.rb#129
    def suitable?(host_string); end
  end
end

# @private
#
# source://sshkit//lib/sshkit/host.rb#177
class SSHKit::IPv6HostWithPortParser < ::SSHKit::SimpleHostParser
  # source://sshkit//lib/sshkit/host.rb#190
  def hostname; end

  # source://sshkit//lib/sshkit/host.rb#184
  def port; end

  class << self
    # @return [Boolean]
    #
    # source://sshkit//lib/sshkit/host.rb#180
    def suitable?(host_string); end
  end
end

# source://sshkit//lib/sshkit/host.rb#178
SSHKit::IPv6HostWithPortParser::IPV6_REGEX = T.let(T.unsafe(nil), Regexp)

# source://sshkit//lib/sshkit/log_message.rb#3
class SSHKit::LogMessage
  # @return [LogMessage] a new instance of LogMessage
  #
  # source://sshkit//lib/sshkit/log_message.rb#5
  def initialize(verbosity, message); end

  # Returns the value of attribute message.
  #
  # source://sshkit//lib/sshkit/log_message.rb#4
  def message; end

  # source://sshkit//lib/sshkit/log_message.rb#8
  def to_s; end

  # Returns the value of attribute verbosity.
  #
  # source://sshkit//lib/sshkit/log_message.rb#4
  def verbosity; end
end

# source://sshkit//lib/sshkit/logger.rb#2
class SSHKit::Logger; end

# source://sshkit//lib/sshkit/logger.rb#3
SSHKit::Logger::DEBUG = T.let(T.unsafe(nil), Integer)

# source://sshkit//lib/sshkit/logger.rb#6
SSHKit::Logger::ERROR = T.let(T.unsafe(nil), Integer)

# source://sshkit//lib/sshkit/logger.rb#7
SSHKit::Logger::FATAL = T.let(T.unsafe(nil), Integer)

# source://sshkit//lib/sshkit/logger.rb#4
SSHKit::Logger::INFO = T.let(T.unsafe(nil), Integer)

# source://sshkit//lib/sshkit/logger.rb#5
SSHKit::Logger::WARN = T.let(T.unsafe(nil), Integer)

# source://sshkit//lib/sshkit/mapping_interaction_handler.rb#3
class SSHKit::MappingInteractionHandler
  # @return [MappingInteractionHandler] a new instance of MappingInteractionHandler
  #
  # source://sshkit//lib/sshkit/mapping_interaction_handler.rb#5
  def initialize(mapping, log_level = T.unsafe(nil)); end

  # source://sshkit//lib/sshkit/mapping_interaction_handler.rb#21
  def on_data(_command, stream_name, data, channel); end

  private

  # source://sshkit//lib/sshkit/mapping_interaction_handler.rb#42
  def log(message); end
end

# source://sshkit//lib/sshkit/host.rb#210
SSHKit::PARSERS = T.let(T.unsafe(nil), Array)

# Used for redaction of a certain argument
#
# source://sshkit//lib/sshkit.rb#25
module SSHKit::Redaction; end

# source://sshkit//lib/sshkit/exception.rb#3
module SSHKit::Runner; end

# source://sshkit//lib/sshkit/runners/abstract.rb#5
class SSHKit::Runner::Abstract
  # @return [Abstract] a new instance of Abstract
  #
  # source://sshkit//lib/sshkit/runners/abstract.rb#9
  def initialize(hosts, options = T.unsafe(nil), &block); end

  # Returns the value of attribute block.
  #
  # source://sshkit//lib/sshkit/runners/abstract.rb#7
  def block; end

  # Returns the value of attribute hosts.
  #
  # source://sshkit//lib/sshkit/runners/abstract.rb#7
  def hosts; end

  # Returns the value of attribute options.
  #
  # source://sshkit//lib/sshkit/runners/abstract.rb#7
  def options; end

  private

  # source://sshkit//lib/sshkit/runners/abstract.rb#17
  def backend(host, &block); end
end

# source://sshkit//lib/sshkit/exception.rb#5
class SSHKit::Runner::ExecuteError < ::SSHKit::StandardError
  # @return [ExecuteError] a new instance of ExecuteError
  #
  # source://sshkit//lib/sshkit/exception.rb#8
  def initialize(cause); end

  # Returns the value of attribute cause.
  #
  # source://sshkit//lib/sshkit/exception.rb#6
  def cause; end
end

# source://sshkit//lib/sshkit/runners/group.rb#5
class SSHKit::Runner::Group < ::SSHKit::Runner::Sequential
  # @return [Group] a new instance of Group
  #
  # source://sshkit//lib/sshkit/runners/group.rb#8
  def initialize(hosts, options = T.unsafe(nil), &block); end

  # source://sshkit//lib/sshkit/runners/group.rb#13
  def execute; end

  # Returns the value of attribute group_size.
  #
  # source://sshkit//lib/sshkit/runners/group.rb#6
  def group_size; end

  # Sets the attribute group_size
  #
  # @param value the value to set the attribute group_size to.
  #
  # source://sshkit//lib/sshkit/runners/group.rb#6
  def group_size=(_arg0); end
end

# source://sshkit//lib/sshkit/runners/null.rb#5
class SSHKit::Runner::Null < ::SSHKit::Runner::Abstract
  # source://sshkit//lib/sshkit/runners/null.rb#7
  def execute; end
end

# source://sshkit//lib/sshkit/runners/parallel.rb#7
class SSHKit::Runner::Parallel < ::SSHKit::Runner::Abstract
  # source://kamal/2.4.0/lib/kamal/sshkit_with_ext.rb#115
  def execute; end
end

# source://sshkit//lib/sshkit/runners/sequential.rb#5
class SSHKit::Runner::Sequential < ::SSHKit::Runner::Abstract
  # @return [Sequential] a new instance of Sequential
  #
  # source://sshkit//lib/sshkit/runners/sequential.rb#8
  def initialize(hosts, options = T.unsafe(nil), &block); end

  # source://sshkit//lib/sshkit/runners/sequential.rb#13
  def execute; end

  # Returns the value of attribute wait_interval.
  #
  # source://sshkit//lib/sshkit/runners/sequential.rb#6
  def wait_interval; end

  # Sets the attribute wait_interval
  #
  # @param value the value to set the attribute wait_interval to.
  #
  # source://sshkit//lib/sshkit/runners/sequential.rb#6
  def wait_interval=(_arg0); end

  private

  # source://sshkit//lib/sshkit/runners/sequential.rb#27
  def run_backend(host, &block); end
end

# @private
#
# source://sshkit//lib/sshkit/host.rb#98
class SSHKit::SimpleHostParser
  # @return [SimpleHostParser] a new instance of SimpleHostParser
  #
  # source://sshkit//lib/sshkit/host.rb#104
  def initialize(host_string); end

  # source://sshkit//lib/sshkit/host.rb#120
  def attributes; end

  # source://sshkit//lib/sshkit/host.rb#116
  def hostname; end

  # source://sshkit//lib/sshkit/host.rb#112
  def port; end

  # source://sshkit//lib/sshkit/host.rb#108
  def username; end

  class << self
    # @return [Boolean]
    #
    # source://sshkit//lib/sshkit/host.rb#100
    def suitable?(host_string); end
  end
end

# source://sshkit//lib/sshkit.rb#3
class SSHKit::StandardError < ::StandardError; end

# source://sshkit//lib/sshkit/host.rb#6
class SSHKit::UnparsableHostStringError < ::SSHKit::StandardError; end
