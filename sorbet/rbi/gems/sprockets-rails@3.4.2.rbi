# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `sprockets-rails` gem.
# Please instead update this file by running `bin/tapioca gem sprockets-rails`.

class Rails::Application < ::Rails::Engine
  # source://railties/7.0.4/lib/rails/application.rb#106
  def initialize(initial_variable_values = T.unsafe(nil), &block); end

  # Called from asset helpers to alert you if you reference an asset URL that
  # isn't precompiled and hence won't be available in production.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails//lib/sprockets/railtie.rb#37
  def asset_precompiled?(logical_path); end

  # Returns Sprockets::Environment for app config.
  #
  # source://sprockets-rails//lib/sprockets/railtie.rb#30
  def assets; end

  # Returns Sprockets::Environment for app config.
  #
  # source://sprockets-rails//lib/sprockets/railtie.rb#30
  def assets=(_arg0); end

  # Returns Sprockets::Manifest for app config.
  #
  # source://sprockets-rails//lib/sprockets/railtie.rb#33
  def assets_manifest; end

  # Returns Sprockets::Manifest for app config.
  #
  # source://sprockets-rails//lib/sprockets/railtie.rb#33
  def assets_manifest=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def autoloaders; end

  # source://railties/7.0.4/lib/rails/engine.rb#511
  def build_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#383
  def config; end

  # source://railties/7.0.4/lib/rails/application.rb#387
  def config=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#221
  def config_for(name, env: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#303
  def console(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#432
  def credentials; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def credentials=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options(*_arg0, **_arg1, &_arg2); end

  # source://railties/7.0.4/lib/rails/application.rb#101
  def default_url_options=(arg); end

  # source://railties/7.0.4/lib/rails/application.rb#497
  def eager_load!; end

  # source://railties/7.0.4/lib/rails/application.rb#463
  def encrypted(path, key_path: T.unsafe(nil), env_key: T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#250
  def env_config; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def executor; end

  # source://railties/7.0.4/lib/rails/application.rb#309
  def generators(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#476
  def helpers_paths; end

  # source://railties/7.0.4/lib/rails/application.rb#370
  def initialize!(group = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#129
  def initialized?; end

  # source://railties/7.0.4/lib/rails/application.rb#291
  def initializer(name, opts = T.unsafe(nil), &block); end

  # source://railties/7.0.4/lib/rails/application.rb#377
  def initializers; end

  # source://railties/7.0.4/lib/rails/application.rb#320
  def isolate_namespace(mod); end

  # source://railties/7.0.4/lib/rails/application.rb#153
  def key_generator; end

  # source://railties/7.0.4/lib/rails/application.rb#179
  def message_verifier(verifier_name); end

  # source://railties/7.0.4/lib/rails/application.rb#492
  def migration_railties; end

  # Lazy-load the precompile list so we don't cause asset compilation at app
  # boot time, but ensure we cache the list so we don't recompute it for each
  # request or test case.
  #
  # source://sprockets-rails//lib/sprockets/railtie.rb#51
  def precompiled_assets(clear_cache = T.unsafe(nil)); end

  # source://railties/7.0.4/lib/rails/application.rb#284
  def rake_tasks(&block); end

  # source://railties/7.0.4/lib/rails/application.rb#148
  def reload_routes!; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#99
  def reloaders; end

  # source://railties/7.0.4/lib/rails/application.rb#346
  def require_environment!; end

  # source://railties/7.0.4/lib/rails/application.rb#351
  def routes_reloader; end

  # source://railties/7.0.4/lib/rails/application.rb#133
  def run_load_hooks!; end

  # source://railties/7.0.4/lib/rails/application.rb#297
  def runner(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox; end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#97
  def sandbox?; end

  # source://railties/7.0.4/lib/rails/application.rb#415
  def secret_key_base; end

  # source://railties/7.0.4/lib/rails/application.rb#389
  def secrets; end

  # source://railties/7.0.4/lib/rails/application.rb#403
  def secrets=(_arg0); end

  # source://railties/7.0.4/lib/rails/application.rb#315
  def server(&blk); end

  # source://railties/7.0.4/lib/rails/application.rb#472
  def to_app; end

  # source://railties/7.0.4/lib/rails/application.rb#358
  def watchable_args; end

  protected

  # source://railties/7.0.4/lib/rails/application.rb#570
  def default_middleware_stack; end

  # source://railties/7.0.4/lib/rails/application.rb#536
  def ordered_railties; end

  # source://railties/7.0.4/lib/rails/application.rb#558
  def railties_initializers(current); end

  # source://railties/7.0.4/lib/rails/application.rb#525
  def run_console_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#515
  def run_generators_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#520
  def run_runner_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#530
  def run_server_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#504
  def run_tasks_blocks(app); end

  # source://railties/7.0.4/lib/rails/application.rb#575
  def validate_secret_key_base(secret_key_base); end

  private

  # source://railties/7.0.4/lib/rails/application.rb#609
  def build_middleware; end

  # source://railties/7.0.4/lib/rails/application.rb#602
  def build_request(env); end

  # source://railties/7.0.4/lib/rails/application.rb#613
  def coerce_same_site_protection(protection); end

  # source://railties/7.0.4/lib/rails/application.rb#586
  def generate_development_secret; end

  class << self
    # source://railties/7.0.4/lib/rails/application.rb#339
    def add_lib_to_load_path!(root); end

    # source://railties/7.0.4/lib/rails/application.rb#81
    def create(initial_variable_values = T.unsafe(nil), &block); end

    # source://railties/7.0.4/lib/rails/application.rb#85
    def find_root(from); end

    # source://railties/7.0.4/lib/rails/application.rb#70
    def inherited(base); end

    # source://railties/7.0.4/lib/rails/application.rb#77
    def instance; end

    def new(*_arg0); end
  end
end

module Rails::Application::Bootstrap
  include ::Rails::Initializable
  extend ::Rails::Initializable::ClassMethods
end

# source://railties/7.0.4/lib/rails/application.rb#103
Rails::Application::INITIAL_VARIABLES = T.let(T.unsafe(nil), Array)

module Sprockets
  extend ::Sprockets::Utils
  extend ::Sprockets::URIUtils
  extend ::Sprockets::PathUtils
  extend ::Sprockets::DigestUtils
  extend ::Sprockets::PathDigestUtils
  extend ::Sprockets::Dependencies
  extend ::Sprockets::Compressing
  extend ::Sprockets::Exporting
  extend ::Sprockets::ProcessorUtils
  extend ::Sprockets::Processing
  extend ::Sprockets::HTTPUtils
  extend ::Sprockets::Transformers
  extend ::Sprockets::Mime
  extend ::Sprockets::Paths
  extend ::Sprockets::Configuration
end

class Sprockets::ArgumentError < ::Sprockets::Error; end
module Sprockets::Autoload; end

# source://sprockets/4.2.0/lib/sprockets/autoload/sassc.rb#6
Sprockets::Autoload::SassC = SassC

class Sprockets::ContentTypeMismatch < ::Sprockets::Error; end
class Sprockets::ConversionError < ::Sprockets::NotFound; end
class Sprockets::Error < ::StandardError; end
class Sprockets::FileNotFound < ::Sprockets::NotFound; end
class Sprockets::FileOutsidePaths < ::Sprockets::NotFound; end
class Sprockets::NotFound < ::Sprockets::Error; end
class Sprockets::NotImplementedError < ::Sprockets::Error; end
module Sprockets::Rails; end

# Resolve assets referenced in CSS `url()` calls and replace them with the digested paths
class Sprockets::Rails::AssetUrlProcessor
  class << self
    # source://sprockets-rails//lib/sprockets/rails/asset_url_processor.rb#6
    def call(input); end
  end
end

# source://sprockets-rails//lib/sprockets/rails/asset_url_processor.rb#5
Sprockets::Rails::AssetUrlProcessor::REGEX = T.let(T.unsafe(nil), Regexp)

module Sprockets::Rails::Context
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # source://sprockets-rails//lib/sprockets/rails/context.rb#16
  def compute_asset_path(path, options = T.unsafe(nil)); end

  class << self
    # @private
    #
    # source://sprockets-rails//lib/sprockets/rails/context.rb#10
    def included(klass); end
  end

  module GeneratedClassMethods
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def config; end
    def config=(value); end
    def config?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
  end

  module GeneratedInstanceMethods
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def config; end
    def config=(value); end
    def config?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
  end
end

module Sprockets::Rails::Helper
  include ::ActionView::Helpers::AssetUrlHelper
  include ::ActionView::Helpers::CaptureHelper
  include ::ActionView::Helpers::OutputSafetyHelper
  include ::ActionView::Helpers::TagHelper
  include ::ActionView::Helpers::AssetTagHelper
  include ::Sprockets::Rails::Utils
  include GeneratedInstanceMethods

  mixes_in_class_methods GeneratedClassMethods

  # Expand asset path to digested form.
  #
  # path    - String path
  # options - Hash options
  #
  # Returns String path or nil if no asset was found.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#113
  def asset_digest_path(path, options = T.unsafe(nil)); end

  # Experimental: Get integrity for asset path.
  #
  # path    - String path
  # options - Hash options
  #
  # Returns String integrity attribute or nil if no asset was found.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#125
  def asset_integrity(path, options = T.unsafe(nil)); end

  # Writes over the built in ActionView::Helpers::AssetUrlHelper#compute_asset_path
  # to use the asset pipeline.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#77
  def compute_asset_path(path, options = T.unsafe(nil)); end

  # Override javascript tag helper to provide debugging support.
  #
  # Eventually will be deprecated and replaced by source maps.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#136
  def javascript_include_tag(*sources); end

  # Resolve the asset path against the Sprockets manifest or environment.
  # Returns nil if it's an asset we don't know about.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#101
  def resolve_asset_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # Override stylesheet tag helper to provide debugging support.
  #
  # Eventually will be deprecated and replaced by source maps.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#165
  def stylesheet_link_tag(*sources); end

  protected

  # List of resolvers in `config.assets.resolve_with` order.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#250
  def asset_resolver_strategies; end

  # This is awkward: `integrity` is a boolean option indicating whether
  # we want to include or omit the subresource integrity hash, but the
  # options hash is also passed through as literal tag attributes.
  # That means we have to delete the shortcut boolean option so it
  # doesn't bleed into the tag attributes, but also check its value if
  # it's boolean-ish.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#198
  def compute_integrity?(options); end

  # Append ?body=1 if debug is on and we're on old Sprockets.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#258
  def legacy_debug_path(path, debug); end

  # Internal method to support multifile debugging. Will
  # eventually be removed w/ Sprockets 3.x.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#226
  def lookup_debug_asset(path, options = T.unsafe(nil)); end

  # compute_asset_extname is in AV::Helpers::AssetUrlHelper
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#235
  def path_with_extname(path, options); end

  # Enable split asset debugging. Eventually will be deprecated
  # and replaced by source maps in Sprockets 3.x.
  #
  # @return [Boolean]
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#218
  def request_debug_assets?; end

  # Try each asset resolver and return the first non-nil result.
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#241
  def resolve_asset; end

  # Only serve integrity metadata for HTTPS requests:
  #   http://www.w3.org/TR/SRI/#non-secure-contexts-remain-non-secure
  #
  # @return [Boolean]
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#212
  def secure_subresource_integrity_context?; end

  class << self
    # @private
    #
    # source://sprockets-rails//lib/sprockets/rails/helper.rb#60
    def extended(obj); end

    # @private
    #
    # source://sprockets-rails//lib/sprockets/rails/helper.rb#43
    def included(klass); end
  end

  module GeneratedClassMethods
    def assets_environment; end
    def assets_environment=(value); end
    def assets_environment?; end
    def assets_manifest; end
    def assets_manifest=(value); end
    def assets_manifest?; end
    def assets_precompile; end
    def assets_precompile=(value); end
    def assets_precompile?; end
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def check_precompiled_asset; end
    def check_precompiled_asset=(value); end
    def check_precompiled_asset?; end
    def debug_assets; end
    def debug_assets=(value); end
    def debug_assets?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
    def precompiled_asset_checker; end
    def precompiled_asset_checker=(value); end
    def precompiled_asset_checker?; end
    def resolve_assets_with; end
    def resolve_assets_with=(value); end
    def resolve_assets_with?; end
    def unknown_asset_fallback; end
    def unknown_asset_fallback=(value); end
    def unknown_asset_fallback?; end
  end

  module GeneratedInstanceMethods
    def assets_environment; end
    def assets_environment=(value); end
    def assets_environment?; end
    def assets_manifest; end
    def assets_manifest=(value); end
    def assets_manifest?; end
    def assets_precompile; end
    def assets_precompile=(value); end
    def assets_precompile?; end
    def assets_prefix; end
    def assets_prefix=(value); end
    def assets_prefix?; end
    def check_precompiled_asset; end
    def check_precompiled_asset=(value); end
    def check_precompiled_asset?; end
    def debug_assets; end
    def debug_assets=(value); end
    def debug_assets?; end
    def digest_assets; end
    def digest_assets=(value); end
    def digest_assets?; end
    def precompiled_asset_checker; end
    def precompiled_asset_checker=(value); end
    def precompiled_asset_checker?; end
    def resolve_assets_with; end
    def resolve_assets_with=(value); end
    def resolve_assets_with?; end
    def unknown_asset_fallback; end
    def unknown_asset_fallback=(value); end
    def unknown_asset_fallback?; end
  end
end

class Sprockets::Rails::Helper::AssetNotFound < ::StandardError; end
class Sprockets::Rails::Helper::AssetNotPrecompiled < ::StandardError; end

class Sprockets::Rails::Helper::AssetNotPrecompiledError < ::Sprockets::Rails::Helper::AssetNotPrecompiled
  include ::Sprockets::Rails::Utils

  # @return [AssetNotPrecompiledError] a new instance of AssetNotPrecompiledError
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#14
  def initialize(source); end
end

# source://sprockets-rails//lib/sprockets/rails/helper.rb#35
Sprockets::Rails::Helper::VIEW_ACCESSORS = T.let(T.unsafe(nil), Array)

# Use a separate module since Helper is mixed in and we needn't pollute
# the class namespace with our internals.
module Sprockets::Rails::HelperAssetResolvers
  class << self
    # source://sprockets-rails//lib/sprockets/rails/helper.rb#270
    def [](name); end
  end
end

class Sprockets::Rails::HelperAssetResolvers::Environment
  # @raise [ArgumentError]
  # @return [Environment] a new instance of Environment
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#316
  def initialize(view); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#323
  def asset_path(path, digest, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#336
  def digest_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#357
  def find_asset(path, options = T.unsafe(nil)); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#347
  def find_debug_asset(path); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#343
  def integrity(path); end

  private

  # @return [Boolean]
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#367
  def precompiled?(path); end

  # @raise [Helper::AssetNotPrecompiledError]
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#371
  def raise_unless_precompiled_asset(path); end
end

class Sprockets::Rails::HelperAssetResolvers::Manifest
  # @raise [ArgumentError]
  # @return [Manifest] a new instance of Manifest
  #
  # source://sprockets-rails//lib/sprockets/rails/helper.rb#282
  def initialize(view); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#287
  def asset_path(path, digest, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#293
  def digest_path(path, allow_non_precompiled = T.unsafe(nil)); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#303
  def find_debug_asset(path); end

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#297
  def integrity(path); end

  private

  # source://sprockets-rails//lib/sprockets/rails/helper.rb#308
  def metadata(path); end
end

class Sprockets::Rails::QuietAssets
  # @return [QuietAssets] a new instance of QuietAssets
  #
  # source://sprockets-rails//lib/sprockets/rails/quiet_assets.rb#4
  def initialize(app); end

  # source://sprockets-rails//lib/sprockets/rails/quiet_assets.rb#9
  def call(env); end
end

module Sprockets::Rails::RouteWrapper
  # @return [Boolean]
  #
  # source://sprockets-rails//lib/sprockets/rails/route_wrapper.rb#9
  def internal?; end

  # @return [Boolean]
  #
  # source://sprockets-rails//lib/sprockets/rails/route_wrapper.rb#5
  def internal_assets_path?; end

  class << self
    # @private
    #
    # source://sprockets-rails//lib/sprockets/rails/route_wrapper.rb#13
    def included(klass); end
  end
end

# Rewrites source mapping urls with the digested paths and protect against semicolon appending with a dummy comment line
class Sprockets::Rails::SourcemappingUrlProcessor
  class << self
    # source://sprockets-rails//lib/sprockets/rails/sourcemapping_url_processor.rb#8
    def call(input); end

    private

    # source://sprockets-rails//lib/sprockets/rails/sourcemapping_url_processor.rb#25
    def combine_sourcemap_logical_path(sourcefile:, sourcemap:); end

    # source://sprockets-rails//lib/sprockets/rails/sourcemapping_url_processor.rb#47
    def removed_sourcemap_comment(sourcemap_logical_path, filename:, env:); end

    # source://sprockets-rails//lib/sprockets/rails/sourcemapping_url_processor.rb#33
    def resolved_sourcemap_comment(sourcemap_logical_path, context:); end

    # source://sprockets-rails//lib/sprockets/rails/sourcemapping_url_processor.rb#37
    def sourcemap_asset_path(sourcemap_logical_path, context:); end
  end
end

# source://sprockets-rails//lib/sprockets/rails/sourcemapping_url_processor.rb#5
Sprockets::Rails::SourcemappingUrlProcessor::REGEX = T.let(T.unsafe(nil), Regexp)

module Sprockets::Rails::Utils
  # @return [Boolean]
  #
  # source://sprockets-rails//lib/sprockets/rails/utils.rb#6
  def using_sprockets4?; end
end

# source://sprockets-rails//lib/sprockets/rails/version.rb#3
Sprockets::Rails::VERSION = T.let(T.unsafe(nil), String)

class Sprockets::Railtie < ::Rails::Railtie
  include ::Sprockets::Rails::Utils

  # source://sprockets-rails//lib/sprockets/railtie.rb#182
  def build_environment(app, initialized = T.unsafe(nil)); end

  class << self
    # source://sprockets-rails//lib/sprockets/railtie.rb#213
    def build_manifest(app); end
  end
end

# source://sprockets-rails//lib/sprockets/railtie.rb#88
Sprockets::Railtie::LOOSE_APP_ASSETS = T.let(T.unsafe(nil), Proc)

class Sprockets::Railtie::ManifestNeededError < ::StandardError
  # @return [ManifestNeededError] a new instance of ManifestNeededError
  #
  # source://sprockets-rails//lib/sprockets/railtie.rb#74
  def initialize; end
end

class Sprockets::Railtie::OrderedOptions < ::ActiveSupport::OrderedOptions
  # source://sprockets-rails//lib/sprockets/railtie.rb#94
  def configure(&block); end
end

# source://sprockets/4.2.0/lib/sprockets/sass_processor.rb#312
Sprockets::SassFunctions = Sprockets::SassProcessor::Functions

# source://sprockets/4.2.0/lib/sprockets/version.rb#3
Sprockets::VERSION = T.let(T.unsafe(nil), String)
