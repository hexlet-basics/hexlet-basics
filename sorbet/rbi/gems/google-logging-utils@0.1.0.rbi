# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-logging-utils` gem.
# Please instead update this file by running `bin/tapioca gem google-logging-utils`.


# Google products namespace
#
# source://google-logging-utils//lib/google/logging/source_location.rb#18
module Google; end

# Classes and utilities related to logging to and from Google products
#
# source://google-logging-utils//lib/google/logging/source_location.rb#19
module Google::Logging; end

# A log message that can be formatted either as a normal text log entry or
# as a structured log entry suitable for Google Cloud Logging.
#
# A log message has a "body" which consists of either a string message, a
# JSON object (i.e. a Hash whose values are typically strings or numbers
# but could be nested arrays and hashes), or both. It also includes several
# additional optional fields used by the Google Cloud Logging backend.
#
# Most log formatters will render the message body as a string and ignore
# the other attributes. The {StructuredFormatter}, however, will format the
# full message data in the JSON format understood by the Google logging
# agent.
#
# source://google-logging-utils//lib/google/logging/message.rb#36
class Google::Logging::Message
  # Low-level constructor for a logging message.
  # All arguments are optional, with the exception that at least one of
  # `:message` and `:fields` must be provided.
  #
  # @param message [String] The main log message as a string.
  # @param fields [Hash{String=>Object}] The log message as a set of
  #   key-value pairs representing a JSON object.
  # @param timestamp [Time, Numeric, :now] The timestamp for the log entry.
  #   Can be provided as a Time object, a Numeric indicating the seconds
  #   since epoch, or `:now` to use the current time. Optional.
  # @param source_location [SourceLocation, Hash, :caller, nil] The source
  #   location for the log entry. Can be provided as a {SourceLocation}
  #   object, a Hash containing exactly the keys `:file`, `:line`, and
  #   `:function`, or `:caller` to use the location of the caller.
  #   Optional.
  # @param insert_id [String] A unique ID for this log entry that could be
  #   used on the backend to dedup messages. Optional.
  # @param trace [String] A Google Cloud Trace resource name. Optional.
  # @param span_id [String] The trace span containing this entry. Optional.
  # @param trace_sampled [boolean] Whether this trace is sampled. Optional.
  # @param labels [Hash{String=>String}] Optional metadata.
  # @return [Message] a new instance of Message
  #
  # source://google-logging-utils//lib/google/logging/message.rb#98
  def initialize(message: T.unsafe(nil), fields: T.unsafe(nil), timestamp: T.unsafe(nil), source_location: T.unsafe(nil), insert_id: T.unsafe(nil), trace: T.unsafe(nil), span_id: T.unsafe(nil), trace_sampled: T.unsafe(nil), labels: T.unsafe(nil)); end

  # @private
  #
  # source://google-logging-utils//lib/google/logging/message.rb#200
  def ==(other); end

  # @private
  #
  # source://google-logging-utils//lib/google/logging/message.rb#200
  def eql?(other); end

  # @return [Hash{String=>Object}, nil] The log message as a set of
  #   key-value pairs, or nil if not present.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#137
  def fields; end

  # @return [String] A full string representation of the message and fields
  #   as rendered in the standard logger formatter.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#130
  def full_message; end

  # @private
  #
  # source://google-logging-utils//lib/google/logging/message.rb#215
  def hash; end

  # @return [String, nil] The unique ID for this log entry that could be
  #   used on the backend to dedup messages, or nil if not present.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#155
  def insert_id; end

  # @return [String] A full string representation of the message and fields
  #   as rendered in the standard logger formatter.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#130
  def inspect; end

  # @return [Hash{String=>String}, nil] Metadata, or nil if not present.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#179
  def labels; end

  # @return [String] The message as a string. This is always present as a
  #   nonempty string, and can be reliably used as the "display" of this
  #   log entry in a list of entries.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#123
  def message; end

  # @return [SourceLocation, nil] The source location for the log entry, or
  #   nil if not present.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#149
  def source_location; end

  # @return [String, nil] The trace span containing this entry, or nil if
  #   not present.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#167
  def span_id; end

  # @return [Time, nil] The timestamp for the log entry, or nil if not
  #   present.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#143
  def timestamp; end

  # @return [Hash] A hash of kwargs that can be passed to the constructor
  #   to clone this message.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#185
  def to_h; end

  # @return [String] The message as a string. This is always present as a
  #   nonempty string, and can be reliably used as the "display" of this
  #   log entry in a list of entries.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#123
  def to_s; end

  # @return [String, nil] The Google Cloud Trace resource name, or nil if
  #   not present.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#161
  def trace; end

  # @return [true, false, nil] Whether this trace is sampled, or nil if not
  #   present or known.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#173
  def trace_sampled; end

  # @return [true, false, nil] Whether this trace is sampled, or nil if not
  #   present or known.
  #
  # source://google-logging-utils//lib/google/logging/message.rb#173
  def trace_sampled?; end

  private

  # source://google-logging-utils//lib/google/logging/message.rb#297
  def interpret_boolean(input); end

  # source://google-logging-utils//lib/google/logging/message.rb#230
  def interpret_fields(fields); end

  # source://google-logging-utils//lib/google/logging/message.rb#302
  def interpret_labels(input); end

  # source://google-logging-utils//lib/google/logging/message.rb#260
  def interpret_message(message, fields); end

  # source://google-logging-utils//lib/google/logging/message.rb#282
  def interpret_source_location(source_location); end

  # source://google-logging-utils//lib/google/logging/message.rb#293
  def interpret_string(input); end

  # source://google-logging-utils//lib/google/logging/message.rb#271
  def interpret_timestamp(timestamp); end

  # source://google-logging-utils//lib/google/logging/message.rb#241
  def normalize_json(input); end

  class << self
    # Create a log message from an input object, which can be any of:
    #
    # * An existing Message object.
    # * A Hash. Symbol keys are used as keyword arguments to the
    #   {Message#initialize} constructor. String keys are treated as fields
    #   in the JSON payload.
    # * Any other object is converted to a string with `to_s` and used as a
    #   simple text payload.
    #
    # @param input [Object] A log message input object.
    # @return [Message]
    #
    # source://google-logging-utils//lib/google/logging/message.rb#50
    def from(input); end
  end
end

# @private
#
# source://google-logging-utils//lib/google/logging/message.rb#222
Google::Logging::Message::DISALLOWED_FIELDS = T.let(T.unsafe(nil), Array)

# An object representing a source location as used by Google Logging.
#
# source://google-logging-utils//lib/google/logging/source_location.rb#23
class Google::Logging::SourceLocation
  # Low-level constructor.
  #
  # @param file [String] Path to the source file.
  # @param line [String] Line number as a string.
  # @param function [String] Name of the calling function.
  # @return [SourceLocation] a new instance of SourceLocation
  #
  # source://google-logging-utils//lib/google/logging/source_location.rb#59
  def initialize(file:, line:, function:); end

  # @private
  #
  # source://google-logging-utils//lib/google/logging/source_location.rb#84
  def ==(other); end

  # @private
  #
  # source://google-logging-utils//lib/google/logging/source_location.rb#84
  def eql?(other); end

  # @return [String] Path to the source file.
  #
  # source://google-logging-utils//lib/google/logging/source_location.rb#66
  def file; end

  # @return [String] Name of the calling function.
  #
  # source://google-logging-utils//lib/google/logging/source_location.rb#72
  def function; end

  # @private
  #
  # source://google-logging-utils//lib/google/logging/source_location.rb#91
  def hash; end

  # @return [String] Line number as a string.
  #
  # source://google-logging-utils//lib/google/logging/source_location.rb#69
  def line; end

  # @private
  #
  # source://google-logging-utils//lib/google/logging/source_location.rb#75
  def to_h; end

  class << self
    # Returns a SourceLocation corresponding to the caller.
    # This basically walks the stack trace backwards until it finds the
    # first entry not in the `google/logging/message.rb` source file or in
    # any of the other files optionally listed.
    #
    # @param locations [Array<Thread::Backtrace::Location>] The caller stack
    #   to search. Optional; defaults to the current stack.
    # @param extra_depth [Integer] Optional extra steps backwards to walk.
    #   Defaults to 0.
    # @param omit_files [Array<String,Regexp>] File paths to omit.
    # @return [SourceLocation, nil] The SourceLocation, or nil if none found.
    #
    # source://google-logging-utils//lib/google/logging/source_location.rb#37
    def for_caller(locations: T.unsafe(nil), extra_depth: T.unsafe(nil), omit_files: T.unsafe(nil)); end
  end
end
