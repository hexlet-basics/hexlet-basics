# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `inertia_rails` gem.
# Please instead update this file by running `bin/tapioca gem inertia_rails`.


class ActionDispatch::DebugExceptions
  include ::InertiaRails::InertiaDebugExceptions
end

class ActionDispatch::Request
  include ::InertiaRails::InertiaRequest
end

class ActionDispatch::Routing::Mapper
  include ::InertiaRails::InertiaMapper
end

# Patch ActionDispatch::DebugExceptions to render HTML for Inertia requests
#
# Original source (unchanged since Rails 5.1):
# https://github.com/rails/rails/blob/5-1-stable/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb
# https://github.com/rails/rails/blob/5-2-stable/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb
# https://github.com/rails/rails/blob/6-0-stable/actionpack/lib/action_dispatch/middleware/debug_exceptions.rb
#
# source://inertia_rails//lib/inertia_rails/base_prop.rb#3
module InertiaRails
  class << self
    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#30
    def always(&block); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#18
    def configuration; end

    # @yield [CONFIGURATION]
    #
    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#14
    def configure; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#38
    def defer(group: T.unsafe(nil), merge: T.unsafe(nil), &block); end

    # source://inertia_rails//lib/inertia_rails.rb#27
    def deprecator; end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#22
    def lazy(value = T.unsafe(nil), &block); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#34
    def merge(&block); end

    # source://inertia_rails//lib/inertia_rails/inertia_rails.rb#26
    def optional(&block); end
  end
end

# source://inertia_rails//lib/inertia_rails/action_filter.rb#6
class InertiaRails::ActionFilter
  # @return [ActionFilter] a new instance of ActionFilter
  #
  # source://inertia_rails//lib/inertia_rails/action_filter.rb#7
  def initialize(conditional_key, actions); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/action_filter.rb#12
  def match?(controller); end
end

# source://inertia_rails//lib/inertia_rails/always_prop.rb#4
class InertiaRails::AlwaysProp < ::InertiaRails::BaseProp; end

# Base class for all props.
#
# source://inertia_rails//lib/inertia_rails/base_prop.rb#5
class InertiaRails::BaseProp
  # @return [BaseProp] a new instance of BaseProp
  #
  # source://inertia_rails//lib/inertia_rails/base_prop.rb#6
  def initialize(&block); end

  # source://inertia_rails//lib/inertia_rails/base_prop.rb#10
  def call(controller); end
end

# source://inertia_rails//lib/inertia_rails/configuration.rb#4
class InertiaRails::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://inertia_rails//lib/inertia_rails/configuration.rb#35
  def initialize(controller: T.unsafe(nil), **attrs); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#44
  def bind_controller(controller); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#68
  def component_path_resolver(path:, action:); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#76
  def component_path_resolver=(value); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#73
  def deep_merge_shared_data; end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#76
  def deep_merge_shared_data=(value); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#73
  def default_render; end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#76
  def default_render=(value); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#73
  def encrypt_history; end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#76
  def encrypt_history=(value); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#48
  def freeze; end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#73
  def layout; end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#76
  def layout=(value); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#58
  def merge(config); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#53
  def merge!(config); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#73
  def ssr_enabled; end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#76
  def ssr_enabled=(value); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#73
  def ssr_url; end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#76
  def ssr_url=(value); end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#73
  def version; end

  # source://inertia_rails//lib/inertia_rails/configuration.rb#76
  def version=(value); end

  # Internal: Finalizes the configuration for a specific controller.
  #
  # source://inertia_rails//lib/inertia_rails/configuration.rb#63
  def with_defaults(config); end

  protected

  # Returns the value of attribute controller.
  #
  # source://inertia_rails//lib/inertia_rails/configuration.rb#32
  def controller; end

  # Returns the value of attribute options.
  #
  # source://inertia_rails//lib/inertia_rails/configuration.rb#33
  def options; end

  private

  # source://inertia_rails//lib/inertia_rails/configuration.rb#87
  def evaluate_option(value); end

  class << self
    # source://inertia_rails//lib/inertia_rails/configuration.rb#81
    def default; end
  end
end

# source://inertia_rails//lib/inertia_rails/configuration.rb#5
InertiaRails::Configuration::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://inertia_rails//lib/inertia_rails/configuration.rb#30
InertiaRails::Configuration::OPTION_NAMES = T.let(T.unsafe(nil), Array)

# source://inertia_rails//lib/inertia_rails/controller.rb#6
module InertiaRails::Controller
  extend ::ActiveSupport::Concern

  mixes_in_class_methods ::InertiaRails::Controller::ClassMethods

  # source://inertia_rails//lib/inertia_rails/controller.rb#117
  def default_render; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#125
  def redirect_to(options = T.unsafe(nil), response_options = T.unsafe(nil)); end

  private

  # source://inertia_rails//lib/inertia_rails/controller.rb#158
  def capture_inertia_session_options(options); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#137
  def inertia_configuration; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#153
  def inertia_location(url); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#141
  def inertia_shared_data; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#132
  def inertia_view_assigns; end
end

# source://inertia_rails//lib/inertia_rails/controller.rb#17
module InertiaRails::Controller::ClassMethods
  # source://inertia_rails//lib/inertia_rails/controller.rb#50
  def _inertia_configuration; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#57
  def _inertia_shared_data; end

  # source://inertia_rails//lib/inertia_rails/controller.rb#33
  def inertia_config(**attrs); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#18
  def inertia_share(hash = T.unsafe(nil), **props, &block); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#43
  def use_inertia_instance_props; end

  private

  # source://inertia_rails//lib/inertia_rails/controller.rb#77
  def extract_inertia_share_options(props); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#103
  def filter_to_proc(filter); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#71
  def push_to_inertia_share(**attrs, &block); end

  # source://inertia_rails//lib/inertia_rails/controller.rb#96
  def transform_inertia_share_option(options, from, to); end
end

# source://inertia_rails//lib/inertia_rails/defer_prop.rb#4
class InertiaRails::DeferProp < ::InertiaRails::IgnoreOnFirstLoadProp
  # @return [DeferProp] a new instance of DeferProp
  #
  # source://inertia_rails//lib/inertia_rails/defer_prop.rb#9
  def initialize(group: T.unsafe(nil), merge: T.unsafe(nil), &block); end

  # Returns the value of attribute group.
  #
  # source://inertia_rails//lib/inertia_rails/defer_prop.rb#7
  def group; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/defer_prop.rb#17
  def merge?; end
end

# source://inertia_rails//lib/inertia_rails/defer_prop.rb#5
InertiaRails::DeferProp::DEFAULT_GROUP = T.let(T.unsafe(nil), String)

# source://inertia_rails//lib/inertia_rails/engine.rb#5
class InertiaRails::Engine < ::Rails::Engine
  class << self
    private

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end
  end
end

# source://inertia_rails//lib/inertia_rails.rb#25
class InertiaRails::Error < ::StandardError; end

# source://inertia_rails//lib/inertia_rails/helper.rb#3
module InertiaRails::Helper
  # source://inertia_rails//lib/inertia_rails/helper.rb#8
  def inertia_headers; end

  # source://inertia_rails//lib/inertia_rails/helper.rb#4
  def inertia_ssr_head; end
end

# source://inertia_rails//lib/inertia_rails/ignore_on_first_load_prop.rb#4
class InertiaRails::IgnoreOnFirstLoadProp < ::InertiaRails::BaseProp; end

# source://inertia_rails//lib/patches/better_errors.rb#8
module InertiaRails::InertiaBetterErrors
  # @return [Boolean]
  #
  # source://inertia_rails//lib/patches/better_errors.rb#9
  def text?(env); end
end

# source://inertia_rails//lib/patches/debug_exceptions/patch-5-1.rb#10
module InertiaRails::InertiaDebugExceptions
  # source://inertia_rails//lib/patches/debug_exceptions/patch-5-1.rb#11
  def render_for_browser_request(request, wrapper); end
end

# source://inertia_rails//lib/patches/mapper.rb#2
module InertiaRails::InertiaMapper
  # source://inertia_rails//lib/patches/mapper.rb#3
  def inertia(args, &block); end
end

# source://inertia_rails//lib/patches/request.rb#2
module InertiaRails::InertiaRequest
  # @return [Boolean]
  #
  # source://inertia_rails//lib/patches/request.rb#3
  def inertia?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/patches/request.rb#7
  def inertia_partial?; end
end

# source://inertia_rails//lib/inertia_rails/lazy_prop.rb#4
class InertiaRails::LazyProp < ::InertiaRails::IgnoreOnFirstLoadProp
  # @raise [ArgumentError]
  # @return [LazyProp] a new instance of LazyProp
  #
  # source://inertia_rails//lib/inertia_rails/lazy_prop.rb#5
  def initialize(value = T.unsafe(nil), &block); end

  # source://inertia_rails//lib/inertia_rails/lazy_prop.rb#16
  def call(controller); end

  # source://inertia_rails//lib/inertia_rails/lazy_prop.rb#20
  def value; end
end

# source://inertia_rails//lib/inertia_rails/merge_prop.rb#4
class InertiaRails::MergeProp < ::InertiaRails::BaseProp
  # @return [MergeProp] a new instance of MergeProp
  #
  # source://inertia_rails//lib/inertia_rails/merge_prop.rb#5
  def initialize(*_arg0); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/merge_prop.rb#10
  def merge?; end
end

# source://inertia_rails//lib/inertia_rails/middleware.rb#4
class InertiaRails::Middleware
  # @return [Middleware] a new instance of Middleware
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#5
  def initialize(app); end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#9
  def call(env); end
end

# source://inertia_rails//lib/inertia_rails/middleware.rb#13
class InertiaRails::Middleware::InertiaRailsRequest
  # @return [InertiaRailsRequest] a new instance of InertiaRailsRequest
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#14
  def initialize(app, env); end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#19
  def response; end

  private

  # source://inertia_rails//lib/inertia_rails/middleware.rb#73
  def client_version; end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#89
  def coerce_version(version); end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#65
  def controller; end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#98
  def copy_xsrf_to_csrf!; end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#93
  def force_refresh(request); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#61
  def get?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#53
  def inertia_non_post_redirect?(status); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#77
  def inertia_request?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#37
  def keep_inertia_session_options?(status); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#49
  def non_get_redirectable_method?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#45
  def redirect_status?(status); end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#69
  def request_method; end

  # source://inertia_rails//lib/inertia_rails/middleware.rb#85
  def server_version; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#57
  def stale_inertia_get?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#41
  def stale_inertia_request?; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/middleware.rb#81
  def version_stale?; end
end

# source://inertia_rails//lib/inertia_rails/optional_prop.rb#4
class InertiaRails::OptionalProp < ::InertiaRails::IgnoreOnFirstLoadProp; end

# source://inertia_rails//lib/inertia_rails/renderer.rb#8
class InertiaRails::Renderer
  # @return [Renderer] a new instance of Renderer
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#22
  def initialize(component, controller, request, response, render_method, props: T.unsafe(nil), view_data: T.unsafe(nil), deep_merge: T.unsafe(nil), encrypt_history: T.unsafe(nil), clear_history: T.unsafe(nil)); end

  # Returns the value of attribute clear_history.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#12
  def clear_history; end

  # Returns the value of attribute component.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#12
  def component; end

  # Returns the value of attribute configuration.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#12
  def configuration; end

  # Returns the value of attribute controller.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#12
  def controller; end

  # Returns the value of attribute encrypt_history.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#12
  def encrypt_history; end

  # Returns the value of attribute props.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#12
  def props; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#36
  def render; end

  # Returns the value of attribute view_data.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#12
  def view_data; end

  private

  # source://inertia_rails//lib/inertia_rails/renderer.rb#83
  def computed_props; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#121
  def deep_transform_props(props, parent_path = T.unsafe(nil), &block); end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#137
  def deferred_props_keys; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#198
  def excluded_by_except_partial_keys?(path_with_prefixes); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#194
  def excluded_by_only_partial_keys?(path_with_prefixes); end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#173
  def keep_prop?(prop, path); end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#61
  def layout; end

  # Cast props to symbol keyed hash before merging so that we have a consistent data structure and
  # avoid duplicate keys after merging.
  #
  # Functionally, this permits using either string or symbol keys in the controller. Since the results
  # is cast to json, we should treat string/symbol keys as identical.
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#75
  def merge_props(shared_data, props); end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#145
  def merge_props_keys; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#102
  def page; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#159
  def partial_except_keys; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#151
  def partial_keys; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#188
  def path_prefixes(parts); end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#53
  def render_ssr; end

  # @return [Boolean]
  #
  # source://inertia_rails//lib/inertia_rails/renderer.rb#163
  def rendering_partial_component?; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#155
  def reset_keys; end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#167
  def resolve_component(component); end

  # source://inertia_rails//lib/inertia_rails/renderer.rb#66
  def shared_data; end
end

# source://inertia_rails//lib/inertia_rails/renderer.rb#10
InertiaRails::Renderer::DONT_KEEP_PROP = T.let(T.unsafe(nil), Symbol)

# source://inertia_rails//lib/inertia_rails/renderer.rb#9
InertiaRails::Renderer::KEEP_PROP = T.let(T.unsafe(nil), Symbol)
