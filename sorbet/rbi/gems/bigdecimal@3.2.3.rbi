# typed: false

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `bigdecimal` gem.
# Please instead update this file by running `bin/tapioca gem bigdecimal`.


# source://bigdecimal//lib/bigdecimal.rb#8
class BigDecimal < ::Numeric
  # source://bigdecimal//lib/bigdecimal.rb#5
  def %(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def *(_arg0); end

  # call-seq:
  #    self ** other -> bigdecimal
  #
  #  Returns the \BigDecimal value of +self+ raised to power +other+:
  #
  #    b = BigDecimal('3.14')
  #    b ** 2              # => 0.98596e1
  #    b ** 2.0            # => 0.98596e1
  #    b ** Rational(2, 1) # => 0.98596e1
  #
  #  Related: BigDecimal#power.
  #
  # source://bigdecimal//lib/bigdecimal.rb#61
  def **(y); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def +(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def +@; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def -(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def -@; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def /(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def <(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def <=(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def <=>(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def ==(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def ===(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def >(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def >=(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def _decimal_shift(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def _dump(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def abs; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def add(_arg0, _arg1); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def ceil(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def clone; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def coerce(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def div(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def divmod(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def dup; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def eql?(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def exponent; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def finite?; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def fix; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def floor(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def frac; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def hash; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def infinite?; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def inspect; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def modulo(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def mult(_arg0, _arg1); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def n_significant_digits; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def nan?; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def nonzero?; end

  # call-seq:
  #   power(n)
  #   power(n, prec)
  #
  # Returns the value raised to the power of n.
  #
  # Also available as the operator **.
  #
  # source://bigdecimal//lib/bigdecimal.rb#81
  def power(y, prec = T.unsafe(nil)); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def precision; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def precision_scale; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def precs; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def quo(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def remainder(_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def round(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def scale; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def sign; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def split; end

  # Returns the square root of the value.
  #
  # Result has at least prec significant digits.
  #
  # @raise [FloatDomainError]
  #
  # source://bigdecimal//lib/bigdecimal.rb#185
  def sqrt(prec); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def sub(_arg0, _arg1); end

  # call-seq:
  #     a.to_d -> bigdecimal
  #
  # Returns self.
  #
  #     require 'bigdecimal/util'
  #
  #     d = BigDecimal("3.14")
  #     d.to_d                       # => 0.314e1
  #
  # source://bigdecimal//lib/bigdecimal/util.rb#110
  def to_d; end

  # call-seq:
  #     a.to_digits -> string
  #
  # Converts a BigDecimal to a String of the form "nnnnnn.mmm".
  # This method is deprecated; use BigDecimal#to_s("F") instead.
  #
  #     require 'bigdecimal/util'
  #
  #     d = BigDecimal("3.14")
  #     d.to_digits                  # => "3.14"
  #
  # source://bigdecimal//lib/bigdecimal/util.rb#90
  def to_digits; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def to_f; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def to_i; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def to_int; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def to_r; end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def to_s(format = T.unsafe(nil)); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def truncate(*_arg0); end

  # source://bigdecimal//lib/bigdecimal.rb#5
  def zero?; end

  class << self
    # source://bigdecimal//lib/bigdecimal.rb#5
    def _load(_arg0); end

    # source://bigdecimal//lib/bigdecimal.rb#5
    def double_fig; end

    # source://bigdecimal//lib/bigdecimal.rb#5
    def interpret_loosely(_arg0); end

    # source://bigdecimal//lib/bigdecimal.rb#5
    def limit(*_arg0); end

    # source://bigdecimal//lib/bigdecimal.rb#5
    def mode(*_arg0); end

    # source://bigdecimal//lib/bigdecimal.rb#5
    def save_exception_mode; end

    # source://bigdecimal//lib/bigdecimal.rb#5
    def save_limit; end

    # source://bigdecimal//lib/bigdecimal.rb#5
    def save_rounding_mode; end
  end
end

# source://bigdecimal//lib/bigdecimal.rb#9
module BigDecimal::Internal
  class << self
    # Coerce x to BigDecimal with the specified precision.
    # TODO: some methods (example: BigMath.exp) require more precision than specified to coerce.
    #
    # @raise [ArgumentError]
    #
    # source://bigdecimal//lib/bigdecimal.rb#13
    def coerce_to_bigdecimal(x, prec, method_name); end

    # source://bigdecimal//lib/bigdecimal.rb#34
    def infinity_computation_result; end

    # source://bigdecimal//lib/bigdecimal.rb#41
    def nan_computation_result; end

    # @raise [ArgumentError]
    #
    # source://bigdecimal//lib/bigdecimal.rb#25
    def validate_prec(prec, method_name, accept_zero: T.unsafe(nil)); end
  end
end

BigDecimal::VERSION = T.let(T.unsafe(nil), String)

# source://bigdecimal//lib/bigdecimal/util.rb#138
class Complex < ::Numeric
  # call-seq:
  #     cmp.to_d             -> bigdecimal
  #     cmp.to_d(precision)  -> bigdecimal
  #
  # Returns the value as a BigDecimal.
  #
  # The +precision+ parameter is required for a rational complex number.
  # This parameter is used to determine the number of significant digits
  # for the result.
  #
  #     require 'bigdecimal'
  #     require 'bigdecimal/util'
  #
  #     Complex(0.1234567, 0).to_d(4)   # => 0.1235e0
  #     Complex(Rational(22, 7), 0).to_d(3)   # => 0.314e1
  #
  # See also Kernel.BigDecimal.
  #
  # source://bigdecimal//lib/bigdecimal/util.rb#157
  def to_d(*args); end
end
