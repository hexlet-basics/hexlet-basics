# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `google-cloud-env` gem.
# Please instead update this file by running `bin/tapioca gem google-cloud-env`.


# Namespace of Google products
#
# source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#19
module Google; end

# Namespace of Google Cloud products
#
# source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#20
module Google::Cloud
  class << self
    # Returns the global instance of {Google::Cloud::Env}.
    #
    # @return [Google::Cloud::Env]
    #
    # source://google-cloud-env//lib/google/cloud/env.rb#530
    def env; end
  end
end

# ## Google Cloud hosting environment
#
# This library provides access to information about the application's
# hosting environment if it is running on Google Cloud Platform. You can
# use this library to determine which Google Cloud product is hosting your
# application (e.g. App Engine, Kubernetes Engine), information about the
# Google Cloud project hosting the application, information about the
# virtual machine instance, authentication information, and so forth.
#
# ### Usage
#
# Obtain an instance of the environment info with:
#
# ```ruby
# require "google/cloud/env"
# env = Google::Cloud.env
# ```
#
# Then you can interrogate any fields using methods on the object.
#
# ```ruby
# if env.app_engine?
#   # App engine specific logic
# end
# ```
#
# Any item that does not apply to the current environment will return nil.
# For example:
#
# ```ruby
# unless env.app_engine?
#   service = env.app_engine_service_id  # => nil
# end
# ```
#
# source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#21
class Google::Cloud::Env
  # Create a new instance of the environment information.
  # Most clients should not need to call this directly. Obtain a singleton
  # instance of the information from `Google::Cloud.env`.
  #
  # @return [Env] a new instance of Env
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#72
  def initialize; end

  # Determine whether the application is running on Google App Engine.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#212
  def app_engine?; end

  # Determine whether the application is running on Google App Engine
  # Flexible Environment.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#222
  def app_engine_flexible?; end

  # Returns the amount of memory reserved for the current App Engine
  # instance, or `nil` if the current code is not running in App Engine.
  #
  # @return [Integer, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#463
  def app_engine_memory_mb; end

  # Returns the name of the running App Engine service, or `nil` if the
  # current code is not running in App Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#442
  def app_engine_service_id; end

  # Returns the name of the running App Engine service, or `nil` if the
  # current code is not running in App Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#442
  def app_engine_service_name; end

  # Returns the version of the running App Engine service, or `nil` if the
  # current code is not running in App Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#453
  def app_engine_service_version; end

  # Determine whether the application is running on Google App Engine
  # Standard Environment.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#232
  def app_engine_standard?; end

  # Determine whether the application is running on Google Cloud Shell.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#252
  def cloud_shell?; end

  # Determine whether the application is running on Google Compute Engine.
  #
  # Note that most other products (e.g. App Engine, Kubernetes Engine,
  # Cloud Shell) themselves use Compute Engine under the hood, so this
  # method will return true for all the above products. If you want to
  # determine whether the application is running on a "raw" Compute Engine
  # VM without using a higher level hosting product, use
  # {Env#raw_compute_engine?}.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#268
  def compute_engine?; end

  # The compute metadata access object. Use this to make direct calls to
  # compute metadata or configure how metadata server queries are done, or
  # to mock out the metadata server for testing.
  #
  # @return [Google::Cloud::Env::ComputeMetadata]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#113
  def compute_metadata; end

  # The compute SMBIOS access object. Use this to make direct queries for
  # compute SMBIOS information, or to mock out the SMBIOS for testing.
  #
  # @return [Google::Cloud::Env::ComputeSMBIOS]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#104
  def compute_smbios; end

  # Determine whether the application is running on Google Kubernetes
  # Engine (GKE).
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#242
  def container_engine?; end

  # Returns the name of the Kubernetes Engine cluster hosting the
  # application, or `nil` if the current code is not running in
  # Kubernetes Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#475
  def container_engine_cluster_name; end

  # Returns the name of the Kubernetes Engine namespace hosting the
  # application, or `nil` if the current code is not running in
  # Kubernetes Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#489
  def container_engine_namespace_id; end

  # Assert that the Metadata Server should be present, and wait for a
  # confirmed connection to ensure it is up. In general, this will run at
  # most {ComputeMetadata::DEFAULT_WARMUP_TIME} seconds to wait out the
  # expected maximum warmup time, but a shorter timeout can be provided.
  #
  # This method is useful call during application initialization to wait
  # for the Metadata Server to warm up and ensure that subsequent lookups
  # should succeed.
  #
  # @param timeout [Numeric, nil] a timeout in seconds, or nil to wait
  #   until we have conclusively decided one way or the other.
  # @raise [MetadataServerNotResponding] if we were unable to confirm
  #   connection with the Metadata Server, either because the timeout
  #   expired or because the server seems to be down
  # @return [:confirmed] if we were able to confirm connection.
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#149
  def ensure_metadata(timeout: T.unsafe(nil)); end

  # The variables access object. Use this to make direct queries for
  # information from the file system, or to mock out the file system for
  # testing.
  #
  # @return [Google::Cloud::Env::FileSystem]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#96
  def file_system; end

  # Returns the value of the given instance attribute for the VM instance
  # hosting the application, or `nil` if the given key does not exist or
  # application is not running on Google Cloud.
  #
  # @param key [String] Attribute key to look up.
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#409
  def instance_attribute(key); end

  # Returns an array (which may be empty) of all attribute keys present
  # for the VM instance hosting the  application, or `nil` if the
  # application is not running on Google Cloud.
  #
  # @return [Array<String>, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#394
  def instance_attribute_keys; end

  # Returns the description field (which may be the empty string) of the
  # VM instance hosting the application, or `nil` if the application is
  # not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#340
  def instance_description; end

  # Returns the machine type of the VM instance hosting the application,
  # or `nil` if the application is not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#366
  def instance_machine_type; end

  # Returns the name of the VM instance hosting the application, or `nil`
  # if the application is not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#327
  def instance_name; end

  # Returns an array (which may be empty) of all tags set on the VM
  # instance hosting the  application, or `nil` if the application is not
  # running on Google Cloud.
  #
  # @return [Array<String>, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#380
  def instance_tags; end

  # Returns the zone (for example "`us-central1-c`") in which the instance
  # hosting the application lives. Returns `nil` if the application is
  # not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#353
  def instance_zone; end

  # Determine whether the application is running on a Knative-based
  # hosting platform, such as Cloud Run or Cloud Functions.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#203
  def knative?; end

  # Returns the name of the running Knative service, or `nil` if the
  # current code is not running on Knative.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#421
  def knative_service_id; end

  # Returns the name of the running Knative service, or `nil` if the
  # current code is not running on Knative.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#421
  def knative_service_name; end

  # Returns the revision of the running Knative service, or `nil` if the
  # current code is not running on Knative.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#432
  def knative_service_revision; end

  # Determine whether the application is running on Google Kubernetes
  # Engine (GKE).
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#242
  def kubernetes_engine?; end

  # Returns the name of the Kubernetes Engine cluster hosting the
  # application, or `nil` if the current code is not running in
  # Kubernetes Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#475
  def kubernetes_engine_cluster_name; end

  # Returns the name of the Kubernetes Engine namespace hosting the
  # application, or `nil` if the current code is not running in
  # Kubernetes Engine.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#489
  def kubernetes_engine_namespace_id; end

  # Determine whether the application is running in an environment where a
  # Google Cloud logging agent is expected to be running. In such an
  # environment, we expect that the standard output and error streams are
  # likely to be parsed by the logging agent and log entries are written to
  # the Google Cloud Logging service.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#509
  def logging_agent_expected?; end

  # Retrieve info from the Google Compute Engine Metadata Service.
  # Returns `nil` if the given data is not present.
  #
  # @param type [String] Type of metadata to look up. Currently supported
  #   values are "project" and "instance".
  # @param entry [String] Metadata entry path to look up.
  # @param query [Hash{String => String}] Any additional query parameters
  #   to send with the request.
  # @raise [MetadataServerNotResponding] if the Metadata Server is not
  #   responding. This could either be because the metadata service is
  #   not present in the current environment, or if it is expected to be
  #   present but is overloaded or has not finished initializing.
  # @return [String] the data
  # @return [nil] if there is no data for the specified type and entry
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#170
  def lookup_metadata(type, entry, query: T.unsafe(nil)); end

  # Retrieve an HTTP response from the Google Compute Engine Metadata
  # Service. Returns a {ComputeMetadata::Response} with a status code,
  # data, and headers. The response could be 200 for success, 404 if the
  # given entry is not present, or other HTTP result code for authorization
  # or other errors.
  #
  # @param type [String] Type of metadata to look up. Currently supported
  #   values are "project" and "instance".
  # @param entry [String] Metadata entry path to look up.
  # @param query [Hash{String => String}] Any additional query parameters
  #   to send with the request.
  # @raise [MetadataServerNotResponding] if the Metadata Server is not
  #   responding. This could either be because the metadata service is
  #   not present in the current environment, or if it is expected to be
  #   present but is overloaded or has not finished initializing.
  # @return [Google::Cloud::Env::ComputeMetadata::Response] the response
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#193
  def lookup_metadata_response(type, entry, query: T.unsafe(nil)); end

  # Determine whether the Google Compute Engine Metadata Service is running.
  #
  # This method is conservative. It may block for a short period (up to
  # about 1.5 seconds) while attempting to contact the server, but if this
  # fails, this method will return false, even though it is possible that a
  # future call could succeed. In particular, this might happen in
  # environments where there is a warmup time for the Metadata Server.
  # Early calls before the Server has warmed up may return false, while
  # later calls return true.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#128
  def metadata?; end

  # Returns the unique numeric ID of the project hosting the application,
  # or `nil` if the application is not running on Google Cloud.
  #
  # Caveat: this method does not work and returns `nil` on CloudShell.
  #
  # @return [Integer, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#306
  def numeric_project_id; end

  # Returns the unique string ID of the project hosting the application,
  # or `nil` if the application is not running on Google Cloud.
  #
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#289
  def project_id; end

  # Determine whether the application is running on "raw" Google Compute
  # Engine without using a higher level hosting product such as App
  # Engine or Kubernetes Engine.
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#279
  def raw_compute_engine?; end

  # The variables access object. Use this to make direct queries for
  # environment variable information, or to mock out environment variables
  # for testing.
  #
  # @return [Google::Cloud::Env::Variables]
  #
  # source://google-cloud-env//lib/google/cloud/env.rb#87
  def variables; end

  class << self
    # Returns the global instance of {Google::Cloud::Env}.
    #
    # @return [Google::Cloud::Env]
    #
    # source://google-cloud-env//lib/google/cloud/env.rb#518
    def get; end
  end
end

# A client for the Google metadata service.
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#30
class Google::Cloud::Env::ComputeMetadata
  # Create a compute metadata access object.
  #
  # @param variables [Google::Cloud::Env::Variables] Access object for
  #   environment variables. If not provided, a default is created.
  # @param compute_smbios [Google::Cloud::Env::ComputeSMBIOS] Access
  #   object for SMBIOS information. If not provided, a default is
  #   created.
  # @return [ComputeMetadata] a new instance of ComputeMetadata
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#247
  def initialize(variables: T.unsafe(nil), compute_smbios: T.unsafe(nil)); end

  # The underlying LazyDict. Can be used to customize the cache for
  # testing.
  #
  # @private
  # @return [Google::Cloud::Env::LazyDict]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#610
  def cache; end

  # Return detailed information about whether we think Metadata is
  # available. If we have not previously confirmed existence one way or
  # another, this could block while trying to contact the server through
  # the given timeouts and retries.
  #
  # @param open_timeout [Numeric] Timeout for opening http connections.
  #   Defaults to {#open_timeout}.
  # @param request_timeout [Numeric] Timeout for entire http requests.
  #   Defaults to {#request_timeout}.
  # @param retry_count [Integer, nil] Number of times to retry. A value of
  #   1 means 2 attempts (i.e. 1 retry). A value of nil indicates
  #   retries are limited only by the timeout. Defaults to
  #   {#retry_count}.
  # @param retry_timeout [Numeric, nil] Total timeout for retries. A value
  #   of nil indicates no time limit, and retries are limited only by
  #   count. Defaults to {#retry_timeout}.
  # @return [:no] if we know the metadata server is not present
  # @return [:unconfirmed] if we believe metadata should be present but we
  #   haven't gotten a confirmed response from it. This can happen if
  #   SMBIOS says we're on GCE but we can't contact the Metadata Server
  #   even through retries.
  # @return [:confirmed] if we have a confirmed response from metadata.
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#480
  def check_existence(open_timeout: T.unsafe(nil), request_timeout: T.unsafe(nil), retry_count: T.unsafe(nil), retry_timeout: T.unsafe(nil)); end

  # The compute SMBIOS access object
  #
  # @private
  # @return [Google::Cloud::Env::ComputeSMBIOS]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#624
  def compute_smbios; end

  # The underlying Faraday connection. Can be used to customize the
  # connection for testing.
  #
  # @private
  # @return [Faraday::Connection]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#602
  def connection; end

  # Assert that the Metadata Server should be present, and wait for a
  # confirmed connection to ensure it is up. This will generally run
  # at most {#warmup_time} seconds to wait out the expected maximum
  # warmup time, but a shorter timeout can be provided.
  #
  # @param timeout [Numeric, nil] a timeout in seconds, or nil to wait
  #   until we have conclusively decided one way or the other.
  # @raise [MetadataServerNotResponding] if we were unable to confirm
  #   connection with the Metadata Server, either because the timeout
  #   expired or because the server seems to be down
  # @return [:confirmed] if we were able to confirm connection.
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#525
  def ensure_existence(timeout: T.unsafe(nil)); end

  # The current detailed existence status, without blocking on any
  # attempt to contact the metadata server.
  #
  # @return [nil] if we have no information at all yet
  # @return [:no] if we know the metadata server is not present
  # @return [:unconfirmed] if we believe metadata should be present but we
  #   haven't gotten a confirmed response from it.
  # @return [:confirmed] if we have a confirmed response from metadata.
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#508
  def existence_immediate; end

  # Get the expiration time for the given path. Returns the monotonic
  # time if the data has been retrieved and has an expiration, nil if the
  # data has been retrieved but has no expiration, or false if the data
  # has not yet been retrieved.
  #
  # @return [Numeric, nil, false]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#541
  def expiration_time_of(path, query: T.unsafe(nil)); end

  # The host URL for the metadata server, including `http://`.
  #
  # @return [String]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#262
  def host; end

  # The host URL for the metadata server, including `http://`.
  #
  # @param new_host [String]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#269
  def host=(new_host); end

  # Look up a particular key from the metadata server and return the data
  # as a string. Could return a cached value if the key has been queried
  # before, otherwise this could block while trying to contact the server
  # through the given timeouts and retries.
  #
  # This returns the HTTP body as a string, only if the call succeeds. If
  # the key is inaccessible or missing (i.e. the HTTP status was not 200)
  # or does not have the correct `Metadata-Flavor` header, then nil is
  # returned. If you need more detailed information, use
  # {#lookup_response}.
  #
  # @param path [String] The key path (e.g. `project/project-id`)
  # @param query [Hash{String => String}] Any additional query parameters
  #   to send with the request.
  # @param open_timeout [Numeric] Timeout for opening http connections.
  #   Defaults to {#open_timeout}.
  # @param request_timeout [Numeric] Timeout for entire http requests.
  #   Defaults to {#request_timeout}.
  # @param retry_count [Integer, nil] Number of times to retry. A value of
  #   1 means 2 attempts (i.e. 1 retry). A value of nil indicates
  #   retries are limited only by the timeout. Defaults to
  #   {#retry_count}.
  # @param retry_timeout [Numeric, nil] Total timeout for retries. A value
  #   of nil indicates no time limit, and retries are limited only by
  #   count. Defaults to {#retry_timeout}.
  # @raise [MetadataServerNotResponding] if the Metadata Server is not
  #   responding
  # @return [String] the data from the metadata server
  # @return [nil] if the key is not present
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#439
  def lookup(path, query: T.unsafe(nil), open_timeout: T.unsafe(nil), request_timeout: T.unsafe(nil), retry_count: T.unsafe(nil), retry_timeout: T.unsafe(nil)); end

  # Look up a particular key from the metadata server, and return a full
  # {Response} object. Could return a cached value if the key has been
  # queried before, otherwise this could block while trying to contact
  # the server through the given timeouts and retries.
  #
  # This returns a Response object even if the HTTP status is 404, so be
  # sure to check the status code to determine whether the key actually
  # exists. Unlike {#lookup}, this method does not return nil.
  #
  # @param path [String] The key path (e.g. `project/project-id`)
  # @param query [Hash{String => String}] Any additional query parameters
  #   to send with the request.
  # @param open_timeout [Numeric] Timeout for opening http connections.
  #   Defaults to {#open_timeout}.
  # @param request_timeout [Numeric] Timeout for entire http requests.
  #   Defaults to {#request_timeout}.
  # @param retry_count [Integer, nil] Number of times to retry. A value of
  #   1 means 2 attempts (i.e. 1 retry). A value of nil indicates
  #   retries are limited only by the timeout. Defaults to
  #   {#retry_count}.
  # @param retry_timeout [Numeric, nil] Total timeout for retries. A value
  #   of nil indicates no time limit, and retries are limited only by
  #   count. Defaults to {#retry_timeout}.
  # @raise [MetadataServerNotResponding] if the Metadata Server is not
  #   responding
  # @return [Response] the data from the metadata server
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#385
  def lookup_response(path, query: T.unsafe(nil), open_timeout: T.unsafe(nil), request_timeout: T.unsafe(nil), retry_count: T.unsafe(nil), retry_timeout: T.unsafe(nil)); end

  # The timeout for opening http connections in seconds.
  #
  # @return [Numeric]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#325
  def open_timeout; end

  # The timeout for opening http connections in seconds.
  #
  # @param timeout [Numeric]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#334
  def open_timeout=(timeout); end

  # The overrides, or nil if overrides are not present.
  # If present, overrides will answer all metadata queries, and actual
  # calls to the metadata server will be blocked.
  #
  # @return [Overrides, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#554
  def overrides; end

  # Set the overrides. You can also set nil to disable overrides.
  # If present, overrides will answer all metadata queries, and actual
  # calls to the metadata server will be blocked.
  #
  # @param new_overrides [Overrides, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#563
  def overrides=(new_overrides); end

  # The total timeout for an HTTP request in seconds.
  #
  # @return [Numeric]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#343
  def request_timeout; end

  # The total timeout for an HTTP request in seconds.
  #
  # @param timeout [Numeric]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#352
  def request_timeout=(timeout); end

  # Reset the cache, overrides, and all settings to default, for testing.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#630
  def reset!; end

  # Clear the existence cache, for testing.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#650
  def reset_existence!; end

  # The default maximum number of times to retry a query for a key.
  # A value of 1 means 2 attempts (i.e. 1 retry). A value of nil means
  # there is no limit to the number of retries, although there could be
  # an overall timeout.
  #
  # Defaults to {DEFAULT_RETRY_COUNT}.
  #
  # @return [Integer, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#285
  def retry_count; end

  # The default maximum number of times to retry a query for a key.
  # A value of 1 means 2 attempts (i.e. 1 retry). A value of nil means
  # there is no limit to the number of retries, although there could be
  # an overall timeout.
  #
  # Defaults to {DEFAULT_RETRY_COUNT}.
  #
  # @return [Integer, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#285
  def retry_count=(_arg0); end

  # The time in seconds between retries. This time includes the time
  # spent by the previous attempt.
  #
  # Defaults to {DEFAULT_RETRY_INTERVAL}.
  #
  # @return [Numeric]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#306
  def retry_interval; end

  # The time in seconds between retries. This time includes the time
  # spent by the previous attempt.
  #
  # Defaults to {DEFAULT_RETRY_INTERVAL}.
  #
  # @return [Numeric]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#306
  def retry_interval=(_arg0); end

  # The default overall timeout across all retries of a lookup, in
  # seconds. A value of nil means there is no timeout, although there
  # could be a limit to the number of retries.
  #
  # Defaults to {DEFAULT_RETRY_TIMEOUT}.
  #
  # @return [Numeric, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#296
  def retry_timeout; end

  # The default overall timeout across all retries of a lookup, in
  # seconds. A value of nil means there is no timeout, although there
  # could be a limit to the number of retries.
  #
  # Defaults to {DEFAULT_RETRY_TIMEOUT}.
  #
  # @return [Numeric, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#296
  def retry_timeout=(_arg0); end

  # The variables access object
  #
  # @private
  # @return [Google::Cloud::Env::Variables]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#617
  def variables; end

  # A time in seconds allotted to environment warmup, during which
  # retries will not be ended. This handles certain environments in which
  # the Metadata Server might not be fully awake until some time after
  # application startup. A value of nil disables this warmup period.
  #
  # Defaults to {DEFAULT_WARMUP_TIME}.
  #
  # @return [Numeric, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#318
  def warmup_time; end

  # A time in seconds allotted to environment warmup, during which
  # retries will not be ended. This handles certain environments in which
  # the Metadata Server might not be fully awake until some time after
  # application startup. A value of nil disables this warmup period.
  #
  # Defaults to {DEFAULT_WARMUP_TIME}.
  #
  # @return [Numeric, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#318
  def warmup_time=(_arg0); end

  # Run the given block with the overrides replaced with the given set
  # (or nil to disable overrides in the block). The original overrides
  # setting is restored at the end of the block. This is used for
  # debugging/testing/mocking.
  #
  # @param temp_overrides [Overrides, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#578
  def with_overrides(temp_overrides); end

  private

  # Extract the lifetime of an access token
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#807
  def access_token_lifetime(data); end

  # Stringify keys in a query hash
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#833
  def canonicalize_query(query); end

  # Create and return a new LazyDict cache for the metadata
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#737
  def create_cache; end

  # Compute the lifetime of data, given the path and data. Returns the
  # value in seconds, or nil for nonexpiring data.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#794
  def determine_data_lifetime(path, data); end

  # Attempt to determine if we're on GCE (if we haven't previously), and
  # update the existence flag. Return true if we *could* be on GCE, or
  # false if we're definitely not.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#704
  def gce_check; end

  # Extract the lifetime of an identity token
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#819
  def identity_token_lifetime(data); end

  # Look up the given path, without using the cache.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#752
  def internal_lookup(path, query, open_timeout, request_timeout); end

  # Lookup from overrides and return the result or raise.
  # This must be called from within the mutex, and assumes that
  # overrides is non-nil.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#843
  def lookup_override(path, query); end

  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#729
  def maybe_gae; end

  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#719
  def maybe_gcf; end

  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#724
  def maybe_gcr; end

  # Update existence based on a received result
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#777
  def post_update_existence(success, current_time = T.unsafe(nil)); end
end

# The default host for the metadata server
#
# @return [String]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#35
Google::Cloud::Env::ComputeMetadata::DEFAULT_HOST = T.let(T.unsafe(nil), String)

# The default timeout in seconds for opening http connections
#
# @return [Numeric]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#41
Google::Cloud::Env::ComputeMetadata::DEFAULT_OPEN_TIMEOUT = T.let(T.unsafe(nil), Float)

# The default timeout in seconds for request responses
#
# @return [Numeric]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#47
Google::Cloud::Env::ComputeMetadata::DEFAULT_REQUEST_TIMEOUT = T.let(T.unsafe(nil), Float)

# The default number of retries
#
# @return [Integer]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#53
Google::Cloud::Env::ComputeMetadata::DEFAULT_RETRY_COUNT = T.let(T.unsafe(nil), Integer)

# The default interval between retries, in seconds
#
# @return [Numeric]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#65
Google::Cloud::Env::ComputeMetadata::DEFAULT_RETRY_INTERVAL = T.let(T.unsafe(nil), Float)

# The default timeout across retries
#
# @return [nil]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#59
Google::Cloud::Env::ComputeMetadata::DEFAULT_RETRY_TIMEOUT = T.let(T.unsafe(nil), T.untyped)

# The default time in seconds to wait for environment warmup.
#
# @return [Numeric]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#71
Google::Cloud::Env::ComputeMetadata::DEFAULT_WARMUP_TIME = T.let(T.unsafe(nil), Integer)

# The standard set of headers
#
# @private
# @return [Hash{String=>String}]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#85
Google::Cloud::Env::ComputeMetadata::FLAVOR_HEADER = T.let(T.unsafe(nil), Hash)

# A set of overrides for metadata access. This is used in
# {ComputeMetadata#overrides=} and {ComputeMetadata#with_overrides}.
# Generally, you should create and populate an overrides object, then
# set it using one of those methods.
#
# An empty overrides object that contains no data is interpreted as a
# metadata server that does not respond and raises
# MetadataServerNotResponding. Otherwise, the overrides specifies what
# responses are returned for specified queries, and any query not
# explicitly set will result in a 404.
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#156
class Google::Cloud::Env::ComputeMetadata::Overrides
  # Create an empty overrides object.
  #
  # @return [Overrides] a new instance of Overrides
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#160
  def initialize; end

  # Add an override to the object, providing just a body string.
  #
  # @param path [String] The key path (e.g. `project/project-id`)
  # @param string [String] The response string to return.
  # @param query [Hash{String => String}] Any additional query
  #   parameters for the request.
  # @return [self] for chaining
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#189
  def add(path, string, query: T.unsafe(nil), headers: T.unsafe(nil)); end

  # Add an override for the ping request.
  #
  # @return [self] for chaining
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#200
  def add_ping; end

  # Add an override to the object, providing a full response.
  #
  # @param path [String] The key path (e.g. `project/project-id`)
  # @param response [Response] The response object to return.
  # @param query [Hash{String => String}] Any additional query
  #   parameters for the request.
  # @return [self] for chaining
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#174
  def add_response(path, response, query: T.unsafe(nil)); end

  # Clear all data from these overrides
  #
  # @return [self] for chaining
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#209
  def clear; end

  # Returns true if there is at least one override present
  #
  # @return [true, false]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#233
  def empty?; end

  # Look up a response from the override data.
  #
  # @param path [String] The key path (e.g. `project/project-id`)
  # @param query [Hash{String => String}] Any additional query
  #   parameters for the request.
  # @return [String] The response
  # @return [nil] if there is no data for the given query
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#224
  def lookup(path, query: T.unsafe(nil)); end
end

# The base path of metadata server queries.
#
# @private
# @return [String]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#78
Google::Cloud::Env::ComputeMetadata::PATH_BASE = T.let(T.unsafe(nil), String)

# Basic HTTP response object, returned by
# {ComputeMetadata#lookup_response}.
#
# This object duck-types the `status`, `body`, and `headers` fields of
# `Faraday::Response`. It also includes the CLOCK_MONOTONIC time when
# the data was retrieved.
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#95
class Google::Cloud::Env::ComputeMetadata::Response
  # Create a response object.
  #
  # @param status [Integer] The HTTP status, normally 200
  # @param body [String] The HTTP body as a string
  # @param headers [Hash{String=>String}] The HTTP response headers.
  #   Normally, the `Metadata-Flavor` header must be set to the value
  #   `Google`.
  # @return [Response] a new instance of Response
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#105
  def initialize(status, body, headers); end

  # The HTTP response body
  #
  # @return [String]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#122
  def body; end

  # Returns true if the metadata-flavor is correct for Google Cloud
  #
  # @return [boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#139
  def google_flavor?; end

  # The HTTP response headers
  #
  # @return [Hash{String=>String}]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#128
  def headers; end

  # The CLOCK_MONOTONIC time at which this response was retrieved.
  #
  # @return [Numeric]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#133
  def retrieval_monotonic_time; end

  # The HTTP status code
  #
  # @return [Integer]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#116
  def status; end
end

# A buffer in seconds for token expiry. Our cache for the token will
# expire approximately this many seconds before the declared expiry
# time of the token itself.
#
# We want this value to be positive so that we provide some buffer to
# offset any clock skew and Metadata Server latency that might affect
# our calculation of the expiry time, but more importantly so that a
# client has approximately this amount of time to use a token we give
# them before it expires.
#
# We don't want this to be much higher, however, to keep the load down
# on the Metadata Server. We've been advised by the compute/serverless
# engineering teams to set this value less than 4 minutes because the
# Metadata Server can refresh the token as late as 4 minutes before the
# actual expiry of the previous token. If our cache expires and we
# request a new token, we actually want to receive a new token rather
# than the previous old token. See internal issue b/311414224.
#
# @private
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#695
Google::Cloud::Env::ComputeMetadata::TOKEN_EXPIRY_BUFFER = T.let(T.unsafe(nil), Integer)

# A list of exceptions that are considered transient. They trigger a
# retry if received from an HTTP attempt, and they are not cached (i.e.
# the cache lifetime is set to 0.)
#
# @private
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#666
Google::Cloud::Env::ComputeMetadata::TRANSIENT_EXCEPTIONS = T.let(T.unsafe(nil), Array)

# Access to the SMBIOS information needed to determine if this Ruby
# process is running on a Google compute platform.
#
# This information lives at a file system path on Linux, but in the
# Registry on Windows.
#
# You can provide an override to "mock out" the behavior of this object.
#
# source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#31
class Google::Cloud::Env::ComputeSMBIOS
  # Create an SMBIOS access object
  #
  # @return [ComputeSMBIOS] a new instance of ComputeSMBIOS
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#35
  def initialize; end

  # Determine whether the SMBIOS state suggests that we are running on a
  # Google compute platform.
  #
  # This method may read the file system (on Linux) or registry (on
  # Windows) the first time it is called, but it will cache the result
  # for subsequent calls.
  #
  # @return [true, false]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#82
  def google_compute?; end

  # The current override value for the product name, either a string
  # value, or nil to disable mocking.
  #
  # @return [nil, String]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#92
  def override_product_name; end

  # The current override value for the product name, either a string
  # value, or nil to disable mocking.
  #
  # @return [nil, String]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#92
  def override_product_name=(_arg0); end

  # Read the product name. On a Google compute platform, this should
  # include the word "Google".
  #
  # This method may read the file system (on Linux) or registry (on
  # Windows) the first time it is called, but it will cache the result
  # for subsequent calls.
  #
  # @return [String] Product name, or the empty string if not found.
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#50
  def product_name; end

  # The source of the product name data. Will be one of the following:
  #
  # * `:linux` - The data comes from the Linux SMBIOS under /sys
  # * `:windows` - The data comes from the Windows Registry
  # * `:error` - The data could not be obtained
  # * `:override` - The data comes from an override
  #
  # This method may read the file system (on Linux) or registry (on
  # Windows) the first time it is called, but it will cache the result
  # for subsequent calls.
  #
  # @return [Symbol] The source
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#68
  def product_name_source; end

  # Run the given block with the product name mock modified. This is
  # generally used for debugging/testing/mocking.
  #
  # @param override_name [nil, String]
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#100
  def with_override_product_name(override_name); end

  private

  # source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#121
  def load_product_name; end
end

# @private The Linux file path
#
# source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#117
Google::Cloud::Env::ComputeSMBIOS::LINUX_FILEPATH = T.let(T.unsafe(nil), String)

# @private The Windows registry key name
#
# source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#115
Google::Cloud::Env::ComputeSMBIOS::WINDOWS_KEYNAME = T.let(T.unsafe(nil), String)

# @private The Windows registry key path
#
# source://google-cloud-env//lib/google/cloud/env/compute_smbios.rb#113
Google::Cloud::Env::ComputeSMBIOS::WINDOWS_KEYPATH = T.let(T.unsafe(nil), String)

# Access to file system contents.
#
# This is a simple class that reads the contents of objects in the file
# system, caching data so that subsequent accesses do not need to reread
# the file system.
#
# You can also "mock" the file system by providing a hash of overrides.
# If overrides are present, actual file system access is disabled; that
# is, overrides are "all or nothing".
#
# This class does not provide any controls for data size. If you read a
# large file, its contents will stay in memory for the lifetime of the
# Ruby process.
#
# source://google-cloud-env//lib/google/cloud/env/file_system.rb#37
class Google::Cloud::Env::FileSystem
  # Create a file system access object with no overrides.
  #
  # @return [FileSystem] a new instance of FileSystem
  #
  # source://google-cloud-env//lib/google/cloud/env/file_system.rb#41
  def initialize; end

  # The overrides hash, or nil if overrides are not present.
  # The hash maps paths to contents of the file at that path.
  #
  # @return [Hash{String => String}, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/file_system.rb#86
  def overrides; end

  # Set the overrides hash. You can either provide a hash of file paths
  # to content, or nil to disable overrides. If overrides are present,
  # actual filesystem access is disabled; overrides are "all or nothing".
  #
  # @param new_overrides [Hash{String => String}, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/file_system.rb#95
  def overrides=(new_overrides); end

  # Read the given file from the file system and return its contents.
  #
  # @param path [String] The path to the file.
  # @param binary [boolean] Whether to read in binary mode. Defaults to
  #   false. This must be consistent across multiple requests for the
  #   same path; if it is not, an error will be raised.
  # @return [String] if the file exists.
  # @return [nil] if the file does not exist.
  #
  # source://google-cloud-env//lib/google/cloud/env/file_system.rb#68
  def read(path, binary: T.unsafe(nil)); end

  # Run the given block with the overrides replaced with the given hash
  # (or nil to disable overrides in the block). The original overrides
  # setting is restored at the end of the block. This is used for
  # debugging/testing/mocking.
  #
  # @param temp_overrides [nil, Hash{String => String}]
  #
  # source://google-cloud-env//lib/google/cloud/env/file_system.rb#109
  def with_overrides(temp_overrides); end
end

# This expands on {LazyValue} by providing a lazy key-value dictionary.
# Each key uses a separate LazyValue; hence multiple keys can be in the
# process of computation concurrently and independently.
#
# We keep this private for now so we can move it in the future if we need
# it to be available to other libraries. Currently it should not be used
# outside of Google::Cloud::Env.
#
# @private
#
# source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#677
class Google::Cloud::Env::LazyDict
  # Create a LazyDict.
  #
  # You must pass a block that will be called to compute the value the
  # first time it is accessed. The block takes the key as an argument and
  # should evaluate to the value for that key, or raise an exception on
  # error. To specify a value that expires, use
  # {LazyValue.expiring_value}. To raise an exception that expires, use
  # {LazyValue.raise_expiring_error}.
  #
  # You can optionally pass a retry manager, which controls how
  # subsequent accesses might try calling the block again if a compute
  # attempt fails with an exception. A retry manager should either be an
  # instance of {Retries} or an object that duck types it.
  #
  # @param retries [Retries, Proc] A retry manager. The default is a retry
  #   manager that tries only once. You can provide either a static
  #   retry manager or a Proc that returns a retry manager.
  # @param block [Proc] A block that can be called to attempt to compute
  #   the value given the key.
  # @return [LazyDict] a new instance of LazyDict
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#699
  def initialize(retries: T.unsafe(nil), &block); end

  # Returns the value for the given key. This will either return the
  # value or raise an error indicating failure to compute the value. If
  # the value was previously cached, it will return that cached value,
  # otherwise it will either run the computation to try to determine the
  # value, or wait for another thread that is already running the
  # computation.
  #
  # Any arguments beyond the initial key argument will be passed to the
  # block if it is called, but are ignored if a cached value is returned.
  #
  # @param key [Object] the key
  # @param extra_args [Array] extra arguments to pass to the block
  # @raise [Exception] if an error happened while computing the value
  # @return [Object] the value
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#722
  def [](key, *extra_args); end

  # This method calls {#get} repeatedly until a final result is available
  # or retries have exhausted.
  #
  # Note: this method spins on {#get}, although honoring any retry delay.
  # Thus, it is best to call this only if retries are limited or a retry
  # delay has been configured.
  #
  # @param key [Object] the key
  # @param extra_args [Array] extra arguments to pass to the block
  # @param transient_errors [Array<Class>] An array of exception classes
  #   that will be treated as transient and will allow await to
  #   continue retrying. Exceptions omitted from this list will be
  #   treated as fatal errors and abort the call. Default is
  #   `[StandardError]`.
  # @param max_tries [Integer, nil] The maximum number of times this will
  #   call {#get} before giving up, or nil for a potentially unlimited
  #   number of attempts. Default is 1.
  # @param max_time [Numeric, nil] The maximum time in seconds this will
  #   spend before giving up, or nil (the default) for a potentially
  #   unlimited timeout.
  # @raise [Exception] if a fatal error happened, or retries have been
  #   exhausted.
  # @return [Object] the value
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#753
  def await(key, *extra_args, transient_errors: T.unsafe(nil), max_tries: T.unsafe(nil), max_time: T.unsafe(nil)); end

  # Force the cache for the given key to expire immediately, if
  # computation is complete.
  #
  # Any cached value will be cleared, the retry count is reset, and the
  # next access will call the compute block as if it were the first
  # access. Returns true if this took place. Has no effect and returns
  # false if the computation is not yet complete (i.e. if a thread is
  # currently computing, or if the last attempt failed and retries have
  # not yet been exhausted.)
  #
  # @param key [Object] the key
  # @return [true, false] whether the cache was expired
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#785
  def expire!(key); end

  # Force the values for all keys to expire immediately.
  #
  # @return [Array<Object>] A list of keys that were expired. A key is
  #   *not* included if its computation is not yet complete (i.e. if a
  #   thread is currently computing, or if the last attempt failed and
  #   retries have not yet been exhausted.)
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#797
  def expire_all!; end

  # Returns the value for the given key. This will either return the
  # value or raise an error indicating failure to compute the value. If
  # the value was previously cached, it will return that cached value,
  # otherwise it will either run the computation to try to determine the
  # value, or wait for another thread that is already running the
  # computation.
  #
  # Any arguments beyond the initial key argument will be passed to the
  # block if it is called, but are ignored if a cached value is returned.
  #
  # @param key [Object] the key
  # @param extra_args [Array] extra arguments to pass to the block
  # @raise [Exception] if an error happened while computing the value
  # @return [Object] the value
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#722
  def get(key, *extra_args); end

  # Returns the current low-level state for the given key. Does not block
  # for computation. See {LazyValue#internal_state} for details.
  #
  # @param key [Object] the key
  # @return [Array] the low-level state
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#767
  def internal_state(key); end

  # Set the cache value for the given key explicitly and immediately.
  # If a computation is in progress, it is "detached" and its result will
  # no longer be considered.
  #
  # @param key [Object] the key
  # @param value [Object] the value to set
  # @param lifetime [Numeric] the lifetime until expiration in seconds,
  #   or nil (the default) for no expiration.
  # @return [Object] the value
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#818
  def set!(key, value, lifetime: T.unsafe(nil)); end

  private

  # Ensures that exactly one LazyValue exists for the given key, and
  # returns it.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#829
  def lookup_key(key); end
end

# A lazy value box with thread-safe memoization. The first time accessed
# it will call a given block to compute its value, and will cache that
# value. Subsequent requests will return the cached value.
#
# At most one thread will be allowed to run the computation; if another
# thread is already in the middle of a computation, any new threads
# requesting the value will wait until the existing computation is
# complete, and will use that computation's result rather than kicking
# off their own computation.
#
# If a computation fails with an exception, that exception will also be
# memoized and reraised on subsequent accesses. A LazyValue can also be
# configured so subsequent accesses will retry the computation if the
# previous computation failed. The maximum number of retries is
# configurable, as is the retry "interval", i.e. the time since the last
# failure before an access will retry the computation.
#
# By default, a computation's memoized value (or final error after
# retries have been exhausted) is maintained for the lifetime of the Ruby
# process. However, a computation can also cause its result (or error) to
# expire after a specified number of seconds, forcing a recomputation on
# the next access following expiration, by calling
# {LazyValue.expiring_value} or {LazyValue.raise_expiring_error}.
#
# We keep this private for now so we can move it in the future if we need
# it to be available to other libraries. Currently it should not be used
# outside of Google::Cloud::Env.
#
# @private
#
# source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#53
class Google::Cloud::Env::LazyValue
  # Create a LazyValue.
  #
  # You must pass a block that will be called to compute the value the
  # first time it is accessed. The block should evaluate to the desired
  # value, or raise an exception on error. To specify a value that
  # expires, use {LazyValue.expiring_value}. To raise an exception that
  # expires, use {LazyValue.raise_expiring_error}.
  #
  # You can optionally pass a retry manager, which controls how
  # subsequent accesses might try calling the block again if a compute
  # attempt fails with an exception. A retry manager should either be an
  # instance of {Retries} or an object that duck types it.
  #
  # @param retries [Retries] A retry manager. The default is a retry
  #   manager that tries only once.
  # @param block [Proc] A block that can be called to attempt to compute
  #   the value.
  # @raise [ArgumentError]
  # @return [LazyValue] a new instance of LazyValue
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#118
  def initialize(retries: T.unsafe(nil), &block); end

  # This method calls {#get} repeatedly until a final result is available
  # or retries have exhausted.
  #
  # Note: this method spins on {#get}, although honoring any retry delay.
  # Thus, it is best to call this only if retries are limited or a retry
  # delay has been configured.
  #
  # @param extra_args [Array] extra arguments to pass to the block
  # @param transient_errors [Array<Class>] An array of exception classes
  #   that will be treated as transient and will allow await to
  #   continue retrying. Exceptions omitted from this list will be
  #   treated as fatal errors and abort the call. Default is
  #   `[StandardError]`.
  # @param max_tries [Integer, nil] The maximum number of times this will
  #   call {#get} before giving up, or nil for a potentially unlimited
  #   number of attempts. Default is 1.
  # @param max_time [Numeric, nil] The maximum time in seconds this will
  #   spend before giving up, or nil (the default) for a potentially
  #   unlimited timeout.
  # @param delay_epsilon [Numeric] An extra delay in seconds to ensure
  #   that retries happen after the retry delay period
  # @raise [Exception] if a fatal error happened, or retries have been
  #   exhausted.
  # @return [Object] the value
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#309
  def await(*extra_args, transient_errors: T.unsafe(nil), max_tries: T.unsafe(nil), max_time: T.unsafe(nil), delay_epsilon: T.unsafe(nil)); end

  # Force this cache to expire immediately, if computation is complete.
  # Any cached value will be cleared, the retry count is reset, and the
  # next access will call the compute block as if it were the first
  # access. Returns true if this took place. Has no effect and returns
  # false if the computation is not yet complete (i.e. if a thread is
  # currently computing, or if the last attempt failed and retries have
  # not yet been exhausted.)
  #
  # @return [true, false] whether the cache was expired
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#393
  def expire!; end

  # Returns the value. This will either return the value or raise an
  # error indicating failure to compute the value.
  #
  # If the value was previously cached, it will return that cached value,
  # otherwise it will either run the computation to try to determine the
  # value, or wait for another thread that is already running the
  # computation. Thus, this method could block.
  #
  # Any arguments passed will be forwarded to the block if called, but
  # are ignored if a cached value is returned.
  #
  # @raise [Exception] if an error happened while computing the value
  # @return [Object] the value
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#252
  def get(*extra_args); end

  # Returns the current low-level state immediately without waiting for
  # computation. Returns a 3-tuple (i.e. a 3-element array) in which the
  # first element is a symbol indicating the overall state, as described
  # below, and the second and third elements are set accordingly.
  #
  # States (the first tuple element) are:
  # * `:pending` - The value has not been computed, or previous
  #   computation attempts have failed but there are retries pending. The
  #   second element will be the most recent error, or nil if no
  #   computation attempt has yet happened. The third element will be the
  #   monotonic time of the end of the current retry delay, or nil if
  #   there will be no delay.
  # * `:computing` - A thread is currently computing the value. The
  #   second element is nil. The third elements is the monotonic time
  #   when the computation started.
  # * `:success` - The computation is finished, and the value is returned
  #   in the second element. The third element may be a numeric value
  #   indicating the expiration monotonic time, or nil for no expiration.
  # * `:failed` - The computation failed finally and no more retries will
  #   be done. The error is returned in the second element. The third
  #   element may be a numeric value indicating the expiration monotonic
  #   time, or nil for no expiration.
  #
  # Future updates may add array elements without warning. Callers should
  # be prepared to ignore additional unexpected elements.
  #
  # @return [Array]
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#366
  def internal_state; end

  # Set the cache value explicitly and immediately. If a computation is
  # in progress, it is "detached" and its result will no longer be
  # considered.
  #
  # @param value [Object] the value to set
  # @param lifetime [Numeric] the lifetime until expiration in seconds,
  #   or nil (the default) for no expiration.
  # @return [Object] the value
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#412
  def set!(value, lifetime: T.unsafe(nil)); end

  private

  # Either return the cached value or raise the cached error.
  # This must be called from within the mutex.
  #
  # @private
  # @raise [@error]
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#477
  def cached_value; end

  # Determines the delay until the next retry during an await
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#639
  def determine_await_retry_delay(state, expiry_time, delay_epsilon); end

  # Determines the expires_at value in monotonic time, given a lifetime.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#661
  def determine_expiry(lifetime); end

  # Reset this cache, transitioning to the Pending state and resetting
  # the retry count.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#498
  def do_expire; end

  # Checks for any threads that need backfill, and if so triggers
  # backfill mode.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#564
  def enter_backfill; end

  # Initializes compute mode.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#540
  def enter_compute(cur_time); end

  # Sets state to reflect a failed computation (as long as this
  # computation wasn't interrupted by someone calling #set!).
  # Then raises the error.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#612
  def handle_failure(error); end

  # Sets state to reflect a successful computation (as long as this
  # computation wasn't interrupted by someone calling #set!).
  # Then returns the computed value.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#588
  def handle_success(value); end

  # Checks whether all threads are done with backfill, and if so notifies
  # threads waiting for backfill to finish.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#575
  def leave_backfill; end

  # Finishes compute mode, notifying threads waiting on it.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#552
  def leave_compute; end

  # Perform computation, and transition state on completion.
  # This must be called from outside the mutex.
  # Returns the final value, or raises the final error.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#461
  def perform_compute(extra_args); end

  # Determine whether we should expire a cached value and compute a new
  # one. Happens in the Finished state if @expires_at is in the past.
  # This must be called from within the mutex.
  #
  # @private
  # @return [Boolean]
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#488
  def should_expire?; end

  # Wait for backfill to complete if it is in progress, otherwise just
  # return immediately.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#509
  def wait_backfill; end

  # Wait for computation to complete.
  # Also adds the current thread to the backfill list, ensuring that the
  # computing thread will enter the backfill phase on completion. Once
  # computation is done, also checks whether the current thread is the
  # last one to backfill, and if so, turns off backfill mode.
  # This must be called from within the mutex.
  #
  # @private
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#522
  def wait_compute; end

  class << self
    # Creates a special object that can be returned from a computation to
    # indicate that a value expires after the given number of seconds.
    # Any access after the expiration will cause a recomputation.
    #
    # @param lifetime [Numeric] timeout in seconds
    # @param value [Object] the computation result
    #
    # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#63
    def expiring_value(lifetime, value); end

    # Raise an error that, if it is the final result (i.e. retries have
    # been exhausted), will expire after the given number of seconds. Any
    # access after the expiration will cause a recomputation. If retries
    # will not have been exhausted, expiration is ignored.
    #
    # The error can be specified as an exception object, a string (in
    # which case a RuntimeError will be raised), or a class that descends
    # from Exception (in which case an error of that type will be
    # created, and passed any additional args given).
    #
    # @param lifetime [Numeric] timeout in seconds
    # @param error [String, Exception, Class] the error to raise
    # @param args [Array] any arguments to pass to an error constructor
    # @raise [ExpiringError]
    #
    # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#83
    def raise_expiring_error(lifetime, error, *args); end
  end
end

# Internal type signaling an error with an expiration.
#
# @private
#
# source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#446
class Google::Cloud::Env::LazyValue::ExpiringError < ::StandardError
  # @return [ExpiringError] a new instance of ExpiringError
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#447
  def initialize(lifetime); end

  # Returns the value of attribute lifetime.
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#452
  def lifetime; end
end

# Internal type signaling a value with an expiration
#
# @private
#
# source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#432
class Google::Cloud::Env::LazyValue::ExpiringValue
  # @return [ExpiringValue] a new instance of ExpiringValue
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#433
  def initialize(lifetime, value); end

  # Returns the value of attribute lifetime.
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#438
  def lifetime; end

  # Returns the value of attribute value.
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#439
  def value; end
end

# Error raised when the compute metadata server is expected to be
# present in the current environment, but couldn't be contacted.
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#859
class Google::Cloud::Env::MetadataServerNotResponding < ::StandardError
  # Create a new MetadataServerNotResponding.
  #
  # @param message [String] Error message. If not provided, defaults to
  #   {DEFAULT_MESSAGE}.
  # @return [MetadataServerNotResponding] a new instance of MetadataServerNotResponding
  #
  # source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#876
  def initialize(message = T.unsafe(nil)); end
end

# Default message for the error
#
# @return [String]
#
# source://google-cloud-env//lib/google/cloud/env/compute_metadata.rb#864
Google::Cloud::Env::MetadataServerNotResponding::DEFAULT_MESSAGE = T.let(T.unsafe(nil), String)

# A simple retry manager with optional delay and backoff. It retries
# until either a configured maximum number of attempts has been
# reached, or a configurable total time has elapsed since the first
# failure.
#
# This class is not thread-safe by itself. Access should be protected
# by an external mutex.
#
# We keep this private for now so we can move it in the future if we need
# it to be available to other libraries. Currently it should not be used
# outside of Google::Cloud::Env.
#
# @private
#
# source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#865
class Google::Cloud::Env::Retries
  # Create and initialize a retry manager.
  #
  # @param max_tries [Integer, nil] Maximum number of attempts before we
  #   give up altogether, or nil for no maximum. Default is 1,
  #   indicating one attempt and no retries.
  # @param max_time [Numeric, nil] The maximum amount of time in seconds
  #   until we give up altogether, or nil for no maximum. Default is
  #   nil.
  # @param initial_delay [Numeric] Initial delay between attempts, in
  #   seconds. Default is 0.
  # @param max_delay [Numeric, nil] Maximum delay between attempts, in
  #   seconds, or nil for no max. Default is nil.
  # @param delay_multiplier [Numeric] Multipler applied to the delay
  #   between attempts. Default is 1 for no change.
  # @param delay_adder [Numeric] Value added to the delay between
  #   attempts. Default is 0 for no change.
  # @param delay_includes_time_elapsed [true, false] Whether to deduct any
  #   time already elapsed from the retry delay. Default is false.
  # @raise [ArgumentError]
  # @return [Retries] a new instance of Retries
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#886
  def initialize(max_tries: T.unsafe(nil), max_time: T.unsafe(nil), initial_delay: T.unsafe(nil), max_delay: T.unsafe(nil), delay_multiplier: T.unsafe(nil), delay_adder: T.unsafe(nil), delay_includes_time_elapsed: T.unsafe(nil)); end

  # Cause the retry limit to be reached immediately.
  #
  # @return [self]
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#946
  def finish!; end

  # Returns true if the retry limit has been reached.
  #
  # @return [true, false]
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#927
  def finished?; end

  # Advance to the next attempt.
  #
  # Returns nil if the retry limit has been reached. Otherwise, returns
  # the delay in seconds until the next retry (0 for no delay). Raises an
  # error if the previous call already returned nil.
  #
  # @param start_time [Numeric, nil] Optional start time in monotonic time
  #   units. Used if delay_includes_time_elapsed is set.
  # @return [Numeric, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#962
  def next(start_time: T.unsafe(nil)); end

  # Reset to the initial attempt.
  #
  # @return [self]
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#936
  def reset!; end

  # Create a duplicate in the reset state
  #
  # @return [Retries]
  #
  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#912
  def reset_dup; end

  private

  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#992
  def adjusted_delay(start_time, cur_time); end

  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#982
  def advance_delay; end

  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#987
  def advance_retry(cur_time); end

  # source://google-cloud-env//lib/google/cloud/env/lazy_value.rb#976
  def setup_first_retry(cur_time); end
end

# Library version
#
# @return [String]
#
# source://google-cloud-env//lib/google/cloud/env/version.rb#23
Google::Cloud::Env::VERSION = T.let(T.unsafe(nil), String)

# Access to system environment variables.
#
# This is a hashlike object that controls access to environment variable
# data. It supports temporarily changing the data source (i.e. swapping
# ::ENV out for a different set of data) for mocking.
#
# source://google-cloud-env//lib/google/cloud/env/variables.rb#28
class Google::Cloud::Env::Variables
  # Create an enviroment variables access object. This is initially
  # backed by the actual environment variables (i.e. ENV).
  #
  # @return [Variables] a new instance of Variables
  #
  # source://google-cloud-env//lib/google/cloud/env/variables.rb#33
  def initialize; end

  # Fetch the given environment variable from the backing data.
  #
  # @param key [String]
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/variables.rb#43
  def [](key); end

  # The backing data is a hash or hash-like object that represents the
  # environment variable data. This can either be the actual environment
  # variables object (i.e. ENV) or a substitute hash used for mocking.
  #
  # @return [Hash{String=>String}]
  #
  # source://google-cloud-env//lib/google/cloud/env/variables.rb#55
  def backing_data; end

  # The backing data is a hash or hash-like object that represents the
  # environment variable data. This can either be the actual environment
  # variables object (i.e. ENV) or a substitute hash used for mocking.
  #
  # @return [Hash{String=>String}]
  #
  # source://google-cloud-env//lib/google/cloud/env/variables.rb#55
  def backing_data=(_arg0); end

  # Fetch the given environment variable from the backing data.
  #
  # @param key [String]
  # @return [String, nil]
  #
  # source://google-cloud-env//lib/google/cloud/env/variables.rb#43
  def get(key); end

  # Run the given block with the backing data replaced with the given
  # hash. The original backing data is restored afterward. This is used
  # for debugging/testing/mocking.
  #
  # @param temp_backing_data [Hash{String=>String}]
  #
  # source://google-cloud-env//lib/google/cloud/env/variables.rb#64
  def with_backing_data(temp_backing_data); end
end
