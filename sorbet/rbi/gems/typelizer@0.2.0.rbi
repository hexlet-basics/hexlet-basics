# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `typelizer` gem.
# Please instead update this file by running `bin/tapioca gem typelizer`.


# source://typelizer//lib/typelizer/version.rb#3
module Typelizer
  class << self
    # @private
    #
    # source://typelizer//lib/typelizer.rb#40
    def base_classes; end

    # @yield [Config]
    #
    # source://typelizer//lib/typelizer.rb#42
    def configure; end

    # Returns the value of attribute dirs.
    #
    # source://typelizer//lib/typelizer.rb#34
    def dirs; end

    # Sets the attribute dirs
    #
    # @param value the value to set the attribute dirs to.
    #
    # source://typelizer//lib/typelizer.rb#34
    def dirs=(_arg0); end

    # @return [Boolean]
    #
    # source://typelizer//lib/typelizer.rb#28
    def enabled?; end

    # Returns the value of attribute listen.
    #
    # source://typelizer//lib/typelizer.rb#37
    def listen; end

    # Sets the attribute listen
    #
    # @param value the value to set the attribute listen to.
    #
    # source://typelizer//lib/typelizer.rb#37
    def listen=(_arg0); end

    # Returns the value of attribute logger.
    #
    # source://typelizer//lib/typelizer.rb#36
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://typelizer//lib/typelizer.rb#36
    def logger=(_arg0); end

    # Returns the value of attribute reject_class.
    #
    # source://typelizer//lib/typelizer.rb#35
    def reject_class; end

    # Sets the attribute reject_class
    #
    # @param value the value to set the attribute reject_class to.
    #
    # source://typelizer//lib/typelizer.rb#35
    def reject_class=(_arg0); end

    private

    # Sets the attribute base_classes
    #
    # @param value the value to set the attribute base_classes to.
    #
    # source://typelizer//lib/typelizer.rb#48
    def base_classes=(_arg0); end
  end
end

# source://typelizer//lib/typelizer/config.rb#80
class Typelizer::Config < ::Struct; end

# source://typelizer//lib/typelizer/dsl.rb#2
module Typelizer::DSL
  mixes_in_class_methods ::Typelizer::DSL::ClassMethods

  class << self
    # @private
    #
    # source://typelizer//lib/typelizer/dsl.rb#11
    def extended(base); end

    # typelize_from Model
    # typelize attribute_name: ["string", "Date", optional: true, nullable: true, multi: true]
    #
    # source://typelizer//lib/typelizer/dsl.rb#6
    def included(base); end
  end
end

# source://typelizer//lib/typelizer/dsl.rb#16
module Typelizer::DSL::ClassMethods
  # Returns the value of attribute keyless_type.
  #
  # source://typelizer//lib/typelizer/dsl.rb#48
  def keyless_type; end

  # Sets the attribute keyless_type
  #
  # @param value the value to set the attribute keyless_type to.
  #
  # source://typelizer//lib/typelizer/dsl.rb#48
  def keyless_type=(_arg0); end

  # save association of serializer attributes to type
  # can be invoked multiple times
  #
  # source://typelizer//lib/typelizer/dsl.rb#40
  def typelize(type = T.unsafe(nil), type_params = T.unsafe(nil), **attributes); end

  # save association of serializer to model
  #
  # source://typelizer//lib/typelizer/dsl.rb#32
  def typelize_from(model); end

  # source://typelizer//lib/typelizer/dsl.rb#50
  def typelize_meta(**attributes); end

  # @yield [@typelizer_config]
  #
  # source://typelizer//lib/typelizer/dsl.rb#17
  def typelizer_config; end

  # source://typelizer//lib/typelizer/dsl.rb#27
  def typelizer_interface; end

  private

  # source://typelizer//lib/typelizer/dsl.rb#56
  def assign_type_information(attribute_name, attributes); end
end

# source://typelizer//lib/typelizer/generator.rb#4
class Typelizer::Generator
  # @return [Generator] a new instance of Generator
  #
  # source://typelizer//lib/typelizer/generator.rb#9
  def initialize(config = T.unsafe(nil)); end

  # source://typelizer//lib/typelizer/generator.rb#16
  def call(force: T.unsafe(nil)); end

  # Returns the value of attribute config.
  #
  # source://typelizer//lib/typelizer/generator.rb#14
  def config; end

  # source://typelizer//lib/typelizer/generator.rb#24
  def interfaces; end

  # Returns the value of attribute writer.
  #
  # source://typelizer//lib/typelizer/generator.rb#14
  def writer; end

  private

  # source://typelizer//lib/typelizer/generator.rb#45
  def read_serializers(files = T.unsafe(nil)); end

  # source://typelizer//lib/typelizer/generator.rb#33
  def target_serializers; end

  class << self
    # source://typelizer//lib/typelizer/generator.rb#5
    def call(**args); end
  end
end

# source://typelizer//lib/typelizer/interface.rb#2
class Typelizer::Interface
  # @return [Interface] a new instance of Interface
  #
  # source://typelizer//lib/typelizer/interface.rb#9
  def initialize(serializer:); end

  # source://typelizer//lib/typelizer/interface.rb#5
  def config; end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/interface.rb#34
  def empty?; end

  # source://typelizer//lib/typelizer/interface.rb#26
  def filename; end

  # source://typelizer//lib/typelizer/interface.rb#56
  def imports; end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/interface.rb#14
  def inline?; end

  # source://typelizer//lib/typelizer/interface.rb#72
  def inspect; end

  # source://typelizer//lib/typelizer/interface.rb#38
  def meta_fields; end

  # source://typelizer//lib/typelizer/interface.rb#18
  def name; end

  # source://typelizer//lib/typelizer/interface.rb#47
  def properties; end

  # source://typelizer//lib/typelizer/interface.rb#30
  def root_key; end

  # Returns the value of attribute serializer.
  #
  # source://typelizer//lib/typelizer/interface.rb#3
  def serializer; end

  # Returns the value of attribute serializer_plugin.
  #
  # source://typelizer//lib/typelizer/interface.rb#3
  def serializer_plugin; end

  private

  # source://typelizer//lib/typelizer/interface.rb#82
  def extract_typescript_types(type); end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/interface.rb#86
  def global_type?(type); end

  # source://typelizer//lib/typelizer/interface.rb#90
  def infer_types(props, hash_name = T.unsafe(nil)); end

  # source://typelizer//lib/typelizer/interface.rb#106
  def model_class; end

  # source://typelizer//lib/typelizer/interface.rb#114
  def model_plugin; end

  # source://typelizer//lib/typelizer/interface.rb#78
  def self_type_name; end
end

# source://typelizer//lib/typelizer/model_plugins/active_record.rb#2
module Typelizer::ModelPlugins; end

# source://typelizer//lib/typelizer/model_plugins/active_record.rb#3
class Typelizer::ModelPlugins::ActiveRecord
  # @return [ActiveRecord] a new instance of ActiveRecord
  #
  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#4
  def initialize(model_class:, config:); end

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#36
  def comment_for(prop); end

  # Returns the value of attribute config.
  #
  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#9
  def config; end

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#43
  def enum_for(prop); end

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#11
  def infer_types(prop); end

  # Returns the value of attribute model_class.
  #
  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#9
  def model_class; end
end

# source://typelizer//lib/typelizer/model_plugins/auto.rb#3
module Typelizer::ModelPlugins::Auto
  class << self
    # source://typelizer//lib/typelizer/model_plugins/auto.rb#5
    def new(model_class:, config:); end

    # source://typelizer//lib/typelizer/model_plugins/auto.rb#9
    def plugin(model_class); end
  end
end

# source://typelizer//lib/typelizer/model_plugins/poro.rb#3
class Typelizer::ModelPlugins::Poro
  # We don't care about intialization
  #
  # @return [Poro] a new instance of Poro
  #
  # source://typelizer//lib/typelizer/model_plugins/poro.rb#5
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://typelizer//lib/typelizer/model_plugins/poro.rb#12
  def comment_for(prop); end

  # source://typelizer//lib/typelizer/model_plugins/poro.rb#16
  def enum_for(prop); end

  # source://typelizer//lib/typelizer/model_plugins/poro.rb#8
  def infer_types(prop); end
end

# source://typelizer//lib/typelizer/property.rb#2
class Typelizer::Property < ::Struct
  # Returns the value of attribute column_name
  #
  # @return [Object] the current value of column_name
  def column_name; end

  # Sets the attribute column_name
  #
  # @param value [Object] the value to set the attribute column_name to.
  # @return [Object] the newly set value
  def column_name=(_); end

  # Returns the value of attribute comment
  #
  # @return [Object] the current value of comment
  def comment; end

  # Sets the attribute comment
  #
  # @param value [Object] the value to set the attribute comment to.
  # @return [Object] the newly set value
  def comment=(_); end

  # Returns the value of attribute enum
  #
  # @return [Object] the current value of enum
  def enum; end

  # Sets the attribute enum
  #
  # @param value [Object] the value to set the attribute enum to.
  # @return [Object] the newly set value
  def enum=(_); end

  # source://typelizer//lib/typelizer/property.rb#7
  def inspect; end

  # Returns the value of attribute multi
  #
  # @return [Object] the current value of multi
  def multi; end

  # Sets the attribute multi
  #
  # @param value [Object] the value to set the attribute multi to.
  # @return [Object] the newly set value
  def multi=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  def name=(_); end

  # Returns the value of attribute nullable
  #
  # @return [Object] the current value of nullable
  def nullable; end

  # Sets the attribute nullable
  #
  # @param value [Object] the value to set the attribute nullable to.
  # @return [Object] the newly set value
  def nullable=(_); end

  # Returns the value of attribute optional
  #
  # @return [Object] the current value of optional
  def optional; end

  # Sets the attribute optional
  #
  # @param value [Object] the value to set the attribute optional to.
  # @return [Object] the newly set value
  def optional=(_); end

  # source://typelizer//lib/typelizer/property.rb#12
  def to_s; end

  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  def type=(_); end

  private

  # source://typelizer//lib/typelizer/property.rb#22
  def type_name; end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://typelizer//lib/typelizer/railtie.rb#2
class Typelizer::Railtie < ::Rails::Railtie; end

# source://typelizer//lib/typelizer/renderer.rb#6
class Typelizer::Renderer
  # @return [Renderer] a new instance of Renderer
  #
  # source://typelizer//lib/typelizer/renderer.rb#7
  def initialize(template); end

  # source://typelizer//lib/typelizer/renderer.rb#11
  def call(**context); end

  private

  # Returns the value of attribute erb.
  #
  # source://typelizer//lib/typelizer/renderer.rb#21
  def erb; end

  # source://typelizer//lib/typelizer/renderer.rb#23
  def indent(content, multiplier = T.unsafe(nil)); end
end

# source://typelizer//lib/typelizer/serializer_plugins/auto.rb#2
module Typelizer::SerializerPlugins; end

# source://typelizer//lib/typelizer/serializer_plugins/ams.rb#5
class Typelizer::SerializerPlugins::AMS < ::Typelizer::SerializerPlugins::Base
  # source://typelizer//lib/typelizer/serializer_plugins/ams.rb#6
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/ams.rb#19
  def properties; end

  # source://typelizer//lib/typelizer/serializer_plugins/ams.rb#13
  def typelize_method_transform(method:, name:, binding:, type:, attrs:); end
end

# source://typelizer//lib/typelizer/serializer_plugins/alba.rb#5
class Typelizer::SerializerPlugins::Alba < ::Typelizer::SerializerPlugins::Base
  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#40
  def meta_fields; end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#20
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#14
  def properties; end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#36
  def root_key; end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#30
  def typelize_method_transform(method:, name:, binding:, type:, attrs:); end

  private

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#53
  def build_property(name, attr, **options); end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#117
  def ts_mapper; end
end

# source://typelizer//lib/typelizer/serializer_plugins/alba.rb#6
Typelizer::SerializerPlugins::Alba::ALBA_TS_MAPPER = T.let(T.unsafe(nil), Hash)

# source://typelizer//lib/typelizer/serializer_plugins/auto.rb#3
module Typelizer::SerializerPlugins::Auto
  class << self
    # source://typelizer//lib/typelizer/serializer_plugins/auto.rb#5
    def new(serializer:, config:); end

    # source://typelizer//lib/typelizer/serializer_plugins/auto.rb#9
    def plugin(serializer); end
  end
end

# source://typelizer//lib/typelizer/serializer_plugins/base.rb#3
class Typelizer::SerializerPlugins::Base
  # @return [Base] a new instance of Base
  #
  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#4
  def initialize(serializer:, config:); end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#13
  def meta_fields; end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#21
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#25
  def properties; end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#9
  def root_key; end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#17
  def typelize_method_transform(method:, name:, binding:, type:, attrs:); end

  private

  # Returns the value of attribute config.
  #
  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#31
  def config; end

  # Returns the value of attribute serializer.
  #
  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#31
  def serializer; end
end

# source://typelizer//lib/typelizer/serializer_plugins/oj_serializers.rb#5
class Typelizer::SerializerPlugins::OjSerializers < ::Typelizer::SerializerPlugins::Base
  # source://typelizer//lib/typelizer/serializer_plugins/oj_serializers.rb#6
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/oj_serializers.rb#13
  def properties; end
end

# source://typelizer//lib/typelizer/config.rb#2
Typelizer::TYPE_MAPPING = T.let(T.unsafe(nil), Hash)

# source://typelizer//lib/typelizer/version.rb#4
Typelizer::VERSION = T.let(T.unsafe(nil), String)

# source://typelizer//lib/typelizer/writer.rb#6
class Typelizer::Writer
  # @return [Writer] a new instance of Writer
  #
  # source://typelizer//lib/typelizer/writer.rb#7
  def initialize; end

  # source://typelizer//lib/typelizer/writer.rb#14
  def call(interfaces, force:); end

  # Returns the value of attribute config.
  #
  # source://typelizer//lib/typelizer/writer.rb#12
  def config; end

  # Returns the value of attribute template_cache.
  #
  # source://typelizer//lib/typelizer/writer.rb#12
  def template_cache; end

  private

  # source://typelizer//lib/typelizer/writer.rb#60
  def cleanup_output_dir; end

  # source://typelizer//lib/typelizer/writer.rb#55
  def render_template(template, **context); end

  # source://typelizer//lib/typelizer/writer.rb#40
  def write_file(filename, fingerprint); end

  # source://typelizer//lib/typelizer/writer.rb#28
  def write_index(interfaces); end

  # source://typelizer//lib/typelizer/writer.rb#34
  def write_interface(interface); end
end
