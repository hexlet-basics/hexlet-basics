# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `js-routes` gem.
# Please instead update this file by running `bin/tapioca gem js-routes`.


# source://js-routes//lib/js_routes/engine.rb#3
module JsRoutes
  extend ::JsRoutes::Types

  class << self
    # source://js-routes//lib/js_routes.rb#29
    sig { returns(::JsRoutes::Configuration) }
    def configuration; end

    # source://js-routes//lib/js_routes.rb#50
    sig { params(opts: T.untyped).returns(::String) }
    def definitions(**opts); end

    # source://js-routes//lib/js_routes.rb#55
    sig { params(file_name: T.nilable(T.any(::Pathname, ::String)), opts: T.untyped).void }
    def definitions!(file_name = T.unsafe(nil), **opts); end

    # source://js-routes//lib/js_routes.rb#68
    sig { returns(::String) }
    def digest; end

    # source://js-routes//lib/js_routes.rb#34
    sig { params(opts: T.untyped).returns(::String) }
    def generate(**opts); end

    # source://js-routes//lib/js_routes.rb#39
    sig { params(file_name: T.nilable(T.any(::Pathname, ::String)), typed: T::Boolean, opts: T.untyped).void }
    def generate!(file_name = T.unsafe(nil), typed: T.unsafe(nil), **opts); end

    # source://js-routes//lib/js_routes.rb#63
    sig { params(value: T.untyped).returns(::String) }
    def json(value); end

    # source://js-routes//lib/js_routes.rb#45
    sig { params(file_name: T.nilable(T.any(::Pathname, ::String)), opts: T.untyped).void }
    def remove!(file_name = T.unsafe(nil), **opts); end

    # source://js-routes//lib/js_routes.rb#24
    sig { params(block: T.proc.params(arg0: ::JsRoutes::Configuration).void).void }
    def setup(&block); end
  end
end

# source://js-routes//lib/js_routes/configuration.rb#9
class JsRoutes::Configuration
  include ::JsRoutes::Types

  # source://js-routes//lib/js_routes/configuration.rb#47
  sig { params(attributes: T.nilable(T::Hash[::Symbol, T.untyped])).void }
  def initialize(attributes = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/configuration.rb#90
  sig { params(attribute: T.any(::String, ::Symbol)).returns(T.untyped) }
  def [](attribute); end

  # source://js-routes//lib/js_routes/configuration.rb#36
  sig do
    returns(T.any(::Rails::Application, T.proc.returns(T.any(::Rails::Application, T::Class[::Rails::Engine])), T::Class[::Rails::Engine]))
  end
  def application; end

  # @return [ApplicationCaller]
  #
  # source://js-routes//lib/js_routes/configuration.rb#36
  def application=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#74
  sig { params(attributes: T::Hash[::Symbol, T.untyped]).returns(::JsRoutes::Configuration) }
  def assign(attributes); end

  # source://js-routes//lib/js_routes/configuration.rb#44
  sig { returns(T.nilable(T.any(::String, T.proc.returns(T.nilable(::String))))) }
  def banner; end

  # @return [BannerCaller]
  #
  # source://js-routes//lib/js_routes/configuration.rb#44
  def banner=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#26
  sig { returns(T::Boolean) }
  def camel_case; end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/configuration.rb#26
  def camel_case=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#30
  sig { returns(T::Boolean) }
  def compact; end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/configuration.rb#30
  def compact=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#28
  sig { returns(T::Hash[::Symbol, T.untyped]) }
  def default_url_options; end

  # @return [Options]
  #
  # source://js-routes//lib/js_routes/configuration.rb#28
  def default_url_options=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#38
  sig { returns(T::Boolean) }
  def documentation; end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/configuration.rb#38
  def documentation=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#110
  sig { returns(T::Boolean) }
  def dts?; end

  # source://js-routes//lib/js_routes/configuration.rb#105
  sig { returns(T::Boolean) }
  def esm?; end

  # source://js-routes//lib/js_routes/configuration.rb#16
  sig { returns(T.any(::Regexp, T::Array[::Regexp])) }
  def exclude; end

  # @return [Clusivity]
  #
  # source://js-routes//lib/js_routes/configuration.rb#16
  def exclude=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#20
  sig { returns(T.nilable(T.any(::Pathname, ::String))) }
  def file; end

  # @return [FileName]
  #
  # source://js-routes//lib/js_routes/configuration.rb#20
  def file=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#18
  sig { returns(T.any(::Regexp, T::Array[::Regexp])) }
  def include; end

  # @return [Clusivity]
  #
  # source://js-routes//lib/js_routes/configuration.rb#18
  def include=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#100
  sig { params(attributes: T::Hash[::Symbol, T.untyped]).returns(::JsRoutes::Configuration) }
  def merge(attributes); end

  # source://js-routes//lib/js_routes/configuration.rb#115
  sig { returns(T::Boolean) }
  def modern?; end

  # source://js-routes//lib/js_routes/configuration.rb#40
  sig { returns(T.nilable(::String)) }
  def module_type; end

  # @return [String, nil]
  #
  # source://js-routes//lib/js_routes/configuration.rb#40
  def module_type=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#14
  sig { returns(T.nilable(::String)) }
  def namespace; end

  # @return [String, nil]
  #
  # source://js-routes//lib/js_routes/configuration.rb#14
  def namespace=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#42
  sig { returns(T::Boolean) }
  def optional_definition_params; end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/configuration.rb#42
  def optional_definition_params=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#130
  sig { returns(::Pathname) }
  def output_file; end

  # source://js-routes//lib/js_routes/configuration.rb#22
  sig { returns(T.nilable(T.any(::String, T.proc.returns(::String)))) }
  def prefix; end

  # source://js-routes//lib/js_routes/configuration.rb#94
  def prefix=(value); end

  # source://js-routes//lib/js_routes/configuration.rb#120
  sig { void }
  def require_esm; end

  # source://js-routes//lib/js_routes/configuration.rb#32
  sig { returns(T.nilable(::String)) }
  def serializer; end

  # @return [String, nil]
  #
  # source://js-routes//lib/js_routes/configuration.rb#32
  def serializer=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#85
  sig { params(block: T.proc.params(arg0: ::JsRoutes::Configuration).void).returns(T.self_type) }
  def setup(&block); end

  # source://js-routes//lib/js_routes/configuration.rb#125
  sig { returns(::String) }
  def source_file; end

  # source://js-routes//lib/js_routes/configuration.rb#34
  sig { returns(T.any(::String, ::Symbol)) }
  def special_options_key; end

  # @return [Literal]
  #
  # source://js-routes//lib/js_routes/configuration.rb#34
  def special_options_key=(_arg0); end

  # source://js-routes//lib/js_routes/configuration.rb#24
  sig { returns(T::Boolean) }
  def url_links; end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/configuration.rb#24
  def url_links=(_arg0); end

  protected

  # source://js-routes//lib/js_routes/configuration.rb#172
  sig { returns(T.proc.returns(::String)) }
  def default_banner; end

  # source://js-routes//lib/js_routes/configuration.rb#155
  sig { returns(::String) }
  def default_file_name; end

  # source://js-routes//lib/js_routes/configuration.rb#160
  sig { void }
  def normalize; end

  # source://js-routes//lib/js_routes/configuration.rb#144
  sig { void }
  def normalize_and_verify; end

  # source://js-routes//lib/js_routes/configuration.rb#150
  sig { params(parts: ::String).returns(::Pathname) }
  def pathname(*parts); end

  # source://js-routes//lib/js_routes/configuration.rb#165
  sig { void }
  def verify; end
end

# source://js-routes//lib/js_routes/engine.rb#33
class JsRoutes::Engine < ::Rails::Engine
  class << self
    # source://js-routes//lib/js_routes/engine.rb#34
    def install_sprockets!; end

    private

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#15
    def __class_attr___callbacks; end

    # source://activesupport/8.0.1/lib/active_support/class_attribute.rb#17
    def __class_attr___callbacks=(new_value); end
  end
end

# source://js-routes//lib/js_routes.rb#74
module JsRoutes::Generators; end

# source://js-routes//lib/js_routes/generators/base.rb#4
class JsRoutes::Generators::Base < ::Rails::Generators::Base
  protected

  # source://js-routes//lib/js_routes/generators/base.rb#13
  def application_js_path; end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/generators/base.rb#24
  def depends_on?(gem_name); end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/generators/base.rb#28
  def depends_on_js_bundling?; end

  # @return [Boolean]
  #
  # source://js-routes//lib/js_routes/generators/base.rb#32
  def depends_on_webpacker?; end

  class << self
    # @private
    #
    # source://js-routes//lib/js_routes/generators/base.rb#6
    def inherited(subclass); end
  end
end

# source://js-routes//lib/js_routes/generators/middleware.rb#3
class JsRoutes::Generators::Middleware < ::JsRoutes::Generators::Base
  # source://js-routes//lib/js_routes/generators/middleware.rb#5
  def create_middleware; end

  protected

  # source://js-routes//lib/js_routes/generators/middleware.rb#42
  def gitignore_content; end

  # source://js-routes//lib/js_routes/generators/middleware.rb#25
  def middleware_content; end

  # source://js-routes//lib/js_routes/generators/middleware.rb#18
  def pack_content; end

  # source://js-routes//lib/js_routes/generators/middleware.rb#34
  def rakefile_content; end
end

# source://js-routes//lib/js_routes/generators/webpacker.rb#4
class JsRoutes::Generators::Webpacker < ::Rails::Generators::Base
  # source://js-routes//lib/js_routes/generators/webpacker.rb#6
  def create_webpack; end

  protected

  # source://js-routes//lib/js_routes/generators/webpacker.rb#27
  def loader_content; end

  # source://js-routes//lib/js_routes/generators/webpacker.rb#20
  def pack_content; end
end

# source://js-routes//lib/js_routes/instance.rb#8
class JsRoutes::Instance
  include ::JsRoutes::Types

  # Implementation
  #
  # source://js-routes//lib/js_routes/instance.rb#19
  sig { params(options: T.untyped).void }
  def initialize(**options); end

  # source://js-routes//lib/js_routes/instance.rb#50
  sig { returns(::String) }
  def banner; end

  # source://js-routes//lib/js_routes/instance.rb#13
  sig { returns(::JsRoutes::Configuration) }
  def configuration; end

  # source://js-routes//lib/js_routes/instance.rb#25
  sig { returns(::String) }
  def generate; end

  # source://js-routes//lib/js_routes/instance.rb#63
  sig { void }
  def generate!; end

  # source://js-routes//lib/js_routes/instance.rb#82
  sig { void }
  def remove!; end

  protected

  # source://js-routes//lib/js_routes/instance.rb#208
  sig { params(route: ::ActionDispatch::Journey::Route).returns(T.untyped) }
  def app_from_route(route); end

  # source://js-routes//lib/js_routes/instance.rb#128
  sig { returns(T.any(::Rails::Application, T::Class[::Rails::Engine])) }
  def application; end

  # source://js-routes//lib/js_routes/instance.rb#183
  sig { returns(::String) }
  def export_separator; end

  # source://js-routes//lib/js_routes/instance.rb#91
  sig { returns(T::Hash[::String, ::String]) }
  def js_variables; end

  # source://js-routes//lib/js_routes/instance.rb#134
  sig { params(value: T.untyped).returns(::String) }
  def json(value); end

  # source://js-routes//lib/js_routes/instance.rb#195
  sig { params(route: ::ActionDispatch::Journey::Route).returns(T::Array[T::Array[::String]]) }
  def mounted_app_routes(route); end

  # source://js-routes//lib/js_routes/instance.rb#173
  sig { returns(::String) }
  def prevent_types_export; end

  # source://js-routes//lib/js_routes/instance.rb#220
  sig do
    params(
      route: ::ActionDispatch::Journey::Route,
      parent_route: T.nilable(::ActionDispatch::Journey::Route)
    ).returns(T::Array[T::Array[::String]])
  end
  def route_helpers_if_match(route, parent_route = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/instance.rb#165
  sig { returns(::String) }
  def routes_export; end

  # source://js-routes//lib/js_routes/instance.rb#139
  sig do
    params(
      application: T.any(::Rails::Application, T::Class[::Rails::Engine])
    ).returns(T::Array[::ActionDispatch::Journey::Route])
  end
  def routes_from(application); end

  # source://js-routes//lib/js_routes/instance.rb#188
  sig { returns(T::Array[T::Array[::String]]) }
  def routes_list; end

  # source://js-routes//lib/js_routes/instance.rb#144
  sig { returns(::String) }
  def routes_object; end

  # source://js-routes//lib/js_routes/instance.rb#153
  sig { returns(T::Array[T::Array[::String]]) }
  def static_exports; end

  # source://js-routes//lib/js_routes/instance.rb#107
  sig { returns(::String) }
  def wrapper_variable; end
end

# A Rack middleware that automatically updates routes file
# whenever routes.rb is modified
#
# Inspired by
# https://github.com/fnando/i18n-js/blob/v3/lib/i18n/js/middleware.rb
#
# source://js-routes//lib/js_routes/middleware.rb#10
class JsRoutes::Middleware
  include ::JsRoutes::Types
  include ::JsRoutes::Types::RackApp

  # source://js-routes//lib/js_routes/middleware.rb#17
  sig { params(app: T.untyped).void }
  def initialize(app); end

  # source://js-routes//lib/js_routes/middleware.rb#23
  sig { override.params(env: T::Hash[::String, T.untyped]).returns(T::Array[T.untyped]) }
  def call(env); end

  protected

  # source://js-routes//lib/js_routes/middleware.rb#45
  sig { returns(T.nilable(::String)) }
  def fetch_digest; end

  # source://js-routes//lib/js_routes/middleware.rb#40
  sig { void }
  def regenerate; end

  # source://js-routes//lib/js_routes/middleware.rb#31
  sig { void }
  def update_js_routes; end
end

# source://js-routes//lib/js_routes/route.rb#7
class JsRoutes::Route
  include ::JsRoutes::Types

  # source://js-routes//lib/js_routes/route.rb#34
  sig do
    params(
      configuration: ::JsRoutes::Configuration,
      route: ::ActionDispatch::Journey::Route,
      parent_route: T.nilable(::ActionDispatch::Journey::Route)
    ).void
  end
  def initialize(configuration, route, parent_route = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/route.rb#54
  sig { params(absolute: T::Boolean).returns(::String) }
  def body(absolute); end

  # source://js-routes//lib/js_routes/route.rb#25
  sig { returns(::JsRoutes::Configuration) }
  def configuration; end

  # source://js-routes//lib/js_routes/route.rb#67
  sig { returns(::String) }
  def definition_body; end

  # source://js-routes//lib/js_routes/route.rb#48
  sig { returns(T::Array[T::Boolean]) }
  def helper_types; end

  # source://js-routes//lib/js_routes/route.rb#41
  sig { returns(T::Array[T::Array[::String]]) }
  def helpers; end

  # source://js-routes//lib/js_routes/route.rb#76
  sig { returns(T.nilable(::String)) }
  def optional_parts_type; end

  # source://js-routes//lib/js_routes/route.rb#31
  sig { returns(T.nilable(::ActionDispatch::Journey::Route)) }
  def parent_route; end

  # source://js-routes//lib/js_routes/route.rb#28
  sig { returns(::ActionDispatch::Journey::Route) }
  def route; end

  protected

  # source://js-routes//lib/js_routes/route.rb#186
  sig { params(values: T.nilable(T.any(::String, ::Symbol))).returns(::String) }
  def apply_case(*values); end

  # source://js-routes//lib/js_routes/route.rb#88
  sig { params(absolute: T::Boolean).returns(T::Array[T.untyped]) }
  def arguments(absolute); end

  # source://js-routes//lib/js_routes/route.rb#148
  sig { returns(T::Array[T.untyped]) }
  def base_arguments; end

  # source://js-routes//lib/js_routes/route.rb#98
  sig { returns(T.nilable(::String)) }
  def base_name; end

  # source://js-routes//lib/js_routes/route.rb#125
  sig { returns(::String) }
  def documentation; end

  # source://js-routes//lib/js_routes/route.rb#174
  sig { returns(::String) }
  def documentation_params; end

  # source://js-routes//lib/js_routes/route.rb#119
  sig { params(absolute: T::Boolean).returns(::String) }
  def helper_name(absolute); end

  # source://js-routes//lib/js_routes/route.rb#114
  sig { params(value: T.untyped).returns(::String) }
  def json(value); end

  # source://js-routes//lib/js_routes/route.rb#181
  sig { params(matchers: T.any(::Regexp, T::Array[::Regexp])).returns(T::Boolean) }
  def match?(matchers); end

  # source://js-routes//lib/js_routes/route.rb#93
  sig { returns(T::Boolean) }
  def match_configuration?; end

  # source://js-routes//lib/js_routes/route.rb#143
  sig { returns(T::Array[::Symbol]) }
  def optional_parts; end

  # source://js-routes//lib/js_routes/route.rb#104
  sig { returns(T.nilable(T.untyped)) }
  def parent_spec; end

  # source://js-routes//lib/js_routes/route.rb#153
  sig { returns(T::Hash[::Symbol, T::Hash[::Symbol, T.untyped]]) }
  def parts_table; end

  # source://js-routes//lib/js_routes/route.rb#138
  sig { returns(T::Array[::Symbol]) }
  def required_parts; end

  # This function serializes Journey route into JSON structure
  # We do not use Hash for human readable serialization
  # And preffer Array serialization because it is shorter.
  # Routes.js file will be smaller.
  #
  # source://js-routes//lib/js_routes/route.rb#196
  sig do
    params(
      spec: T.nilable(T.any(::String, T.untyped)),
      parent_spec: T.nilable(T.untyped)
    ).returns(T.nilable(T.any(::String, T::Array[T.untyped])))
  end
  def serialize(spec, parent_spec = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/route.rb#217
  sig { params(spec: T.untyped, parent_spec: T.nilable(T.untyped)).returns(T::Array[T.untyped]) }
  def serialize_spec(spec, parent_spec = T.unsafe(nil)); end

  # source://js-routes//lib/js_routes/route.rb#109
  sig { returns(T.untyped) }
  def spec; end
end

# source://js-routes//lib/js_routes/route.rb#11
JsRoutes::Route::FILTERED_DEFAULT_PARTS = T.let(T.unsafe(nil), Array)

# source://js-routes//lib/js_routes/route.rb#13
JsRoutes::Route::NODE_TYPES = T.let(T.unsafe(nil), Hash)

# source://js-routes//lib/js_routes/route.rb#12
JsRoutes::Route::URL_OPTIONS = T.let(T.unsafe(nil), Array)

# source://js-routes//lib/js_routes/engine.rb#4
class JsRoutes::SprocketsExtension
  # @return [SprocketsExtension] a new instance of SprocketsExtension
  #
  # source://js-routes//lib/js_routes/engine.rb#5
  def initialize(filename, &block); end

  # source://js-routes//lib/js_routes/engine.rb#10
  def render(context, empty_hash_wtf); end

  class << self
    # source://js-routes//lib/js_routes/engine.rb#22
    def call(input); end

    # source://js-routes//lib/js_routes/engine.rb#14
    def run(filename, source, context); end
  end
end

# source://js-routes//lib/js_routes/types.rb#7
module JsRoutes::Types; end

# source://js-routes//lib/js_routes/types.rb#19
JsRoutes::Types::Application = T.type_alias { T.any(::Rails::Application, T::Class[::Rails::Engine]) }

# source://js-routes//lib/js_routes/types.rb#22
JsRoutes::Types::ApplicationCaller = T.type_alias { T.any(::Rails::Application, T.proc.returns(T.any(::Rails::Application, T::Class[::Rails::Engine])), T::Class[::Rails::Engine]) }

# source://js-routes//lib/js_routes/types.rb#25
JsRoutes::Types::BannerCaller = T.type_alias { T.nilable(T.any(::String, T.proc.returns(T.nilable(::String)))) }

# source://js-routes//lib/js_routes/types.rb#28
JsRoutes::Types::Clusivity = T.type_alias { T.any(::Regexp, T::Array[::Regexp]) }

# source://js-routes//lib/js_routes/types.rb#30
JsRoutes::Types::ConfigurationBlock = T.type_alias { T.proc.params(arg0: ::JsRoutes::Configuration).void }

# source://js-routes//lib/js_routes/types.rb#29
JsRoutes::Types::FileName = T.type_alias { T.nilable(T.any(::Pathname, ::String)) }

# source://js-routes//lib/js_routes/types.rb#17
JsRoutes::Types::JourneyRoute = T.type_alias { ::ActionDispatch::Journey::Route }

# source://js-routes//lib/js_routes/types.rb#16
JsRoutes::Types::Literal = T.type_alias { T.any(::String, ::Symbol) }

# source://js-routes//lib/js_routes/types.rb#14
JsRoutes::Types::Options = T.type_alias { T::Hash[::Symbol, T.untyped] }

# source://js-routes//lib/js_routes/types.rb#33
JsRoutes::Types::Prefix = T.type_alias { T.nilable(T.any(::String, T.proc.returns(::String))) }

# @abstract Subclasses must implement the `abstract` methods below.
#
# source://js-routes//lib/js_routes/types.rb#37
module JsRoutes::Types::RackApp
  interface!

  # @abstract
  #
  # source://js-routes//lib/js_routes/types.rb#44
  sig { abstract.params(input: T::Hash[::String, T.untyped]).returns(T::Array[T.untyped]) }
  def call(input); end
end

# source://js-routes//lib/js_routes/types.rb#18
JsRoutes::Types::RouteSpec = T.type_alias { T.untyped }

# source://js-routes//lib/js_routes/types.rb#15
JsRoutes::Types::SpecNode = T.type_alias { T.nilable(T.any(::String, T.untyped)) }

# source://js-routes//lib/js_routes/types.rb#11
JsRoutes::Types::StringArray = T.type_alias { T::Array[::String] }

# source://js-routes//lib/js_routes/types.rb#13
JsRoutes::Types::StringHash = T.type_alias { T::Hash[::String, T.untyped] }

# source://js-routes//lib/js_routes/types.rb#12
JsRoutes::Types::SymbolArray = T.type_alias { T::Array[::Symbol] }

# source://js-routes//lib/js_routes/types.rb#10
JsRoutes::Types::UntypedArray = T.type_alias { T::Array[T.untyped] }

# source://js-routes//lib/js_routes/utils.rb#4
module JsRoutes::Utils
  class << self
    # source://js-routes//lib/js_routes/utils.rb#18
    sig { returns(T.untyped) }
    def deprecator; end

    # source://js-routes//lib/js_routes/utils.rb#7
    sig { returns(T.untyped) }
    def shakapacker; end
  end
end

# source://js-routes//lib/js_routes/version.rb#3
JsRoutes::VERSION = T.let(T.unsafe(nil), String)
