# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tins` gem.
# Please instead update this file by running `bin/tapioca gem tins`.


# source://tins//lib/tins/xt/full.rb#80
class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin
  include ::Tins::Full
  include ::Tins::AskAndSend
end

# Tins is a collection of useful Ruby utilities and tools that provide
# common functionality without requiring external dependencies. It's designed
# to be a lightweight, drop-in library that enhances Ruby's standard library
# with practical conveniences.
#
# @example Basic usage
#   require 'tins'
#
#   Tins::Once.only_once { puts "Only one instance" }
# @example Automatic class extensions
#   require 'tins/xt'
#
#   # Automatically extends core classes with useful methods
#   "foo".full? # => "foo"
#   "   ".full? # => nil
#
# source://tins//lib/tins/xt/blank.rb#1
module Tins; end

# A module that provides methods to call private and protected methods on
# objects.
#
# source://tins//lib/tins/ask_and_send.rb#4
module Tins::AskAndSend
  # The ask_and_send method attempts to invoke a given method on the object
  # if that method is available.
  #
  # method doesn't exist
  #
  # @param method_name [Symbol] the name of the method to invoke
  # @param args [Array] arguments to pass to the method
  # @return [Object, nil] the result of the method call or nil if the
  # @yield [block] optional block to pass to the method
  #
  # source://tins//lib/tins/ask_and_send.rb#13
  def ask_and_send(method_name, *args, &block); end

  # The ask_and_send! method attempts to invoke a private or protected method
  # on the object.
  #
  # method doesn't exist
  #
  # @param method_name [Symbol] the name of the method to call
  # @param args [Array] arguments to pass to the method
  # @param block [Proc] optional block to pass to the method
  # @return [Object, nil] the result of the method call or nil if the
  #
  # source://tins//lib/tins/ask_and_send.rb#28
  def ask_and_send!(method_name, *args, &block); end

  # The ask_and_send_or_self method attempts to invoke the specified method
  # on the object If the method exists, it calls the method with the provided
  # arguments and block If the method does not exist, it returns the object
  # itself
  #
  # doesn't exist
  #
  # @param method_name [Symbol] the name of the method to call
  # @param args [Array] the arguments to pass to the method
  # @param block [Proc] the block to pass to the method
  # @return [Object] the result of the method call or self if the method
  #
  # source://tins//lib/tins/ask_and_send.rb#45
  def ask_and_send_or_self(method_name, *args, &block); end

  # The ask_and_send_or_self! method attempts to send a message to the object
  # with the given method name and arguments. If the object responds to the
  # method, it executes the method and returns the result. If the object does
  # not respond to the method, it returns the object itself.
  #
  # the method is not found
  #
  # @param method_name [Symbol] the name of the method to send
  # @param args [Array] the arguments to pass to the method
  # @param block [Proc] the block to pass to the method
  # @return [Object] the result of the method call or the object itself if
  #
  # source://tins//lib/tins/ask_and_send.rb#64
  def ask_and_send_or_self!(method_name, *args, &block); end
end

# The Tins::Blank module provides a consistent way to check if objects are
# "blank" (empty, nil, or contain only whitespace). This follows Rails'
# convention.
#
# @example Basic usage
#   "".blank?        # => true
#   "   ".blank?     # => true
#   "foo".blank?     # => false
#   [].blank?        # => true
#   [1, 2].blank?    # => false
#   nil.blank?       # => true
#   false.blank?     # => true
#   true.blank?      # => false
# @example Using present?
#   "".present?      # => false
#   "foo".present?   # => true
#
# source://tins//lib/tins/xt/blank.rb#19
module Tins::Blank; end

# Blank behavior for Array instances
#
# Arrays are blank if they are empty.
# This implementation aliases the `empty?` method to `blank?`.
#
# source://tins//lib/tins/xt/blank.rb#73
module Tins::Blank::Array
  class << self
    # The included method is a hook that gets called when this module is
    # included in another class or module.
    #
    # It sets up blank? behavior by aliasing the empty? method to blank? in
    # the including class/module.
    #
    # @param modul [Object] the class or module that includes this module
    #
    # source://tins//lib/tins/xt/blank.rb#81
    def included(modul); end
  end
end

# Blank behavior for FalseClass instances
#
# source://tins//lib/tins/xt/blank.rb#50
module Tins::Blank::FalseClass
  # False values are always considered blank.
  #
  # @return [Boolean] true (always)
  #
  # source://tins//lib/tins/xt/blank.rb#54
  def blank?; end
end

# Blank behavior for Hash instances
#
# Hashes are blank if they are empty.
# This implementation aliases the `empty?` method to `blank?`.
#
# source://tins//lib/tins/xt/blank.rb#92
module Tins::Blank::Hash
  class << self
    # The included method is a hook that gets called when this module is
    # included in another class or module.
    #
    # It sets up blank? behavior by aliasing the empty? method to blank? in
    # the including class/module.
    #
    # @param modul [Object] the class or module that includes this module
    #
    # source://tins//lib/tins/xt/blank.rb#100
    def included(modul); end
  end
end

# Blank behavior for NilClass instances
#
# source://tins//lib/tins/xt/blank.rb#39
module Tins::Blank::NilClass
  # Nil values are always considered blank.
  #
  # @return [Boolean] true (always)
  #
  # source://tins//lib/tins/xt/blank.rb#44
  def blank?; end
end

# Blank behavior for Numeric instances
#
# Numbers are considered blank only if they are zero.
# This implementation aliases the `zero?` method to `blank?`.
#
# source://tins//lib/tins/xt/blank.rb#122
module Tins::Blank::Numeric
  class << self
    # The included method is a hook that gets called when this module is
    # included in another class or module.
    #
    # It sets up blank? behavior by aliasing the zero? method to blank? in
    # the including class/module.
    #
    # @param modul [Object] the class or module that includes this module
    #
    # source://tins//lib/tins/xt/blank.rb#130
    def included(modul); end
  end
end

# Blank behavior for Object instances
#
# source://tins//lib/tins/xt/blank.rb#21
module Tins::Blank::Object
  # Provides a fallback implementation that checks for `empty?` method,
  # falling back to negation of truthiness if not defined.
  #
  # @return [Boolean] true if the object is considered blank, false otherwise
  #
  # source://tins//lib/tins/xt/blank.rb#26
  def blank?; end

  # Checks if the object is not blank
  #
  # @return [Boolean] true if the object is present, false otherwise
  #
  # source://tins//lib/tins/xt/blank.rb#33
  def present?; end
end

# Blank behavior for String instances
#
# source://tins//lib/tins/xt/blank.rb#108
module Tins::Blank::String
  # Strings are blank if they contain only whitespace characters.
  # This uses a regex match against non-whitespace characters.
  #
  # @return [Boolean] true if the string contains only whitespace, false otherwise
  #
  # source://tins//lib/tins/xt/blank.rb#113
  def blank?; end
end

# Blank behavior for TrueClass instances
#
# source://tins//lib/tins/xt/blank.rb#60
module Tins::Blank::TrueClass
  # True values are never considered blank.
  #
  # @return [Boolean] false (always)
  #
  # source://tins//lib/tins/xt/blank.rb#64
  def blank?; end
end

# Provides methods for checking if objects are "full" (non-blank) and safely
# processing them in conditional contexts.
#
# This module adds the `full?` and `all_full?` methods to all objects, enabling
# clean, readable patterns for validation and conditional processing.
#
# @example Basic usage
#   "hello".full?        # => "hello"
#   "".full?             # => nil
# @example Method dispatch with block
#   user.full?(:name) { |name| "Hello #{name}" }  # Returns "Hello John" if name is full
# @example Safe assignment and processing
#   if name = user.full?(:name)
#   puts "Hello #{name}"
#   end
#
# source://tins//lib/tins/xt/full.rb#21
module Tins::Full
  # Checks if all elements in a collection are "full" (not blank). If the
  # object responds to +all?+ and all elements pass the +full?+ test, then
  # the block is executed with the collection itself or the collection is returned.
  #
  # @example Basic usage
  #   [1,2,3].all_full?    # => [1,2,3]
  #   [1,nil,3].all_full?  # => nil
  # @example With block execution
  #   [1,2,3].all_full? { |array| array.sum }
  # @return [Object, nil] The collection if all elements are full, otherwise nil
  #
  # source://tins//lib/tins/xt/full.rb#74
  def all_full?; end

  # Checks if the object is not blank, returning the object itself if it's
  # full, or nil if it's blank. If a method name is provided as +dispatch+,
  # that method is called on the object and the result is checked for being
  # full.
  #
  # dispatched result not nil
  #
  # @example Basic usage
  #   "hello".full?        # => "hello"
  #   "".full?             # => nil
  # @example Method dispatch
  #   user.full?(:name)    # Returns user.name if not blank, nil otherwise
  # @example Method dispatch with arguments
  #   user.full?(:method_with_args, arg1, arg2)
  # @example With block execution
  #   user.full?(:name) { |name| "Hello #{name}" }
  # @param dispatch [Symbol, nil] The method to call on the object (optional)
  # @param args [Array] Arguments to pass to the dispatched method (optional)
  # @return [Object, nil] The object itself if not blank, or the result of
  #   dispatching +dispatch+ if provided and valid, or nil if the object is blank
  # @yield [Object] Optional block to execute with the result if result or
  #
  # source://tins//lib/tins/xt/full.rb#46
  def full?(dispatch = T.unsafe(nil), *args); end
end

# A module for handling terminal-related functionality and terminal
# input/output operations.
#
# Provides methods for interacting with terminal capabilities, reading from
# standard input, and managing terminal sessions.
#
# source://tins//lib/tins/terminal.rb#12
module Tins::Terminal
  extend ::Tins::Terminal

  # Returns the number of columns in the terminal
  #
  # This method attempts to determine the terminal width by checking various sources
  # in order of preference: system winsize information, stty output, tput output,
  # and falls back to a default of 80 columns if none are available
  #
  # @return [Integer] the number of columns in the terminal or 80 as fallback
  #
  # source://tins//lib/tins/terminal.rb#60
  def cols; end

  # Returns the number of columns in the terminal
  #
  # This method attempts to determine the terminal width by checking various sources
  # in order of preference: system winsize information, stty output, tput output,
  # and falls back to a default of 80 columns if none are available
  #
  # @return [Integer] the number of columns in the terminal or 80 as fallback
  #
  # source://tins//lib/tins/terminal.rb#55
  def columns; end

  # Returns the number of rows (lines) in the terminal window.
  #
  # Attempts to determine the terminal size by checking various sources in
  # order of preference: window size, stty command output, tput command
  # output, and defaults to 25 lines if all methods fail.
  #
  # @return [Integer] the number of terminal rows, or 25 as fallback
  #
  # source://tins//lib/tins/terminal.rb#46
  def lines; end

  # Returns the number of rows (lines) in the terminal window.
  #
  # Attempts to determine the terminal size by checking various sources in
  # order of preference: window size, stty command output, tput command
  # output, and defaults to 25 lines if all methods fail.
  #
  # @return [Integer] the number of terminal rows, or 25 as fallback
  #
  # source://tins//lib/tins/terminal.rb#41
  def rows; end

  # Returns the window size of the console.
  #
  # This method attempts to retrieve the terminal window dimensions by
  # accessing the console object and its winsize method.
  #
  # @return [Array<Integer>] an array containing the rows and columns
  #   of the terminal window, or an empty array if the console is not
  #   available or does not support winsize querying
  #
  # source://tins//lib/tins/terminal.rb#21
  def winsize; end
end
