# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `typelizer` gem.
# Please instead update this file by running `bin/tapioca gem typelizer`.


# source://typelizer//lib/typelizer/version.rb#3
module Typelizer
  class << self
    # @private
    #
    # source://typelizer//lib/typelizer.rb#52
    def base_classes; end

    # source://typelizer//lib/typelizer.rb#54
    def configuration; end

    # @yield [configuration]
    #
    # source://typelizer//lib/typelizer.rb#58
    def configure; end

    # source://typelizer//lib/typelizer.rb#38
    def dirs(*args, **_arg1, &block); end

    # source://typelizer//lib/typelizer.rb#41
    def dirs=(*args, **_arg1, &block); end

    # @return [Boolean]
    #
    # source://typelizer//lib/typelizer.rb#43
    def enabled?; end

    # source://typelizer//lib/typelizer.rb#38
    def listen(*args, **_arg1, &block); end

    # source://typelizer//lib/typelizer.rb#41
    def listen=(*args, **_arg1, &block); end

    # Returns the value of attribute logger.
    #
    # source://typelizer//lib/typelizer.rb#49
    def logger; end

    # Sets the attribute logger
    #
    # @param value the value to set the attribute logger to.
    #
    # source://typelizer//lib/typelizer.rb#49
    def logger=(_arg0); end

    # source://typelizer//lib/typelizer.rb#38
    def reject_class(*args, **_arg1, &block); end

    # source://typelizer//lib/typelizer.rb#41
    def reject_class=(*args, **_arg1, &block); end

    # source://typelizer//lib/typelizer.rb#38
    def writer(*args, **_arg1, &block); end

    private

    # Sets the attribute base_classes
    #
    # @param value the value to set the attribute base_classes to.
    #
    # source://typelizer//lib/typelizer.rb#64
    def base_classes=(_arg0); end
  end
end

# Immutable configuration object for a single writer
#
# Use .build to construct from defaults, and #with_overrides to copy with overrides.
#
# source://typelizer//lib/typelizer/config.rb#22
class Typelizer::Config < ::Struct
  # Returns the value of attribute associations_strategy
  #
  # @return [Object] the current value of associations_strategy
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def associations_strategy; end

  # Sets the attribute associations_strategy
  #
  # @param value [Object] the value to set the attribute associations_strategy to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def associations_strategy=(_); end

  # Returns the value of attribute comments
  #
  # @return [Object] the current value of comments
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def comments; end

  # Sets the attribute comments
  #
  # @param value [Object] the value to set the attribute comments to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def comments=(_); end

  # Returns the value of attribute inheritance_strategy
  #
  # @return [Object] the current value of inheritance_strategy
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def inheritance_strategy; end

  # Sets the attribute inheritance_strategy
  #
  # @param value [Object] the value to set the attribute inheritance_strategy to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def inheritance_strategy=(_); end

  # Returns the value of attribute model_plugin
  #
  # @return [Object] the current value of model_plugin
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def model_plugin; end

  # Sets the attribute model_plugin
  #
  # @param value [Object] the value to set the attribute model_plugin to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def model_plugin=(_); end

  # Returns the value of attribute null_strategy
  #
  # @return [Object] the current value of null_strategy
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def null_strategy; end

  # Sets the attribute null_strategy
  #
  # @param value [Object] the value to set the attribute null_strategy to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def null_strategy=(_); end

  # Returns the value of attribute output_dir
  #
  # @return [Object] the current value of output_dir
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def output_dir; end

  # Sets the attribute output_dir
  #
  # @param value [Object] the value to set the attribute output_dir to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def output_dir=(_); end

  # Returns the value of attribute plugin_configs
  #
  # @return [Object] the current value of plugin_configs
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def plugin_configs; end

  # Sets the attribute plugin_configs
  #
  # @param value [Object] the value to set the attribute plugin_configs to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def plugin_configs=(_); end

  # Returns the value of attribute prefer_double_quotes
  #
  # @return [Object] the current value of prefer_double_quotes
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def prefer_double_quotes; end

  # Sets the attribute prefer_double_quotes
  #
  # @param value [Object] the value to set the attribute prefer_double_quotes to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def prefer_double_quotes=(_); end

  # Returns the value of attribute properties_transformer
  #
  # @return [Object] the current value of properties_transformer
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def properties_transformer; end

  # Sets the attribute properties_transformer
  #
  # @param value [Object] the value to set the attribute properties_transformer to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def properties_transformer=(_); end

  # Returns the value of attribute serializer_model_mapper
  #
  # @return [Object] the current value of serializer_model_mapper
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def serializer_model_mapper; end

  # Sets the attribute serializer_model_mapper
  #
  # @param value [Object] the value to set the attribute serializer_model_mapper to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def serializer_model_mapper=(_); end

  # Returns the value of attribute serializer_name_mapper
  #
  # @return [Object] the current value of serializer_name_mapper
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def serializer_name_mapper; end

  # Sets the attribute serializer_name_mapper
  #
  # @param value [Object] the value to set the attribute serializer_name_mapper to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def serializer_name_mapper=(_); end

  # Returns the value of attribute serializer_plugin
  #
  # @return [Object] the current value of serializer_plugin
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def serializer_plugin; end

  # Sets the attribute serializer_plugin
  #
  # @param value [Object] the value to set the attribute serializer_plugin to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def serializer_plugin=(_); end

  # Returns the value of attribute type_mapping
  #
  # @return [Object] the current value of type_mapping
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def type_mapping; end

  # Sets the attribute type_mapping
  #
  # @param value [Object] the value to set the attribute type_mapping to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def type_mapping=(_); end

  # Returns the value of attribute types_global
  #
  # @return [Object] the current value of types_global
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def types_global; end

  # Sets the attribute types_global
  #
  # @param value [Object] the value to set the attribute types_global to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def types_global=(_); end

  # Returns the value of attribute types_import_path
  #
  # @return [Object] the current value of types_import_path
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def types_import_path; end

  # Sets the attribute types_import_path
  #
  # @param value [Object] the value to set the attribute types_import_path to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def types_import_path=(_); end

  # Returns the value of attribute verbatim_module_syntax
  #
  # @return [Object] the current value of verbatim_module_syntax
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def verbatim_module_syntax; end

  # Sets the attribute verbatim_module_syntax
  #
  # @param value [Object] the value to set the attribute verbatim_module_syntax to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/config.rb#22
  def verbatim_module_syntax=(_); end

  # source://typelizer//lib/typelizer/config.rb#95
  def with_overrides(**overrides); end

  class << self
    # source://typelizer//lib/typelizer/config.rb#22
    def [](*_arg0); end

    # source://typelizer//lib/typelizer/config.rb#84
    def build(**overrides); end

    # source://typelizer//lib/typelizer/config.rb#88
    def default_output_dir; end

    # Returns library defaults (built-in) for building a Config.
    # This method creates a fresh Hash each time to avoid sharing mutable state
    # across builds
    #
    # source://typelizer//lib/typelizer/config.rb#49
    def defaults; end

    # source://typelizer//lib/typelizer/config.rb#22
    def inspect; end

    # source://typelizer//lib/typelizer/config.rb#22
    def keyword_init?; end

    # source://typelizer//lib/typelizer/config.rb#22
    def members; end

    # source://typelizer//lib/typelizer/config.rb#22
    def new(*_arg0); end
  end
end

# Central registry for Typelizer multi-writer configuration
#
# Responsibilities:
# - Holds immutable Config per writer name (always includes :default)
# - Maintain flat DSL setters for :default (e.g., config.output_dir = ...)
# - Allows defining/updating named writers via writer(:name) { |cfg| ... }
# - Check unique output_dir across writers to avoid file conflicts
#
# Config priorities:
# - WriterContext merges in order: library defaults < global_settings < writer < DSL inheritance
# - global_settings are only updated by flat setters, not by writer(:default) blocks
#
# source://typelizer//lib/typelizer/configuration.rb#18
class Typelizer::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://typelizer//lib/typelizer/configuration.rb#24
  def initialize; end

  # Returns the value of attribute dirs.
  #
  # source://typelizer//lib/typelizer/configuration.rb#21
  def dirs; end

  # Sets the attribute dirs
  #
  # @param value the value to set the attribute dirs to.
  #
  # source://typelizer//lib/typelizer/configuration.rb#21
  def dirs=(_arg0); end

  # Returns the value of attribute global_settings.
  #
  # source://typelizer//lib/typelizer/configuration.rb#22
  def global_settings; end

  # Returns the value of attribute listen.
  #
  # source://typelizer//lib/typelizer/configuration.rb#21
  def listen; end

  # Sets the attribute listen
  #
  # @param value the value to set the attribute listen to.
  #
  # source://typelizer//lib/typelizer/configuration.rb#21
  def listen=(_arg0); end

  # Returns the value of attribute reject_class.
  #
  # source://typelizer//lib/typelizer/configuration.rb#21
  def reject_class; end

  # Sets the attribute reject_class
  #
  # @param value the value to set the attribute reject_class to.
  #
  # source://typelizer//lib/typelizer/configuration.rb#21
  def reject_class=(_arg0); end

  # Reset writers and keep only `default` writer
  #
  # source://typelizer//lib/typelizer/configuration.rb#72
  def reset_writers!; end

  # Defines or updates a writer configuration.
  #
  # Inherits from the existing writer config (or global_settigns if absent), yields a mutable copy,
  # then freezes and stores it. output_dir is unique and mandatory
  # Also accepts "from" argument, which allows us to inherit configuration from any writer
  #
  # source://typelizer//lib/typelizer/configuration.rb#43
  def writer(name = T.unsafe(nil), from: T.unsafe(nil), &block); end

  # source://typelizer//lib/typelizer/configuration.rb#67
  def writer_config(name = T.unsafe(nil)); end

  # Returns the value of attribute writers.
  #
  # source://typelizer//lib/typelizer/configuration.rb#22
  def writers; end

  private

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/configuration.rb#155
  def config_attribute?(name); end

  # Setters and readers to Writer(:default) config
  # Keep the "flat" setters for the :default writer, for example:
  #   config.output_dir = ...
  #   config.prefer_double_quotes = true
  #
  # source://typelizer//lib/typelizer/configuration.rb#88
  def method_missing(name, *args, &block); end

  # source://typelizer//lib/typelizer/configuration.rb#151
  def normalize_method_name(name); end

  # source://typelizer//lib/typelizer/configuration.rb#147
  def normalize_path(dir); end

  # Normalizes and validates writer name
  #
  # @raise [ArgumentError]
  #
  # source://typelizer//lib/typelizer/configuration.rb#119
  def normalize_writer_name(name); end

  # Validates and registers output directory for uniqueness across writers
  #
  # @raise [ArgumentError]
  #
  # source://typelizer//lib/typelizer/configuration.rb#128
  def register_output_dir!(writer_name, dir); end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/configuration.rb#112
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://typelizer//lib/typelizer/configuration.rb#19
Typelizer::Configuration::DEFAULT_WRITER_NAME = T.let(T.unsafe(nil), Symbol)

# source://typelizer//lib/typelizer/config.rb#20
Typelizer::DEFAULT_TYPES_GLOBAL = T.let(T.unsafe(nil), Array)

# source://typelizer//lib/typelizer/dsl.rb#2
module Typelizer::DSL
  mixes_in_class_methods ::Typelizer::DSL::ClassMethods

  class << self
    # @private
    #
    # source://typelizer//lib/typelizer/dsl.rb#11
    def extended(base); end

    # typelize_from Model
    # typelize attribute_name: ["string", "Date", optional: true, nullable: true, multi: true]
    #
    # source://typelizer//lib/typelizer/dsl.rb#6
    def included(base); end
  end
end

# source://typelizer//lib/typelizer/dsl.rb#16
module Typelizer::DSL::ClassMethods
  # Returns the value of attribute keyless_type.
  #
  # source://typelizer//lib/typelizer/dsl.rb#46
  def keyless_type; end

  # Sets the attribute keyless_type
  #
  # @param value the value to set the attribute keyless_type to.
  #
  # source://typelizer//lib/typelizer/dsl.rb#46
  def keyless_type=(_arg0); end

  # save association of serializer attributes to type
  # can be invoked multiple times
  #
  # source://typelizer//lib/typelizer/dsl.rb#38
  def typelize(type = T.unsafe(nil), type_params = T.unsafe(nil), **attributes); end

  # save association of serializer to model
  #
  # source://typelizer//lib/typelizer/dsl.rb#30
  def typelize_from(model); end

  # source://typelizer//lib/typelizer/dsl.rb#48
  def typelize_meta(**attributes); end

  # source://typelizer//lib/typelizer/dsl.rb#17
  def typelizer_config(&block); end

  private

  # source://typelizer//lib/typelizer/dsl.rb#54
  def assign_type_information(attribute_name, attributes); end
end

# source://typelizer//lib/typelizer/generator.rb#4
class Typelizer::Generator
  # source://typelizer//lib/typelizer/generator.rb#9
  def call(force: T.unsafe(nil)); end

  private

  # Builds a minimal plugin instance used only during scan time for TracePoint
  #
  # source://typelizer//lib/typelizer/generator.rb#69
  def build_scan_plugin_for(serializer_klass); end

  # source://typelizer//lib/typelizer/generator.rb#45
  def read_serializers(files = T.unsafe(nil)); end

  # source://typelizer//lib/typelizer/generator.rb#33
  def target_serializers; end

  class << self
    # source://typelizer//lib/typelizer/generator.rb#5
    def call(**args); end
  end
end

# source://typelizer//lib/typelizer/interface.rb#2
class Typelizer::Interface
  # @return [Interface] a new instance of Interface
  #
  # source://typelizer//lib/typelizer/interface.rb#5
  def initialize(serializer:, context:); end

  # source://typelizer//lib/typelizer/interface.rb#10
  def config; end

  # Returns the value of attribute context.
  #
  # source://typelizer//lib/typelizer/interface.rb#3
  def context; end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/interface.rb#42
  def empty?; end

  # source://typelizer//lib/typelizer/interface.rb#34
  def filename; end

  # source://typelizer//lib/typelizer/interface.rb#112
  def fingerprint; end

  # source://typelizer//lib/typelizer/interface.rb#90
  def imports; end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/interface.rb#22
  def inline?; end

  # source://typelizer//lib/typelizer/interface.rb#108
  def inspect; end

  # source://typelizer//lib/typelizer/interface.rb#46
  def meta_fields; end

  # source://typelizer//lib/typelizer/interface.rb#26
  def name; end

  # source://typelizer//lib/typelizer/interface.rb#64
  def overwritten_properties; end

  # source://typelizer//lib/typelizer/interface.rb#70
  def own_properties; end

  # source://typelizer//lib/typelizer/interface.rb#78
  def parent_interface; end

  # source://typelizer//lib/typelizer/interface.rb#55
  def properties; end

  # source://typelizer//lib/typelizer/interface.rb#74
  def properties_to_print; end

  # source://typelizer//lib/typelizer/interface.rb#116
  def quote(str); end

  # source://typelizer//lib/typelizer/interface.rb#38
  def root_key; end

  # Returns the value of attribute serializer.
  #
  # source://typelizer//lib/typelizer/interface.rb#3
  def serializer; end

  # source://typelizer//lib/typelizer/interface.rb#14
  def serializer_plugin; end

  private

  # source://typelizer//lib/typelizer/interface.rb#126
  def extract_typescript_types(type); end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/interface.rb#130
  def global_type?(type); end

  # source://typelizer//lib/typelizer/interface.rb#134
  def infer_types(props, hash_name = T.unsafe(nil)); end

  # source://typelizer//lib/typelizer/interface.rb#150
  def model_class; end

  # source://typelizer//lib/typelizer/interface.rb#162
  def model_plugin; end

  # source://typelizer//lib/typelizer/interface.rb#122
  def self_type_name; end
end

# source://typelizer//lib/typelizer/model_plugins/auto.rb#2
module Typelizer::ModelPlugins; end

# source://typelizer//lib/typelizer/model_plugins/active_record.rb#3
class Typelizer::ModelPlugins::ActiveRecord
  # @return [ActiveRecord] a new instance of ActiveRecord
  #
  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#4
  def initialize(model_class:, config:); end

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#19
  def comment_for(prop); end

  # Returns the value of attribute config.
  #
  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#9
  def config; end

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#26
  def enum_for(prop); end

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#11
  def infer_types(prop); end

  # Returns the value of attribute model_class.
  #
  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#9
  def model_class; end

  private

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#34
  def infer_types_for_association(prop); end

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#87
  def infer_types_for_attribute(prop); end

  # source://typelizer//lib/typelizer/model_plugins/active_record.rb#62
  def infer_types_for_column(prop); end
end

# source://typelizer//lib/typelizer/model_plugins/auto.rb#3
module Typelizer::ModelPlugins::Auto
  class << self
    # source://typelizer//lib/typelizer/model_plugins/auto.rb#5
    def new(model_class:, config:); end

    # source://typelizer//lib/typelizer/model_plugins/auto.rb#9
    def plugin(model_class); end
  end
end

# source://typelizer//lib/typelizer/model_plugins/poro.rb#3
class Typelizer::ModelPlugins::Poro
  # We don't care about initialization
  #
  # @return [Poro] a new instance of Poro
  #
  # source://typelizer//lib/typelizer/model_plugins/poro.rb#5
  def initialize(*_arg0, **_arg1, &_arg2); end

  # source://typelizer//lib/typelizer/model_plugins/poro.rb#12
  def comment_for(prop); end

  # source://typelizer//lib/typelizer/model_plugins/poro.rb#16
  def enum_for(prop); end

  # source://typelizer//lib/typelizer/model_plugins/poro.rb#8
  def infer_types(prop); end
end

# source://typelizer//lib/typelizer/property.rb#2
class Typelizer::Property < ::Struct
  # Returns the value of attribute column_name
  #
  # @return [Object] the current value of column_name
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def column_name; end

  # Sets the attribute column_name
  #
  # @param value [Object] the value to set the attribute column_name to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def column_name=(_); end

  # Returns the value of attribute comment
  #
  # @return [Object] the current value of comment
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def comment; end

  # Sets the attribute comment
  #
  # @param value [Object] the value to set the attribute comment to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def comment=(_); end

  # Returns the value of attribute deprecated
  #
  # @return [Object] the current value of deprecated
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def deprecated; end

  # Sets the attribute deprecated
  #
  # @param value [Object] the value to set the attribute deprecated to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def deprecated=(_); end

  # Returns the value of attribute enum
  #
  # @return [Object] the current value of enum
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def enum; end

  # Sets the attribute enum
  #
  # @param value [Object] the value to set the attribute enum to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def enum=(_); end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/property.rb#12
  def eql?(other); end

  # source://typelizer//lib/typelizer/property.rb#26
  def fingerprint; end

  # source://typelizer//lib/typelizer/property.rb#7
  def inspect; end

  # Returns the value of attribute multi
  #
  # @return [Object] the current value of multi
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def multi; end

  # Sets the attribute multi
  #
  # @param value [Object] the value to set the attribute multi to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def multi=(_); end

  # Returns the value of attribute name
  #
  # @return [Object] the current value of name
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def name; end

  # Sets the attribute name
  #
  # @param value [Object] the value to set the attribute name to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def name=(_); end

  # Returns the value of attribute nullable
  #
  # @return [Object] the current value of nullable
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def nullable; end

  # Sets the attribute nullable
  #
  # @param value [Object] the value to set the attribute nullable to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def nullable=(_); end

  # Returns the value of attribute optional
  #
  # @return [Object] the current value of optional
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def optional; end

  # Sets the attribute optional
  #
  # @param value [Object] the value to set the attribute optional to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def optional=(_); end

  # source://typelizer//lib/typelizer/property.rb#18
  def to_s; end

  # Returns the value of attribute type
  #
  # @return [Object] the current value of type
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def type; end

  # Sets the attribute type
  #
  # @param value [Object] the value to set the attribute type to.
  # @return [Object] the newly set value
  #
  # source://typelizer//lib/typelizer/property.rb#2
  def type=(_); end

  private

  # source://typelizer//lib/typelizer/property.rb#36
  def type_name; end

  class << self
    # source://typelizer//lib/typelizer/property.rb#2
    def [](*_arg0); end

    # source://typelizer//lib/typelizer/property.rb#2
    def inspect; end

    # source://typelizer//lib/typelizer/property.rb#2
    def keyword_init?; end

    # source://typelizer//lib/typelizer/property.rb#2
    def members; end

    # source://typelizer//lib/typelizer/property.rb#2
    def new(*_arg0); end
  end
end

# source://typelizer//lib/typelizer/railtie.rb#2
class Typelizer::Railtie < ::Rails::Railtie; end

# source://typelizer//lib/typelizer/renderer.rb#6
class Typelizer::Renderer
  # @return [Renderer] a new instance of Renderer
  #
  # source://typelizer//lib/typelizer/renderer.rb#11
  def initialize(template); end

  # source://typelizer//lib/typelizer/renderer.rb#15
  def call(**context); end

  private

  # Returns the value of attribute erb.
  #
  # source://typelizer//lib/typelizer/renderer.rb#25
  def erb; end

  # source://typelizer//lib/typelizer/renderer.rb#27
  def indent(content, multiplier = T.unsafe(nil)); end

  # source://typelizer//lib/typelizer/renderer.rb#32
  def render(template, **context); end

  class << self
    # source://typelizer//lib/typelizer/renderer.rb#7
    def call(template, **context); end
  end
end

# Builds a minimal plugin used during scan time
#
# source://typelizer//lib/typelizer/contexts/scan_context.rb#5
class Typelizer::ScanContext
  # just in case, if we call ScanContext like an object
  #
  # source://typelizer//lib/typelizer/contexts/scan_context.rb#16
  def interface_for(serializer_class); end

  class << self
    # Interface creation is not available during DSL scanning phase (TracePoint)
    #
    # @raise [InvalidOperationError]
    #
    # source://typelizer//lib/typelizer/contexts/scan_context.rb#9
    def interface_for(serializer_class); end
  end
end

# source://typelizer//lib/typelizer/contexts/scan_context.rb#6
class Typelizer::ScanContext::InvalidOperationError < ::StandardError; end

# SerializerConfigLayer
#
# Lightweight, validated container for per-serializer overrides defined via the DSL.
#
# - Backed by a plain Hash for cheap deep-merge later (see WriterContext).
# - Only keys from Config.members are allowed; unknown keys raise NoMethodError.
# - Supports flat setters/getters in the DSL (e.g., c.null_strategy = :nullable_and_optional).
# - Mutable only via the DSL; #to_h returns a frozen hash to prevent external mutation.
#
# Rationale: we don't allocate another Config here; this layer is merged on top of
# library/global/writer settings when computing the effective config.
#
# source://typelizer//lib/typelizer/serializer_config_layer.rb#15
class Typelizer::SerializerConfigLayer
  # @return [SerializerConfigLayer] a new instance of SerializerConfigLayer
  #
  # source://typelizer//lib/typelizer/serializer_config_layer.rb#18
  def initialize(target_hash); end

  # source://typelizer//lib/typelizer/serializer_config_layer.rb#22
  def to_h; end

  private

  # @raise [NoMethodError]
  #
  # source://typelizer//lib/typelizer/serializer_config_layer.rb#28
  def method_missing(name, *args); end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/serializer_config_layer.rb#41
  def respond_to_missing?(name, include_private = T.unsafe(nil)); end
end

# source://typelizer//lib/typelizer/serializer_config_layer.rb#16
Typelizer::SerializerConfigLayer::VALID_KEYS = T.let(T.unsafe(nil), Set)

# source://typelizer//lib/typelizer/serializer_plugins/auto.rb#2
module Typelizer::SerializerPlugins; end

# source://typelizer//lib/typelizer/serializer_plugins/ams.rb#5
class Typelizer::SerializerPlugins::AMS < ::Typelizer::SerializerPlugins::Base
  # source://typelizer//lib/typelizer/serializer_plugins/ams.rb#6
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/ams.rb#19
  def properties; end

  # source://typelizer//lib/typelizer/serializer_plugins/ams.rb#13
  def typelize_method_transform(method:, name:, binding:, type:, attrs:); end
end

# source://typelizer//lib/typelizer/serializer_plugins/alba.rb#5
class Typelizer::SerializerPlugins::Alba < ::Typelizer::SerializerPlugins::Base
  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#52
  def meta_fields; end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#20
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#14
  def properties; end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#43
  def root_key; end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#31
  def typelize_method_transform(method:, name:, binding:, type:, attrs:); end

  private

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#65
  def build_property(name, attr, **options); end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#142
  def fetch_key(serializer, key); end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#134
  def has_transform_key?(serializer); end

  # @return [Boolean]
  #
  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#138
  def should_transform_root_key?(serializer); end

  # source://typelizer//lib/typelizer/serializer_plugins/alba.rb#148
  def ts_mapper; end
end

# source://typelizer//lib/typelizer/serializer_plugins/alba.rb#6
Typelizer::SerializerPlugins::Alba::ALBA_TS_MAPPER = T.let(T.unsafe(nil), Hash)

# source://typelizer//lib/typelizer/serializer_plugins/auto.rb#3
module Typelizer::SerializerPlugins::Auto
  class << self
    # source://typelizer//lib/typelizer/serializer_plugins/auto.rb#5
    def new(serializer:, config:, context:); end

    # source://typelizer//lib/typelizer/serializer_plugins/auto.rb#9
    def plugin(serializer); end
  end
end

# source://typelizer//lib/typelizer/serializer_plugins/base.rb#3
class Typelizer::SerializerPlugins::Base
  # @return [Base] a new instance of Base
  #
  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#4
  def initialize(serializer:, config:, context:); end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#14
  def meta_fields; end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#22
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#26
  def properties; end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#10
  def root_key; end

  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#18
  def typelize_method_transform(method:, name:, binding:, type:, attrs:); end

  private

  # Returns the value of attribute config.
  #
  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#32
  def config; end

  # Returns the value of attribute context.
  #
  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#32
  def context; end

  # Returns the value of attribute serializer.
  #
  # source://typelizer//lib/typelizer/serializer_plugins/base.rb#32
  def serializer; end
end

# source://typelizer//lib/typelizer/serializer_plugins/oj_serializers.rb#5
class Typelizer::SerializerPlugins::OjSerializers < ::Typelizer::SerializerPlugins::Base
  # source://typelizer//lib/typelizer/serializer_plugins/oj_serializers.rb#6
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/oj_serializers.rb#13
  def properties; end
end

# source://typelizer//lib/typelizer/serializer_plugins/panko.rb#5
class Typelizer::SerializerPlugins::Panko < ::Typelizer::SerializerPlugins::Base
  # source://typelizer//lib/typelizer/serializer_plugins/panko.rb#6
  def methods_to_typelize; end

  # source://typelizer//lib/typelizer/serializer_plugins/panko.rb#10
  def properties; end

  # source://typelizer//lib/typelizer/serializer_plugins/panko.rb#28
  def typelize_method_transform(method:, name:, binding:, type:, attrs:); end

  private

  # source://typelizer//lib/typelizer/serializer_plugins/panko.rb#48
  def association_property(assoc, multi: T.unsafe(nil)); end

  # source://typelizer//lib/typelizer/serializer_plugins/panko.rb#38
  def attribute_property(att); end
end

# source://typelizer//lib/typelizer/config.rb#6
Typelizer::TYPE_MAPPING = T.let(T.unsafe(nil), Hash)

# source://typelizer//lib/typelizer/version.rb#4
Typelizer::VERSION = T.let(T.unsafe(nil), String)

# source://typelizer//lib/typelizer/writer.rb#6
class Typelizer::Writer
  # @return [Writer] a new instance of Writer
  #
  # source://typelizer//lib/typelizer/writer.rb#9
  def initialize(config); end

  # source://typelizer//lib/typelizer/writer.rb#14
  def call(interfaces, force:); end

  private

  # source://typelizer//lib/typelizer/writer.rb#84
  def cleanup_output_dir; end

  # source://typelizer//lib/typelizer/writer.rb#88
  def cleanup_partial_writes(partial_files); end

  # source://typelizer//lib/typelizer/writer.rb#43
  def cleanup_stale_files(written_files); end

  # Returns the value of attribute config.
  #
  # source://typelizer//lib/typelizer/writer.rb#41
  def config; end

  # source://typelizer//lib/typelizer/writer.rb#79
  def render_template(template, **context); end

  # Returns the value of attribute template_cache.
  #
  # source://typelizer//lib/typelizer/writer.rb#41
  def template_cache; end

  # source://typelizer//lib/typelizer/writer.rb#64
  def write_file(filename, fingerprint); end

  # source://typelizer//lib/typelizer/writer.rb#52
  def write_index(interfaces); end

  # source://typelizer//lib/typelizer/writer.rb#58
  def write_interface(interface); end
end

# source://typelizer//lib/typelizer/writer.rb#7
class Typelizer::Writer::WriterError < ::StandardError; end

# Context for a single writer during a generation pass.
# - Caches one Interface per serializer class (prevents duplicates/loops)
# - Computes per-serializer effective Config:
#   library defaults < global (flat setters) < writer < DSL (parent → child)
#
# source://typelizer//lib/typelizer/contexts/writer_context.rb#8
class Typelizer::WriterContext
  # @return [WriterContext] a new instance of WriterContext
  #
  # source://typelizer//lib/typelizer/contexts/writer_context.rb#11
  def initialize(writer_name: T.unsafe(nil), configuration: T.unsafe(nil)); end

  # Resolves the effective configuration for a serializer class by merging
  # configuration layers in priority order:
  #  Library defaults
  #  Global configuration settings
  #  Writer-specific configuration
  #  DSL configuration with inheritance (highest priority)
  #
  # @raise [ArgumentError]
  #
  # source://typelizer//lib/typelizer/contexts/writer_context.rb#42
  def config_for(serializer_class); end

  # Returns a memoized Interface for the given serializer class within this writer context
  # Guarantees a single Interface instance per serializer (in this context), which:
  # - preserves object identity across associations,
  # - prevents infinite loops on cyclic relations,
  # - and avoids redundant recomputation
  # The cache is scoped to WriterContext (i.e., per writer and per generation run)
  #
  # @raise [ArgumentError]
  #
  # source://typelizer//lib/typelizer/contexts/writer_context.rb#27
  def interface_for(serializer_class); end

  # Returns the value of attribute writer_config.
  #
  # source://typelizer//lib/typelizer/contexts/writer_context.rb#9
  def writer_config; end

  # Returns the value of attribute writer_name.
  #
  # source://typelizer//lib/typelizer/contexts/writer_context.rb#9
  def writer_name; end

  private

  # Builds the correct configuration by merging all configuration layers
  #
  # source://typelizer//lib/typelizer/contexts/writer_context.rb#51
  def build_config(serializer_class); end

  # source://typelizer//lib/typelizer/contexts/writer_context.rb#76
  def deep_merge(hash_one, hash_two); end

  # source://typelizer//lib/typelizer/contexts/writer_context.rb#63
  def dsl_config_for(klass); end
end
