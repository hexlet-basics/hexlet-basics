# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `countries` gem.
# Please instead update this file by running `bin/tapioca gem countries`.


# source://countries//lib/countries/version.rb#3
module Countries; end

# source://countries//lib/countries/version.rb#4
Countries::VERSION = T.let(T.unsafe(nil), String)

# source://countries//lib/countries/configuration.rb#3
module ISO3166
  class << self
    # source://countries//lib/countries/country/class_methods.rb#8
    def Country(country_data_or_country); end

    # source://countries//lib/countries/configuration.rb#8
    def configuration; end

    # Sets the attribute configuration
    #
    # @param value the value to set the attribute configuration to.
    #
    # source://countries//lib/countries/configuration.rb#5
    def configuration=(_arg0); end

    # @yield [configuration]
    #
    # source://countries//lib/countries/configuration.rb#17
    def configure; end

    # source://countries//lib/countries/configuration.rb#12
    def reset; end
  end
end

# source://countries//lib/countries/configuration.rb#21
class ISO3166::Configuration
  # @return [Configuration] a new instance of Configuration
  #
  # source://countries//lib/countries/configuration.rb#25
  def initialize; end

  # Enables the integration with the {Money}[https://github.com/RubyMoney/money] gem
  #
  # Please note that it requires you to add "money" gem to your gemfile.
  #
  #   gem "money", "~> 6.9"
  #
  # *WARNING* if you have a top level class named +Money+ you will conflict with this gem.
  #
  # @example
  #   c = ISO3166::Country['us']
  #   c.currency.iso_code # => 'USD'
  #   c.currency.name # => 'United States Dollar'
  #   c.currency.symbol # => '$'
  #
  # source://countries//lib/countries/configuration.rb#46
  def enable_currency_extension!; end

  # Returns the value of attribute loaded_locales.
  #
  # source://countries//lib/countries/configuration.rb#22
  def loaded_locales; end

  # Sets the attribute loaded_locales
  #
  # @param value the value to set the attribute loaded_locales to.
  #
  # source://countries//lib/countries/configuration.rb#22
  def loaded_locales=(_arg0); end

  # source://countries//lib/countries/configuration.rb#29
  def locales; end

  # Sets the attribute locales
  #
  # @param value the value to set the attribute locales to.
  #
  # source://countries//lib/countries/configuration.rb#23
  def locales=(_arg0); end

  private

  # source://countries//lib/countries/configuration.rb#53
  def default_locales; end
end

# source://countries//lib/countries/country/conversion_methods.rb#4
module ISO3166::ConversionMethods
  # @param alpha2 [String] ISO 3166 alpha-2 country code.
  # @return [String] ISO 3166 alpha-3 country code.
  #
  # source://countries//lib/countries/country/conversion_methods.rb#7
  def from_alpha2_to_alpha3(alpha2); end

  # @param alpha3 [String] ISO 3166 alpha-3 country code.
  # @return [String] ISO 3166 alpha-2 country code.
  #
  # source://countries//lib/countries/country/conversion_methods.rb#13
  def from_alpha3_to_alpha2(alpha3); end
end

# source://countries//lib/countries/country.rb#4
class ISO3166::Country
  include ::ISO3166::Emoji
  include ::ISO3166::CountrySubdivisionMethods
  include ::ISO3166::TimezoneExtensions
  extend ::ISO3166::CountryClassMethods
  extend ::ISO3166::ConversionMethods
  extend ::ISO3166::CountryFinderMethods

  # @return [Country] a new instance of Country
  #
  # source://countries//lib/countries/country.rb#24
  def initialize(country_data); end

  # source://countries//lib/countries/country.rb#51
  def <=>(other); end

  # source://countries//lib/countries/country.rb#39
  def ==(other); end

  # source://countries//lib/countries/country.rb#13
  def address_format; end

  # source://countries//lib/countries/country.rb#13
  def alpha2; end

  # source://countries//lib/countries/country.rb#13
  def alpha3; end

  # source://countries//lib/countries/country.rb#19
  def bounds; end

  # @return [String] the “common name” of this Country in English.
  #
  # source://countries//lib/countries/country.rb#116
  def common_name; end

  # source://countries//lib/countries/country.rb#13
  def continent; end

  # source://countries//lib/countries/country.rb#13
  def country_code; end

  # source://countries//lib/countries/country.rb#13
  def currency_code; end

  # Returns the value of attribute data.
  #
  # source://countries//lib/countries/country.rb#10
  def data; end

  # source://countries//lib/countries/country.rb#13
  def distance_unit; end

  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#43
  def eql?(other); end

  # +true+ if this country is a member of the European Economic Area or it is UK
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#71
  def gdpr_compliant?; end

  # source://countries//lib/countries/country.rb#13
  def gec; end

  # source://countries//lib/countries/country.rb#13
  def geo; end

  # source://countries//lib/countries/country.rb#47
  def hash; end

  # +true+ if this country is a member of the European Economic Area.
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#76
  def in_eea?; end

  # +true+ if this country is a member of the European Single Market.
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#81
  def in_esm?; end

  # +true+ if this country is a member of the European Union.
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#56
  def in_eu?; end

  # +true+ if this country is a member of the EU VAT Area.
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#86
  def in_eu_vat?; end

  # +true+ if this country is a member of the G20.
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#66
  def in_g20?; end

  # +true+ if this country is a member of the G7.
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#61
  def in_g7?; end

  # +true+ if this country is a member of the United Nations.
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#91
  def in_un?; end

  # source://countries//lib/countries/country.rb#13
  def international_prefix; end

  # source://countries//lib/countries/country.rb#13
  def ioc; end

  # source://countries//lib/countries/country.rb#13
  def iso_long_name; end

  # source://countries//lib/countries/country.rb#13
  def iso_short_name; end

  # source://countries//lib/countries/country.rb#13
  def languages; end

  # source://countries//lib/countries/country.rb#13
  def languages_official; end

  # source://countries//lib/countries/country.rb#13
  def languages_spoken; end

  # source://countries//lib/countries/country.rb#19
  def latitude; end

  # @return [String] The name for this Country, in this Country's locale.
  #
  # source://countries//lib/countries/country.rb#130
  def local_name; end

  # @return [Array<String>] The list of names for this Country, in this Country's locales.
  #
  # source://countries//lib/countries/country.rb#122
  def local_names; end

  # source://countries//lib/countries/country.rb#19
  def longitude; end

  # source://countries//lib/countries/country.rb#19
  def max_latitude; end

  # source://countries//lib/countries/country.rb#19
  def max_longitude; end

  # source://countries//lib/countries/country.rb#19
  def min_latitude; end

  # source://countries//lib/countries/country.rb#19
  def min_longitude; end

  # source://countries//lib/countries/country.rb#13
  def nanp_prefix; end

  # source://countries//lib/countries/country.rb#13
  def national_destination_code_lengths; end

  # source://countries//lib/countries/country.rb#13
  def national_number_lengths; end

  # source://countries//lib/countries/country.rb#13
  def national_prefix; end

  # source://countries//lib/countries/country.rb#13
  def nationality; end

  # source://countries//lib/countries/country.rb#13
  def number; end

  # source://countries//lib/countries/country.rb#13
  def postal_code; end

  # source://countries//lib/countries/country.rb#13
  def postal_code?; end

  # @return [String] The regex for valid postal codes in this Country
  #
  # source://countries//lib/countries/country.rb#96
  def postal_code_format; end

  # source://countries//lib/countries/country.rb#13
  def region; end

  # source://countries//lib/countries/country.rb#13
  def start_of_week; end

  # source://countries//lib/countries/country.rb#13
  def subregion; end

  # source://countries//lib/countries/country.rb#100
  def to_s; end

  # @return [Array<String>] the list of names for this Country in all loaded locales.
  #
  # source://countries//lib/countries/country.rb#105
  def translated_names; end

  # @param locale [String] The locale to use for translations.
  # @return [String] the name of this Country in the selected locale.
  #
  # source://countries//lib/countries/country.rb#111
  def translation(locale = T.unsafe(nil)); end

  # source://countries//lib/countries/country.rb#13
  def translations; end

  # source://countries//lib/countries/country.rb#13
  def un_locode; end

  # source://countries//lib/countries/country.rb#13
  def unofficial_names; end

  # @return [Boolean]
  #
  # source://countries//lib/countries/country.rb#29
  def valid?; end

  # source://countries//lib/countries/country.rb#13
  def vat_rates; end

  # source://countries//lib/countries/country.rb#13
  def vehicle_registration_code; end

  # source://countries//lib/countries/country.rb#13
  def world_region; end

  # source://countries//lib/countries/country.rb#13
  def zip; end

  # source://countries//lib/countries/country.rb#13
  def zip?; end

  # source://countries//lib/countries/country.rb#13
  def zip_format; end

  private

  # source://countries//lib/countries/country.rb#223
  def reload; end
end

# source://countries//lib/countries/country/class_methods.rb#19
module ISO3166::CountryClassMethods
  # source://countries//lib/countries/country/class_methods.rb#28
  def all(&blk); end

  # source://countries//lib/countries/country/class_methods.rb#35
  def all_names_with_codes(locale = T.unsafe(nil)); end

  # source://countries//lib/countries/country/class_methods.rb#46
  def all_translated(locale = T.unsafe(nil)); end

  # source://countries//lib/countries/country/class_methods.rb#24
  def codes; end

  # @param query_val [String] A value to query using `query_method`
  # @param query_method [Symbol] An optional query method, defaults to Country#alpha2
  # @param result_method [Symbol] An optional method of `Country` to apply to the result set.
  # @return [Array] An array of countries matching the provided query, or the result of applying `result_method` to the array of `Country` objects
  #
  # source://countries//lib/countries/country/class_methods.rb#69
  def collect_countries_with(query_val, query_method = T.unsafe(nil), result_method = T.unsafe(nil)); end

  # @param subdivision_str [String] A subdivision name or code to search for. Search includes translated subdivision names.
  # @param result_method [Symbol] An optional method of `Country` to apply to the result set.
  # @return [Array] An array of countries with subdivisions matching the provided name, or the result of applying `result_method` to the array of `Country` objects
  #
  # source://countries//lib/countries/country/class_methods.rb#79
  def collect_likely_countries_by_subdivision_name(subdivision_str, result_method = T.unsafe(nil)); end

  # source://countries//lib/countries/country/class_methods.rb#28
  def countries(&blk); end

  # source://countries//lib/countries/country/class_methods.rb#20
  def new(country_data); end

  # source://countries//lib/countries/country/class_methods.rb#42
  def pluck(*attributes); end

  # source://countries//lib/countries/country/class_methods.rb#50
  def translations(locale = T.unsafe(nil)); end

  protected

  # Some methods like parse_value are expensive in that they
  # create a large number of objects internally. In order to reduce the
  # object creations and save the GC, we can cache them in an class instance
  # variable. This will make subsequent parses O(1) and will stop the
  # creation of new String object instances.
  #
  # NB: We only want to use this cache for values coming from the JSON
  # file or our own code, caching user-generated data could be dangerous
  # since the cache would continually grow.
  #
  # source://countries//lib/countries/country/class_methods.rb#105
  def cached(value); end

  # source://countries//lib/countries/country/class_methods.rb#88
  def strip_accents(string); end
end

# source://countries//lib/countries/country/finder_methods.rb#4
module ISO3166::CountryFinderMethods
  # source://countries//lib/countries/country/finder_methods.rb#13
  def [](query); end

  # source://countries//lib/countries/country/finder_methods.rb#17
  def find_all_by(attribute, val); end

  # source://countries//lib/countries/country/finder_methods.rb#30
  def method_missing(method_name, *arguments); end

  # source://countries//lib/countries/country/finder_methods.rb#8
  def search(query); end

  protected

  # source://countries//lib/countries/country/finder_methods.rb#50
  def find_by(attribute, value, obj = T.unsafe(nil)); end

  # source://countries//lib/countries/country/finder_methods.rb#56
  def parse_attributes(attribute, val); end

  # source://countries//lib/countries/country/finder_methods.rb#65
  def parse_value(value); end

  # @return [Boolean]
  #
  # source://countries//lib/countries/country/finder_methods.rb#70
  def searchable_attribute?(attribute); end

  # source://countries//lib/countries/country/finder_methods.rb#74
  def searchable_attributes; end

  private

  # @return [Boolean]
  #
  # source://countries//lib/countries/country/finder_methods.rb#39
  def respond_to_missing?(method_name, include_private = T.unsafe(nil)); end
end

# source://countries//lib/countries/country/finder_methods.rb#5
ISO3166::CountryFinderMethods::FIND_BY_REGEX = T.let(T.unsafe(nil), Regexp)

# source://countries//lib/countries/country/finder_methods.rb#6
ISO3166::CountryFinderMethods::SEARCH_TERM_FILTER_REGEX = T.let(T.unsafe(nil), Regexp)

# source://countries//lib/countries/country/country_subdivision_methods.rb#4
module ISO3166::CountrySubdivisionMethods
  # @param subdivision_str [String] A subdivision name or code to search for. Search includes translated subdivision names.
  # @return [Subdivision] The first subdivision matching the provided string
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#7
  def find_subdivision_by_name(subdivision_str); end

  # @return [Array<String>] the list of humanized subdivision types for this country. Uses ActiveSupport's `#humanize` if available
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#44
  def humanized_subdivision_types; end

  # @return [Boolean]
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#13
  def subdivision_for_string?(subdivision_str); end

  # @param locale [String] The locale to use for translations.
  # @return [Array<String>] A list of subdivision names for this country.
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#60
  def subdivision_names(locale = T.unsafe(nil)); end

  # @param locale [String] The locale to use for translations.
  # @return [Array<Array>] This Country's subdivision pairs of names and codes.
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#54
  def subdivision_names_with_codes(locale = T.unsafe(nil)); end

  # @return [Array<String>] the list of subdivision types for this country
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#39
  def subdivision_types; end

  # @return [Array<ISO3166::Subdivision>] the list of subdivisions for this Country.
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#24
  def subdivisions; end

  # +true+ if this Country has any Subdivisions.
  #
  # @return [Boolean]
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#19
  def subdivisions?; end

  # @param types [Array<String>] The locale to use for translations.
  # @return [Array<ISO3166::Subdivision>] the list of subdivisions of the given type(s) for this Country.
  #
  # source://countries//lib/countries/country/country_subdivision_methods.rb#34
  def subdivisions_of_types(types); end

  private

  # source://countries//lib/countries/country/country_subdivision_methods.rb#66
  def humanize_string(str); end
end

# source://countries//lib/countries/structure.rb#4
ISO3166::DEFAULT_COUNTRY_HASH = T.let(T.unsafe(nil), Hash)

# source://countries//lib/countries/structure.rb#61
ISO3166::DEFAULT_SUBDIVISION_HASH = T.let(T.unsafe(nil), Hash)

# Handles building the in memory store of countries data
#
# source://countries//lib/countries/data.rb#5
class ISO3166::Data
  extend ::ISO3166::SubdivisionMethods
  extend ::ISO3166::LocalesMethods

  # @return [Data] a new instance of Data
  #
  # source://countries//lib/countries/data.rb#16
  def initialize(alpha2); end

  # source://countries//lib/countries/data.rb#20
  def call; end

  class << self
    # source://countries//lib/countries/data.rb#42
    def cache; end

    # source://countries//lib/countries/data.rb#56
    def codes; end

    # source://countries//lib/countries/data.rb#72
    def datafile_path(file_array); end

    # source://countries//lib/countries/data.rb#67
    def loaded_codes; end

    # Registers a new Country with custom data.
    # If you are overriding an existing country, this does not perform a deep merge so you will need to __bring in all data you wish to be available__.
    # Overriding an existing country will also remove it from the internal management of translations.
    #
    # source://countries//lib/countries/data.rb#28
    def register(data); end

    # Resets the loaded data and cache
    #
    # source://countries//lib/countries/data.rb#47
    def reset; end

    # Removes a country from the loaded data
    #
    # source://countries//lib/countries/data.rb#36
    def unregister(alpha2); end

    # source://countries//lib/countries/data.rb#61
    def update_cache; end

    private

    # @return [Boolean]
    #
    # source://countries//lib/countries/data.rb#118
    def cache_flush_required?; end

    # source://countries//lib/countries/data.rb#109
    def cached_codes; end

    # source://countries//lib/countries/data.rb#157
    def deep_stringify_keys(data); end

    # Codes that we have translations for in dataset
    #
    # source://countries//lib/countries/data.rb#114
    def internal_codes; end

    # source://countries//lib/countries/data.rb#132
    def load_alpha2_translation_for_locale(alpha2, locale, locale_names); end

    # source://countries//lib/countries/data.rb#152
    def load_cache(file_array); end

    # source://countries//lib/countries/data.rb#78
    def load_data!; end

    # @return [Boolean]
    #
    # source://countries//lib/countries/data.rb#105
    def load_required?; end

    # source://countries//lib/countries/data.rb#122
    def load_translations(locale); end

    # source://countries//lib/countries/data.rb#164
    def subdivision_file_path(alpha2); end

    # source://countries//lib/countries/data.rb#89
    def sync_translations!; end

    # source://countries//lib/countries/data.rb#101
    def synchronized(&_arg0); end

    # source://countries//lib/countries/data.rb#147
    def unload_alpha2_translation_for_locale(alpha2, locale); end

    # source://countries//lib/countries/data.rb#138
    def unload_translations(locale); end
  end
end

# source://countries//lib/countries/country/emoji.rb#4
module ISO3166::Emoji
  # The emoji flag for this country, using Unicode Regional Indicator characters. e.g: "U+1F1FA U+1F1F8" for 🇺🇸
  #
  # @return [String] the emoji flag for this country
  #
  # source://countries//lib/countries/country/emoji.rb#37
  def emoji_flag; end
end

# source://countries//lib/countries/country/emoji.rb#5
ISO3166::Emoji::CODE_POINTS = T.let(T.unsafe(nil), Hash)

# source://countries//lib/countries/data/locales_methods.rb#4
module ISO3166::LocalesMethods
  private

  # source://countries//lib/countries/data/locales_methods.rb#19
  def loaded_locales; end

  # source://countries//lib/countries/data/locales_methods.rb#7
  def locales_to_load; end

  # source://countries//lib/countries/data/locales_methods.rb#11
  def locales_to_remove; end

  # source://countries//lib/countries/data/locales_methods.rb#15
  def requested_locales; end
end

# source://countries//lib/countries/subdivision.rb#4
class ISO3166::Subdivision
  # @return [Subdivision] a new instance of Subdivision
  #
  # source://countries//lib/countries/subdivision.rb#13
  def initialize(attrs); end

  # source://countries//lib/countries/subdivision.rb#19
  def [](attr_name); end

  # Returns the value of attribute code.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def code; end

  # Sets the attribute code
  #
  # @param value the value to set the attribute code to.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def code=(_arg0); end

  # @return [Hash] A hash with the subdivision code as key and the hash of translated subdivision names ( locale => name ) as value.
  #
  # source://countries//lib/countries/subdivision.rb#24
  def code_with_translations; end

  # Returns the value of attribute comments.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def comments; end

  # Sets the attribute comments
  #
  # @param value the value to set the attribute comments to.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def comments=(_arg0); end

  # Returns the value of attribute geo.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def geo; end

  # Sets the attribute geo
  #
  # @param value the value to set the attribute geo to.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def geo=(_arg0); end

  # Returns the value of attribute name.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def name; end

  # Sets the attribute name
  #
  # @param value the value to set the attribute name to.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def name=(_arg0); end

  # Returns the value of attribute translations.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def translations; end

  # Sets the attribute translations
  #
  # @param value the value to set the attribute translations to.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def translations=(_arg0); end

  # Returns the value of attribute type.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def type; end

  # Sets the attribute type
  #
  # @param value the value to set the attribute type to.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def type=(_arg0); end

  # Returns the value of attribute unofficial_names.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def unofficial_names; end

  # Sets the attribute unofficial_names
  #
  # @param value the value to set the attribute unofficial_names to.
  #
  # source://countries//lib/countries/subdivision.rb#5
  def unofficial_names=(_arg0); end
end

# source://countries//lib/countries/data/subdivision_methods.rb#4
module ISO3166::SubdivisionMethods
  # source://countries//lib/countries/data/subdivision_methods.rb#24
  def create_subdivisions(subdivision_data); end

  # source://countries//lib/countries/data/subdivision_methods.rb#14
  def load_data_for_alpha2(alpha2); end

  # source://countries//lib/countries/data/subdivision_methods.rb#5
  def subdivision_data(alpha2); end

  # source://countries//lib/countries/data/subdivision_methods.rb#19
  def subdivisions(alpha2); end
end

# Extend Country class with support for timezones. Requires the  {tzinfo}[https://github.com/tzinfo/tzinfo] gem
#
#   gem 'tzinfo'
#
# source://countries//lib/countries/timezones.rb#8
module ISO3166::TimezoneExtensions
  # TODO: rename method to tz_country or something similar
  #
  # source://countries//lib/countries/timezones.rb#10
  def timezones; end
end

# Extend the hash class to allow locale lookup fall back behavior
#
# E.g. if a country has translations for +pt+, and the user looks up +pt-br+ fallback
# to +pt+ to prevent from showing nil values
#
# source://countries//lib/countries/translations.rb#8
class ISO3166::Translations < ::Hash
  # source://countries//lib/countries/translations.rb#9
  def [](locale); end
end

# source://countries//lib/countries/country/class_methods.rb#6
ISO3166::UNSEARCHABLE_METHODS = T.let(T.unsafe(nil), Array)
