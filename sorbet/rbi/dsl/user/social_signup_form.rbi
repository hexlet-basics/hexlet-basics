# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `User::SocialSignupForm`.
# Please instead update this file by running `bin/tapioca dsl User::SocialSignupForm`.


class User::SocialSignupForm
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def active?; end

  sig { params(unencrypted_password: T.untyped).returns(T.any(User::SocialSignupForm, FalseClass)) }
  def authenticate(unencrypted_password); end

  sig { params(unencrypted_password: T.untyped).returns(T.any(User::SocialSignupForm, FalseClass)) }
  def authenticate_password(unencrypted_password); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_as_removed(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_as_removed!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_as_removed_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def may_activate?; end

  sig { returns(T::Boolean) }
  def may_mark_as_removed?; end

  sig { returns(T.untyped) }
  def password; end

  sig { params(unencrypted_password: T.untyped).returns(T.untyped) }
  def password=(unencrypted_password); end

  sig { returns(T.untyped) }
  def password_challenge; end

  sig { params(_arg0: T.untyped).returns(T.untyped) }
  def password_challenge=(_arg0); end

  sig { returns(T.untyped) }
  def password_confirmation; end

  sig { params(_arg0: T.untyped).returns(T.untyped) }
  def password_confirmation=(_arg0); end

  sig { returns(T.untyped) }
  def password_reset_token; end

  sig { returns(T.untyped) }
  def password_salt; end

  sig { returns(T::Boolean) }
  def removed?; end

  sig { returns(T::Boolean) }
  def waiting_confirmation?; end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(args: T.untyped, block: T.nilable(T.proc.bind(PrivateAASMMachine).void)).returns(PrivateAASMMachine) }
    def aasm(*args, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig do
      params(
        block: T.nilable(T.proc.params(record: ::User::SocialSignupForm).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::User::SocialSignupForm).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def create(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    def fifth; end

    sig { returns(::User::SocialSignupForm) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::User::SocialSignupForm)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::User::SocialSignupForm])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::User::SocialSignupForm).void
      ).returns(T.nilable(::User::SocialSignupForm))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::User::SocialSignupForm)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::User::SocialSignupForm) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::User::SocialSignupForm).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::User::SocialSignupForm])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::User::SocialSignupForm]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::User::SocialSignupForm]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::User::SocialSignupForm)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::User::SocialSignupForm) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::User::SocialSignupForm) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    sig { params(limit: Integer).returns(T::Array[::User::SocialSignupForm]) }
    def first(limit = nil); end

    sig { returns(::User::SocialSignupForm) }
    def first!; end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    def forty_two; end

    sig { returns(::User::SocialSignupForm) }
    def forty_two!; end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    def fourth; end

    sig { returns(::User::SocialSignupForm) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    sig { params(limit: Integer).returns(T::Array[::User::SocialSignupForm]) }
    def last(limit = nil); end

    sig { returns(::User::SocialSignupForm) }
    def last!; end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::User::SocialSignupForm).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig do
      params(
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::User::SocialSignupForm).void)
      ).returns(::User::SocialSignupForm)
    end
    def new(attributes = nil, &block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::User::SocialSignupForm).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def none?(&block); end

    sig do
      params(
        block: T.nilable(T.proc.params(record: ::User::SocialSignupForm).returns(T.untyped))
      ).returns(T::Boolean)
    end
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    def second; end

    sig { returns(::User::SocialSignupForm) }
    def second!; end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    def second_to_last; end

    sig { returns(::User::SocialSignupForm) }
    def second_to_last!; end

    sig { returns(::User::SocialSignupForm) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::User::SocialSignupForm).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    sig { params(limit: Integer).returns(T::Array[::User::SocialSignupForm]) }
    def take(limit = nil); end

    sig { returns(::User::SocialSignupForm) }
    def take!; end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    def third; end

    sig { returns(::User::SocialSignupForm) }
    def third!; end

    sig { returns(T.nilable(::User::SocialSignupForm)) }
    def third_to_last; end

    sig { returns(::User::SocialSignupForm) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { returns(T::Array[T.untyped]) }
    def account_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def account_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :accounts`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::User::Account::PrivateCollectionProxy) }
    def accounts; end

    sig { params(value: T::Enumerable[::User::Account]).void }
    def accounts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def blog_post_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def blog_post_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :blog_posts`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::BlogPost::PrivateCollectionProxy) }
    def blog_posts; end

    sig { params(value: T::Enumerable[::BlogPost]).void }
    def blog_posts=(value); end

    sig { returns(T::Array[T.untyped]) }
    def language_member_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def language_member_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :language_members`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Language::Member::PrivateCollectionProxy) }
    def language_members; end

    sig { params(value: T::Enumerable[::Language::Member]).void }
    def language_members=(value); end

    sig { returns(T::Array[T.untyped]) }
    def lesson_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def lesson_ids=(ids); end

    sig { returns(T::Array[T.untyped]) }
    def lesson_member_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def lesson_member_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :lesson_members`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Language::Lesson::Member::PrivateCollectionProxy) }
    def lesson_members; end

    sig { params(value: T::Enumerable[::Language::Lesson::Member]).void }
    def lesson_members=(value); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :lessons, through: :lesson_members`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Language::Lesson::PrivateCollectionProxy) }
    def lessons; end

    sig { params(value: T::Enumerable[::Language::Lesson]).void }
    def lessons=(value); end

    sig { returns(T::Array[T.untyped]) }
    def review_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def review_ids=(ids); end

    # This method is created by ActiveRecord on the `User` class because it declared `has_many :reviews`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Review::PrivateCollectionProxy) }
    def reviews; end

    sig { params(value: T::Enumerable[::Review]).void }
    def reviews=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def admin(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def removed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::User::SocialSignupForm).returns(T::Boolean)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def waiting_confirmation(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(T.nilable(T::Boolean)) }
    def admin; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def admin=(value); end

    sig { returns(T::Boolean) }
    def admin?; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_before_last_save; end

    sig { returns(T.untyped) }
    def admin_before_type_cast; end

    sig { returns(T::Boolean) }
    def admin_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def admin_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def admin_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def admin_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def admin_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def admin_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def admin_was; end

    sig { void }
    def admin_will_change!; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def confirmation_token=(value); end

    sig { returns(T::Boolean) }
    def confirmation_token?; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_before_last_save; end

    sig { returns(T.untyped) }
    def confirmation_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def confirmation_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def confirmation_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def confirmation_token_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def confirmation_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def confirmation_token_was; end

    sig { void }
    def confirmation_token_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email=(value); end

    sig { returns(T::Boolean) }
    def email?; end

    sig { returns(T.nilable(::String)) }
    def email_before_last_save; end

    sig { returns(T.untyped) }
    def email_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_delivery_state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def email_delivery_state=(value); end

    sig { returns(T::Boolean) }
    def email_delivery_state?; end

    sig { returns(T.nilable(::String)) }
    def email_delivery_state_before_last_save; end

    sig { returns(T.untyped) }
    def email_delivery_state_before_type_cast; end

    sig { returns(T::Boolean) }
    def email_delivery_state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_delivery_state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_delivery_state_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_delivery_state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_delivery_state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_delivery_state_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_delivery_state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_delivery_state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_delivery_state_was; end

    sig { void }
    def email_delivery_state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def email_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def email_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def email_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def email_previously_was; end

    sig { returns(T.nilable(::String)) }
    def email_was; end

    sig { void }
    def email_will_change!; end

    sig { returns(T.nilable(::String)) }
    def facebook_uid; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def facebook_uid=(value); end

    sig { returns(T::Boolean) }
    def facebook_uid?; end

    sig { returns(T.nilable(::String)) }
    def facebook_uid_before_last_save; end

    sig { returns(T.untyped) }
    def facebook_uid_before_type_cast; end

    sig { returns(T::Boolean) }
    def facebook_uid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def facebook_uid_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def facebook_uid_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def facebook_uid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def facebook_uid_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def facebook_uid_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def facebook_uid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def facebook_uid_previously_was; end

    sig { returns(T.nilable(::String)) }
    def facebook_uid_was; end

    sig { void }
    def facebook_uid_will_change!; end

    sig { returns(T.nilable(::String)) }
    def first_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def first_name=(value); end

    sig { returns(T::Boolean) }
    def first_name?; end

    sig { returns(T.nilable(::String)) }
    def first_name_before_last_save; end

    sig { returns(T.untyped) }
    def first_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def first_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def first_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def first_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def first_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def first_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def first_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def first_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def first_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def first_name_was; end

    sig { void }
    def first_name_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def github_uid; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def github_uid=(value); end

    sig { returns(T::Boolean) }
    def github_uid?; end

    sig { returns(T.nilable(::Integer)) }
    def github_uid_before_last_save; end

    sig { returns(T.untyped) }
    def github_uid_before_type_cast; end

    sig { returns(T::Boolean) }
    def github_uid_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def github_uid_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def github_uid_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def github_uid_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def github_uid_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def github_uid_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def github_uid_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def github_uid_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def github_uid_was; end

    sig { void }
    def github_uid_will_change!; end

    sig { returns(T.nilable(T::Boolean)) }
    def help; end

    sig { params(value: T.nilable(T::Boolean)).returns(T.nilable(T::Boolean)) }
    def help=(value); end

    sig { returns(T::Boolean) }
    def help?; end

    sig { returns(T.nilable(T::Boolean)) }
    def help_before_last_save; end

    sig { returns(T.untyped) }
    def help_before_type_cast; end

    sig { returns(T::Boolean) }
    def help_came_from_user?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def help_change; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def help_change_to_be_saved; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def help_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def help_in_database; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def help_previous_change; end

    sig { params(from: T.nilable(T::Boolean), to: T.nilable(T::Boolean)).returns(T::Boolean) }
    def help_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(T::Boolean)) }
    def help_previously_was; end

    sig { returns(T.nilable(T::Boolean)) }
    def help_was; end

    sig { void }
    def help_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::String)) }
    def last_name; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def last_name=(value); end

    sig { returns(T::Boolean) }
    def last_name?; end

    sig { returns(T.nilable(::String)) }
    def last_name_before_last_save; end

    sig { returns(T.untyped) }
    def last_name_before_type_cast; end

    sig { returns(T::Boolean) }
    def last_name_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_name_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_name_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_name_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_name_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def last_name_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def last_name_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def last_name_previously_was; end

    sig { returns(T.nilable(::String)) }
    def last_name_was; end

    sig { void }
    def last_name_will_change!; end

    sig { returns(T.nilable(::String)) }
    def locale; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def locale=(value); end

    sig { returns(T::Boolean) }
    def locale?; end

    sig { returns(T.nilable(::String)) }
    def locale_before_last_save; end

    sig { returns(T.untyped) }
    def locale_before_type_cast; end

    sig { returns(T::Boolean) }
    def locale_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def locale_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def locale_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def locale_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def locale_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def locale_previously_was; end

    sig { returns(T.nilable(::String)) }
    def locale_was; end

    sig { void }
    def locale_will_change!; end

    sig { returns(T.nilable(::String)) }
    def nickname; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def nickname=(value); end

    sig { returns(T::Boolean) }
    def nickname?; end

    sig { returns(T.nilable(::String)) }
    def nickname_before_last_save; end

    sig { returns(T.untyped) }
    def nickname_before_type_cast; end

    sig { returns(T::Boolean) }
    def nickname_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def nickname_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def nickname_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def nickname_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def nickname_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def nickname_previously_was; end

    sig { returns(T.nilable(::String)) }
    def nickname_was; end

    sig { void }
    def nickname_will_change!; end

    sig { returns(T.nilable(::String)) }
    def password_digest; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def password_digest=(value); end

    sig { returns(T::Boolean) }
    def password_digest?; end

    sig { returns(T.nilable(::String)) }
    def password_digest_before_last_save; end

    sig { returns(T.untyped) }
    def password_digest_before_type_cast; end

    sig { returns(T::Boolean) }
    def password_digest_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def password_digest_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def password_digest_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def password_digest_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def password_digest_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def password_digest_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def password_digest_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def password_digest_previously_was; end

    sig { returns(T.nilable(::String)) }
    def password_digest_was; end

    sig { void }
    def password_digest_will_change!; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def reset_password_token=(value); end

    sig { returns(T::Boolean) }
    def reset_password_token?; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_before_last_save; end

    sig { returns(T.untyped) }
    def reset_password_token_before_type_cast; end

    sig { returns(T::Boolean) }
    def reset_password_token_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reset_password_token_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def reset_password_token_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def reset_password_token_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_previously_was; end

    sig { returns(T.nilable(::String)) }
    def reset_password_token_was; end

    sig { void }
    def reset_password_token_will_change!; end

    sig { void }
    def restore_admin!; end

    sig { void }
    def restore_confirmation_token!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_email!; end

    sig { void }
    def restore_email_delivery_state!; end

    sig { void }
    def restore_facebook_uid!; end

    sig { void }
    def restore_first_name!; end

    sig { void }
    def restore_github_uid!; end

    sig { void }
    def restore_help!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_last_name!; end

    sig { void }
    def restore_locale!; end

    sig { void }
    def restore_nickname!; end

    sig { void }
    def restore_password_digest!; end

    sig { void }
    def restore_reset_password_token!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_state_event!; end

    sig { void }
    def restore_updated_at!; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_admin; end

    sig { returns(T::Boolean) }
    def saved_change_to_admin?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_confirmation_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_confirmation_token?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email; end

    sig { returns(T::Boolean) }
    def saved_change_to_email?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_email_delivery_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_email_delivery_state?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_facebook_uid; end

    sig { returns(T::Boolean) }
    def saved_change_to_facebook_uid?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_first_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_first_name?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_github_uid; end

    sig { returns(T::Boolean) }
    def saved_change_to_github_uid?; end

    sig { returns(T.nilable([T.nilable(T::Boolean), T.nilable(T::Boolean)])) }
    def saved_change_to_help; end

    sig { returns(T::Boolean) }
    def saved_change_to_help?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_last_name; end

    sig { returns(T::Boolean) }
    def saved_change_to_last_name?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_locale; end

    sig { returns(T::Boolean) }
    def saved_change_to_locale?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_nickname; end

    sig { returns(T::Boolean) }
    def saved_change_to_nickname?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_password_digest; end

    sig { returns(T::Boolean) }
    def saved_change_to_password_digest?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_reset_password_token; end

    sig { returns(T::Boolean) }
    def saved_change_to_reset_password_token?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state_event; end

    sig { returns(T::Boolean) }
    def saved_change_to_state_event?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def state_event; end

    sig { params(value: ::String).returns(::String) }
    def state_event=(value); end

    sig { returns(T::Boolean) }
    def state_event?; end

    sig { returns(T.nilable(::String)) }
    def state_event_before_last_save; end

    sig { returns(T.untyped) }
    def state_event_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_event_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_event_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_event_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def state_event_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_event_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_event_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def state_event_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_event_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_event_was; end

    sig { void }
    def state_event_will_change!; end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_admin?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_confirmation_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_email_delivery_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_facebook_uid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_first_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_github_uid?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_help?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_last_name?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_locale?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_nickname?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_password_digest?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_reset_password_token?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state_event?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def admin(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def removed(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::User::SocialSignupForm).returns(T::Boolean)
      ).returns(T::Array[::User::SocialSignupForm])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def waiting_confirmation(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAASMMachine < AASM::Base
    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(User::SocialSignupForm).void)
      ).returns(T.untyped)
    end
    def after_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(User::SocialSignupForm).void)
      ).returns(T.untyped)
    end
    def after_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(User::SocialSignupForm).void)
      ).returns(T.untyped)
    end
    def after_all_transitions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(User::SocialSignupForm).void)
      ).returns(T.untyped)
    end
    def before_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(User::SocialSignupForm).void)
      ).returns(T.untyped)
    end
    def before_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(User::SocialSignupForm).void)
      ).returns(T.untyped)
    end
    def ensure_on_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(User::SocialSignupForm).void)
      ).returns(T.untyped)
    end
    def error_on_all_events(*callbacks, &block); end

    sig { params(name: T.untyped, options: T.untyped, block: T.proc.bind(PrivateAASMEvent).void).returns(T.untyped) }
    def event(name, options = nil, &block); end

    class PrivateAASMEvent < AASM::Core::Event
      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_commit(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_success(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def ensure(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def error(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def success(symbol = nil, &block); end

      sig do
        params(
          definitions: T.untyped,
          block: T.nilable(T.proc.bind(PrivateAASMTransition).void)
        ).returns(T.untyped)
      end
      def transitions(definitions = nil, &block); end
    end

    class PrivateAASMTransition < AASM::Core::Transition
      sig do
        params(
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after(&block); end

      sig do
        params(
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T::Boolean)
      end
      def guard(&block); end

      sig do
        params(
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def on_transition(&block); end

      sig do
        params(
          block: T.nilable(T.proc.bind(User::SocialSignupForm).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def success(&block); end
    end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User::SocialSignupForm } }

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def to_a; end

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::User::SocialSignupForm } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def size(column_name = nil, &block); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::User::SocialSignupForm } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::User::SocialSignupForm } }

    sig do
      params(
        records: T.any(::User::SocialSignupForm, T::Enumerable[T.any(::User::SocialSignupForm, T::Enumerable[::User::SocialSignupForm])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::User::SocialSignupForm, T::Enumerable[T.any(::User::SocialSignupForm, T::Enumerable[::User::SocialSignupForm])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::User::SocialSignupForm, T::Enumerable[T.any(::User::SocialSignupForm, T::Enumerable[::User::SocialSignupForm])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def load_target; end

    sig do
      params(
        records: T.any(::User::SocialSignupForm, T::Enumerable[T.any(::User::SocialSignupForm, T::Enumerable[::User::SocialSignupForm])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::User::SocialSignupForm, T::Enumerable[T.any(::User::SocialSignupForm, T::Enumerable[::User::SocialSignupForm])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::User::SocialSignupForm, T::Enumerable[T.any(::User::SocialSignupForm, T::Enumerable[::User::SocialSignupForm])])
      ).returns(T::Array[::User::SocialSignupForm])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def target; end

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def to_a; end

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::User::SocialSignupForm } }

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def to_a; end

    sig { returns(T::Array[::User::SocialSignupForm]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::User::SocialSignupForm } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def size(column_name = nil, &block); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::User::SocialSignupForm } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end

  STATE_ACTIVE = T.let(T.unsafe(nil), Symbol)
  STATE_REMOVED = T.let(T.unsafe(nil), Symbol)
  STATE_WAITING_CONFIRMATION = T.let(T.unsafe(nil), Symbol)
end
