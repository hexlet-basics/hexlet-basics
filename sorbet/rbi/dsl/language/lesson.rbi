# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `Language::Lesson`.
# Please instead update this file by running `bin/tapioca dsl Language::Lesson`.


class Language::Lesson
  include GeneratedAssociationMethods
  include GeneratedAttributeMethods
  extend CommonRelationMethods
  extend GeneratedRelationMethods

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def activate_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def active?; end

  sig { returns(T::Boolean) }
  def archived?; end

  sig { returns(T::Boolean) }
  def created?; end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_as_archived(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_as_archived!(*opts); end

  sig { params(opts: T.untyped).returns(T.untyped) }
  def mark_as_archived_without_validation!(*opts); end

  sig { returns(T::Boolean) }
  def may_activate?; end

  sig { returns(T::Boolean) }
  def may_mark_as_archived?; end

  private

  sig { returns(NilClass) }
  def to_ary; end

  class << self
    sig { params(args: T.untyped, block: T.nilable(T.proc.bind(PrivateAASMMachine).void)).returns(PrivateAASMMachine) }
    def aasm(*args, &block); end

    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def new(attributes = nil, &block); end
  end

  module CommonRelationMethods
    sig { params(block: T.nilable(T.proc.params(record: ::Language::Lesson).returns(T.untyped))).returns(T::Boolean) }
    def any?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def average(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Language::Lesson).void)).returns(::Language::Lesson) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def build(attributes = nil, &block); end

    sig { params(operation: Symbol, column_name: T.any(String, Symbol)).returns(T.any(Integer, Float, BigDecimal)) }
    def calculate(operation, column_name); end

    sig { params(column_name: T.nilable(T.any(String, Symbol))).returns(Integer) }
    sig { params(column_name: NilClass, block: T.proc.params(object: ::Language::Lesson).void).returns(Integer) }
    def count(column_name = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Language::Lesson).void)).returns(::Language::Lesson) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def create(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(object: ::Language::Lesson).void)).returns(::Language::Lesson) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def create!(attributes = nil, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def create_or_find_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def create_or_find_by!(attributes, &block); end

    sig { returns(T::Array[::Language::Lesson]) }
    def destroy_all; end

    sig { params(conditions: T.untyped).returns(T::Boolean) }
    def exists?(conditions = :none); end

    sig { returns(T.nilable(::Language::Lesson)) }
    def fifth; end

    sig { returns(::Language::Lesson) }
    def fifth!; end

    sig do
      params(
        args: T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])
      ).returns(::Language::Lesson)
    end
    sig do
      params(
        args: T::Array[T.any(String, Symbol, ::ActiveSupport::Multibyte::Chars, T::Boolean, BigDecimal, Numeric, ::ActiveRecord::Type::Binary::Data, ::ActiveRecord::Type::Time::Value, Date, Time, ::ActiveSupport::Duration, T::Class[T.anything])]
      ).returns(T::Enumerable[::Language::Lesson])
    end
    sig do
      params(
        args: NilClass,
        block: T.proc.params(object: ::Language::Lesson).void
      ).returns(T.nilable(::Language::Lesson))
    end
    def find(args = nil, &block); end

    sig { params(args: T.untyped).returns(T.nilable(::Language::Lesson)) }
    def find_by(*args); end

    sig { params(args: T.untyped).returns(::Language::Lesson) }
    def find_by!(*args); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: ::Language::Lesson).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[::Language::Lesson])
    end
    def find_each(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol,
        block: T.proc.params(object: T::Array[::Language::Lesson]).void
      ).void
    end
    sig do
      params(
        start: T.untyped,
        finish: T.untyped,
        batch_size: Integer,
        error_on_ignore: T.untyped,
        order: Symbol
      ).returns(T::Enumerator[T::Enumerator[::Language::Lesson]])
    end
    def find_in_batches(start: nil, finish: nil, batch_size: 1000, error_on_ignore: nil, order: :asc, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def find_or_create_by(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def find_or_create_by!(attributes, &block); end

    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def find_or_initialize_by(attributes, &block); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(T.nilable(::Language::Lesson)) }
    def find_signed(signed_id, purpose: nil); end

    sig { params(signed_id: T.untyped, purpose: T.untyped).returns(::Language::Lesson) }
    def find_signed!(signed_id, purpose: nil); end

    sig { params(arg: T.untyped, args: T.untyped).returns(::Language::Lesson) }
    def find_sole_by(arg, *args); end

    sig { returns(T.nilable(::Language::Lesson)) }
    sig { params(limit: Integer).returns(T::Array[::Language::Lesson]) }
    def first(limit = nil); end

    sig { returns(::Language::Lesson) }
    def first!; end

    sig { returns(T.nilable(::Language::Lesson)) }
    def forty_two; end

    sig { returns(::Language::Lesson) }
    def forty_two!; end

    sig { returns(T.nilable(::Language::Lesson)) }
    def fourth; end

    sig { returns(::Language::Lesson) }
    def fourth!; end

    sig { returns(Array) }
    def ids; end

    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped,
        block: T.proc.params(object: PrivateRelation).void
      ).void
    end
    sig do
      params(
        of: Integer,
        start: T.untyped,
        finish: T.untyped,
        load: T.untyped,
        error_on_ignore: T.untyped,
        order: Symbol,
        use_ranges: T.untyped
      ).returns(::ActiveRecord::Batches::BatchEnumerator)
    end
    def in_batches(of: 1000, start: nil, finish: nil, load: false, error_on_ignore: nil, order: :asc, use_ranges: nil, &block); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def include?(record); end

    sig { returns(T.nilable(::Language::Lesson)) }
    sig { params(limit: Integer).returns(T::Array[::Language::Lesson]) }
    def last(limit = nil); end

    sig { returns(::Language::Lesson) }
    def last!; end

    sig { params(block: T.nilable(T.proc.params(record: ::Language::Lesson).returns(T.untyped))).returns(T::Boolean) }
    def many?(&block); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def maximum(column_name); end

    sig { params(record: T.untyped).returns(T::Boolean) }
    def member?(record); end

    sig { params(column_name: T.any(String, Symbol)).returns(T.untyped) }
    def minimum(column_name); end

    sig { params(block: T.nilable(T.proc.params(object: ::Language::Lesson).void)).returns(::Language::Lesson) }
    sig do
      params(
        attributes: T::Array[T.untyped],
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(T::Array[::Language::Lesson])
    end
    sig do
      params(
        attributes: T.untyped,
        block: T.nilable(T.proc.params(object: ::Language::Lesson).void)
      ).returns(::Language::Lesson)
    end
    def new(attributes = nil, &block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Language::Lesson).returns(T.untyped))).returns(T::Boolean) }
    def none?(&block); end

    sig { params(block: T.nilable(T.proc.params(record: ::Language::Lesson).returns(T.untyped))).returns(T::Boolean) }
    def one?(&block); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pick(*column_names); end

    sig { params(column_names: T.untyped).returns(T.untyped) }
    def pluck(*column_names); end

    sig { returns(T.nilable(::Language::Lesson)) }
    def second; end

    sig { returns(::Language::Lesson) }
    def second!; end

    sig { returns(T.nilable(::Language::Lesson)) }
    def second_to_last; end

    sig { returns(::Language::Lesson) }
    def second_to_last!; end

    sig { returns(::Language::Lesson) }
    def sole; end

    sig { params(initial_value_or_column: T.untyped).returns(T.any(Integer, Float, BigDecimal)) }
    sig do
      type_parameters(:U)
        .params(
          initial_value_or_column: T.nilable(T.type_parameter(:U)),
          block: T.proc.params(object: ::Language::Lesson).returns(T.type_parameter(:U))
        ).returns(T.type_parameter(:U))
    end
    def sum(initial_value_or_column = nil, &block); end

    sig { returns(T.nilable(::Language::Lesson)) }
    sig { params(limit: Integer).returns(T::Array[::Language::Lesson]) }
    def take(limit = nil); end

    sig { returns(::Language::Lesson) }
    def take!; end

    sig { returns(T.nilable(::Language::Lesson)) }
    def third; end

    sig { returns(::Language::Lesson) }
    def third!; end

    sig { returns(T.nilable(::Language::Lesson)) }
    def third_to_last; end

    sig { returns(::Language::Lesson) }
    def third_to_last!; end
  end

  module GeneratedAssociationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(::Language) }
    def build_language(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Language::Module) }
    def build_module(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Language) }
    def create_language(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Language) }
    def create_language!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Language::Module) }
    def create_module(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(::Language::Module) }
    def create_module!(*args, &blk); end

    sig { returns(T::Array[T.untyped]) }
    def info_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def info_ids=(ids); end

    # This method is created by ActiveRecord on the `Language::Lesson` class because it declared `has_many :infos, through: :versions`.
    # 🔗 [Rails guide for `has_many_through` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-through-association)
    sig { returns(::Language::Lesson::Version::Info::PrivateCollectionProxy) }
    def infos; end

    sig { params(value: T::Enumerable[::Language::Lesson::Version::Info]).void }
    def infos=(value); end

    sig { returns(T.nilable(::Language)) }
    def language; end

    sig { params(value: T.nilable(::Language)).void }
    def language=(value); end

    sig { returns(T::Boolean) }
    def language_changed?; end

    sig { returns(T::Boolean) }
    def language_previously_changed?; end

    sig { returns(T.nilable(::Language::Module)) }
    def module; end

    sig { params(value: T.nilable(::Language::Module)).void }
    def module=(value); end

    sig { returns(T::Boolean) }
    def module_changed?; end

    sig { returns(T::Boolean) }
    def module_previously_changed?; end

    sig { returns(T.nilable(::Language)) }
    def reload_language; end

    sig { returns(T.nilable(::Language::Module)) }
    def reload_module; end

    sig { void }
    def reset_language; end

    sig { void }
    def reset_module; end

    sig { returns(T::Array[T.untyped]) }
    def version_ids; end

    sig { params(ids: T::Array[T.untyped]).returns(T::Array[T.untyped]) }
    def version_ids=(ids); end

    # This method is created by ActiveRecord on the `Language::Lesson` class because it declared `has_many :versions`.
    # 🔗 [Rails guide for `has_many` association](https://guides.rubyonrails.org/association_basics.html#the-has-many-association)
    sig { returns(::Language::Lesson::Version::PrivateCollectionProxy) }
    def versions; end

    sig { params(value: T::Enumerable[::Language::Lesson::Version]).void }
    def versions=(value); end
  end

  module GeneratedAssociationRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateAssociationRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def archived(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def created(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateAssociationRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_join_lesson_member_and_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::Language::Lesson).returns(T::Boolean)
      ).returns(T::Array[::Language::Lesson])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def web(*args, &blk); end

    sig { returns(PrivateAssociationRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateAssociationRelation) }
    def without(*args, &blk); end
  end

  module GeneratedAttributeMethods
    sig { returns(::ActiveSupport::TimeWithZone) }
    def created_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def created_at=(value); end

    sig { returns(T::Boolean) }
    def created_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_before_last_save; end

    sig { returns(T.untyped) }
    def created_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def created_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def created_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def created_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def created_at_was; end

    sig { void }
    def created_at_will_change!; end

    sig { returns(::Integer) }
    def id; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id=(value); end

    sig { returns(T::Boolean) }
    def id?; end

    sig { returns(T.nilable(::Integer)) }
    def id_before_last_save; end

    sig { returns(T.untyped) }
    def id_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_previously_was; end

    sig { returns(::Integer) }
    def id_value; end

    sig { params(value: ::Integer).returns(::Integer) }
    def id_value=(value); end

    sig { returns(T::Boolean) }
    def id_value?; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_before_last_save; end

    sig { returns(T.untyped) }
    def id_value_before_type_cast; end

    sig { returns(T::Boolean) }
    def id_value_came_from_user?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_change_to_be_saved; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_in_database; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def id_value_previous_change; end

    sig { params(from: ::Integer, to: ::Integer).returns(T::Boolean) }
    def id_value_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def id_value_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def id_value_was; end

    sig { void }
    def id_value_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def id_was; end

    sig { void }
    def id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def language_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def language_id=(value); end

    sig { returns(T::Boolean) }
    def language_id?; end

    sig { returns(T.nilable(::Integer)) }
    def language_id_before_last_save; end

    sig { returns(T.untyped) }
    def language_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def language_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def language_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def language_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def language_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def language_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def language_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def language_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def language_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def language_id_was; end

    sig { void }
    def language_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def module_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def module_id=(value); end

    sig { returns(T::Boolean) }
    def module_id?; end

    sig { returns(T.nilable(::Integer)) }
    def module_id_before_last_save; end

    sig { returns(T.untyped) }
    def module_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def module_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def module_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def module_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def module_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def module_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def module_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def module_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def module_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def module_id_was; end

    sig { void }
    def module_id_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def natural_order; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def natural_order=(value); end

    sig { returns(T::Boolean) }
    def natural_order?; end

    sig { returns(T.nilable(::Integer)) }
    def natural_order_before_last_save; end

    sig { returns(T.untyped) }
    def natural_order_before_type_cast; end

    sig { returns(T::Boolean) }
    def natural_order_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def natural_order_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def natural_order_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def natural_order_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def natural_order_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def natural_order_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def natural_order_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def natural_order_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def natural_order_was; end

    sig { void }
    def natural_order_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def order; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def order=(value); end

    sig { returns(T::Boolean) }
    def order?; end

    sig { returns(T.nilable(::Integer)) }
    def order_before_last_save; end

    sig { returns(T.untyped) }
    def order_before_type_cast; end

    sig { returns(T::Boolean) }
    def order_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def order_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def order_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def order_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def order_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def order_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def order_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def order_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def order_was; end

    sig { void }
    def order_will_change!; end

    sig { returns(T.nilable(::String)) }
    def original_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def original_code=(value); end

    sig { returns(T::Boolean) }
    def original_code?; end

    sig { returns(T.nilable(::String)) }
    def original_code_before_last_save; end

    sig { returns(T.untyped) }
    def original_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def original_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def original_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def original_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def original_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def original_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def original_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def original_code_was; end

    sig { void }
    def original_code_will_change!; end

    sig { returns(T.nilable(::String)) }
    def path_to_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def path_to_code=(value); end

    sig { returns(T::Boolean) }
    def path_to_code?; end

    sig { returns(T.nilable(::String)) }
    def path_to_code_before_last_save; end

    sig { returns(T.untyped) }
    def path_to_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def path_to_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def path_to_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def path_to_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def path_to_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def path_to_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def path_to_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def path_to_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def path_to_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def path_to_code_was; end

    sig { void }
    def path_to_code_will_change!; end

    sig { returns(T.nilable(::String)) }
    def prepared_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def prepared_code=(value); end

    sig { returns(T::Boolean) }
    def prepared_code?; end

    sig { returns(T.nilable(::String)) }
    def prepared_code_before_last_save; end

    sig { returns(T.untyped) }
    def prepared_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def prepared_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def prepared_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def prepared_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def prepared_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def prepared_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def prepared_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def prepared_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def prepared_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def prepared_code_was; end

    sig { void }
    def prepared_code_will_change!; end

    sig { void }
    def restore_created_at!; end

    sig { void }
    def restore_id!; end

    sig { void }
    def restore_id_value!; end

    sig { void }
    def restore_language_id!; end

    sig { void }
    def restore_module_id!; end

    sig { void }
    def restore_natural_order!; end

    sig { void }
    def restore_order!; end

    sig { void }
    def restore_original_code!; end

    sig { void }
    def restore_path_to_code!; end

    sig { void }
    def restore_prepared_code!; end

    sig { void }
    def restore_slug!; end

    sig { void }
    def restore_state!; end

    sig { void }
    def restore_state_event!; end

    sig { void }
    def restore_test_code!; end

    sig { void }
    def restore_updated_at!; end

    sig { void }
    def restore_upload_id!; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_created_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_created_at?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_id?; end

    sig { returns(T.nilable([::Integer, ::Integer])) }
    def saved_change_to_id_value; end

    sig { returns(T::Boolean) }
    def saved_change_to_id_value?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_language_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_language_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_module_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_module_id?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_natural_order; end

    sig { returns(T::Boolean) }
    def saved_change_to_natural_order?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_order; end

    sig { returns(T::Boolean) }
    def saved_change_to_order?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_original_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_original_code?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_path_to_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_path_to_code?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_prepared_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_prepared_code?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_slug; end

    sig { returns(T::Boolean) }
    def saved_change_to_slug?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_state; end

    sig { returns(T::Boolean) }
    def saved_change_to_state?; end

    sig { returns(T.nilable([::String, ::String])) }
    def saved_change_to_state_event; end

    sig { returns(T::Boolean) }
    def saved_change_to_state_event?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def saved_change_to_test_code; end

    sig { returns(T::Boolean) }
    def saved_change_to_test_code?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def saved_change_to_updated_at; end

    sig { returns(T::Boolean) }
    def saved_change_to_updated_at?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def saved_change_to_upload_id; end

    sig { returns(T::Boolean) }
    def saved_change_to_upload_id?; end

    sig { returns(T.nilable(::String)) }
    def slug; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def slug=(value); end

    sig { returns(T::Boolean) }
    def slug?; end

    sig { returns(T.nilable(::String)) }
    def slug_before_last_save; end

    sig { returns(T.untyped) }
    def slug_before_type_cast; end

    sig { returns(T::Boolean) }
    def slug_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def slug_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def slug_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def slug_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def slug_previously_was; end

    sig { returns(T.nilable(::String)) }
    def slug_was; end

    sig { void }
    def slug_will_change!; end

    sig { returns(T.nilable(::String)) }
    def state; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def state=(value); end

    sig { returns(T::Boolean) }
    def state?; end

    sig { returns(T.nilable(::String)) }
    def state_before_last_save; end

    sig { returns(T.untyped) }
    def state_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(::String) }
    def state_event; end

    sig { params(value: ::String).returns(::String) }
    def state_event=(value); end

    sig { returns(T::Boolean) }
    def state_event?; end

    sig { returns(T.nilable(::String)) }
    def state_event_before_last_save; end

    sig { returns(T.untyped) }
    def state_event_before_type_cast; end

    sig { returns(T::Boolean) }
    def state_event_came_from_user?; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_event_change; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_event_change_to_be_saved; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def state_event_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_event_in_database; end

    sig { returns(T.nilable([::String, ::String])) }
    def state_event_previous_change; end

    sig { params(from: ::String, to: ::String).returns(T::Boolean) }
    def state_event_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_event_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_event_was; end

    sig { void }
    def state_event_will_change!; end

    sig { returns(T.nilable(::String)) }
    def state_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def state_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def state_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def state_previously_was; end

    sig { returns(T.nilable(::String)) }
    def state_was; end

    sig { void }
    def state_will_change!; end

    sig { returns(T.nilable(::String)) }
    def test_code; end

    sig { params(value: T.nilable(::String)).returns(T.nilable(::String)) }
    def test_code=(value); end

    sig { returns(T::Boolean) }
    def test_code?; end

    sig { returns(T.nilable(::String)) }
    def test_code_before_last_save; end

    sig { returns(T.untyped) }
    def test_code_before_type_cast; end

    sig { returns(T::Boolean) }
    def test_code_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def test_code_change; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def test_code_change_to_be_saved; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def test_code_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def test_code_in_database; end

    sig { returns(T.nilable([T.nilable(::String), T.nilable(::String)])) }
    def test_code_previous_change; end

    sig { params(from: T.nilable(::String), to: T.nilable(::String)).returns(T::Boolean) }
    def test_code_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::String)) }
    def test_code_previously_was; end

    sig { returns(T.nilable(::String)) }
    def test_code_was; end

    sig { void }
    def test_code_will_change!; end

    sig { returns(::ActiveSupport::TimeWithZone) }
    def updated_at; end

    sig { params(value: ::ActiveSupport::TimeWithZone).returns(::ActiveSupport::TimeWithZone) }
    def updated_at=(value); end

    sig { returns(T::Boolean) }
    def updated_at?; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_before_last_save; end

    sig { returns(T.untyped) }
    def updated_at_before_type_cast; end

    sig { returns(T::Boolean) }
    def updated_at_came_from_user?; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_change_to_be_saved; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_in_database; end

    sig { returns(T.nilable([::ActiveSupport::TimeWithZone, ::ActiveSupport::TimeWithZone])) }
    def updated_at_previous_change; end

    sig { params(from: ::ActiveSupport::TimeWithZone, to: ::ActiveSupport::TimeWithZone).returns(T::Boolean) }
    def updated_at_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_previously_was; end

    sig { returns(T.nilable(::ActiveSupport::TimeWithZone)) }
    def updated_at_was; end

    sig { void }
    def updated_at_will_change!; end

    sig { returns(T.nilable(::Integer)) }
    def upload_id; end

    sig { params(value: T.nilable(::Integer)).returns(T.nilable(::Integer)) }
    def upload_id=(value); end

    sig { returns(T::Boolean) }
    def upload_id?; end

    sig { returns(T.nilable(::Integer)) }
    def upload_id_before_last_save; end

    sig { returns(T.untyped) }
    def upload_id_before_type_cast; end

    sig { returns(T::Boolean) }
    def upload_id_came_from_user?; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upload_id_change; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upload_id_change_to_be_saved; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upload_id_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upload_id_in_database; end

    sig { returns(T.nilable([T.nilable(::Integer), T.nilable(::Integer)])) }
    def upload_id_previous_change; end

    sig { params(from: T.nilable(::Integer), to: T.nilable(::Integer)).returns(T::Boolean) }
    def upload_id_previously_changed?(from: T.unsafe(nil), to: T.unsafe(nil)); end

    sig { returns(T.nilable(::Integer)) }
    def upload_id_previously_was; end

    sig { returns(T.nilable(::Integer)) }
    def upload_id_was; end

    sig { void }
    def upload_id_will_change!; end

    sig { returns(T::Boolean) }
    def will_save_change_to_created_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_id_value?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_language_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_module_id?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_natural_order?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_order?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_original_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_path_to_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_prepared_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_slug?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_state_event?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_test_code?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_updated_at?; end

    sig { returns(T::Boolean) }
    def will_save_change_to_upload_id?; end
  end

  module GeneratedRelationMethods
    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def active(*args, &blk); end

    sig { returns(PrivateRelation) }
    def all; end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def and(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def annotate(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def archived(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def arel_columns(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def create_with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def created(*args, &blk); end

    sig { params(value: T::Boolean).returns(PrivateRelation) }
    def distinct(value = true); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def eager_load(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def except(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def excluding(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def extending(*args, &blk); end

    sig { params(association: Symbol).returns(T::Array[T.untyped]) }
    def extract_associated(association); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def from(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelationGroupChain) }
    def group(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def having(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def in_order_of(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def includes(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def invert_where(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_join_lesson_member_and_user(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def left_outer_joins(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def limit(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def lock(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def merge(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def none(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def null_relation?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def offset(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def only(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def optimizer_hints(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def or(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def ordered(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def preload(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def readonly(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def references(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def regroup(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reorder(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reselect(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def reverse_order(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def rewhere(*args, &blk); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    sig do
      params(
        blk: T.proc.params(record: ::Language::Lesson).returns(T::Boolean)
      ).returns(T::Array[::Language::Lesson])
    end
    def select(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def strict_loading(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def structurally_compatible?(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def uniq!(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def unscope(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def web(*args, &blk); end

    sig { returns(PrivateRelationWhereChain) }
    sig { params(args: T.untyped).returns(PrivateRelation) }
    def where(*args); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def with_recursive(*args, &blk); end

    sig { params(args: T.untyped, blk: T.untyped).returns(PrivateRelation) }
    def without(*args, &blk); end
  end

  class PrivateAASMMachine < AASM::Base
    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Language::Lesson).void)
      ).returns(T.untyped)
    end
    def after_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Language::Lesson).void)
      ).returns(T.untyped)
    end
    def after_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Language::Lesson).void)
      ).returns(T.untyped)
    end
    def after_all_transitions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Language::Lesson).void)
      ).returns(T.untyped)
    end
    def before_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Language::Lesson).void)
      ).returns(T.untyped)
    end
    def before_all_transactions(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Language::Lesson).void)
      ).returns(T.untyped)
    end
    def ensure_on_all_events(*callbacks, &block); end

    sig do
      params(
        callbacks: T.any(String, Symbol, T::Class[T.anything], Proc),
        block: T.nilable(T.proc.bind(Language::Lesson).void)
      ).returns(T.untyped)
    end
    def error_on_all_events(*callbacks, &block); end

    sig { params(name: T.untyped, options: T.untyped, block: T.proc.bind(PrivateAASMEvent).void).returns(T.untyped) }
    def event(name, options = nil, &block); end

    class PrivateAASMEvent < AASM::Core::Event
      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_commit(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def after_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_success(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def before_transaction(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def ensure(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def error(symbol = nil, &block); end

      sig do
        params(
          symbol: T.nilable(Symbol),
          block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)
        ).returns(T.untyped)
      end
      def success(symbol = nil, &block); end

      sig do
        params(
          definitions: T.untyped,
          block: T.nilable(T.proc.bind(PrivateAASMTransition).void)
        ).returns(T.untyped)
      end
      def transitions(definitions = nil, &block); end
    end

    class PrivateAASMTransition < AASM::Core::Transition
      sig { params(block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)).returns(T.untyped) }
      def after(&block); end

      sig { params(block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)).returns(T::Boolean) }
      def guard(&block); end

      sig { params(block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)).returns(T.untyped) }
      def on_transition(&block); end

      sig { params(block: T.nilable(T.proc.bind(Language::Lesson).params(opts: T.untyped).void)).returns(T.untyped) }
      def success(&block); end
    end
  end

  class PrivateAssociationRelation < ::ActiveRecord::AssociationRelation
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Language::Lesson } }

    sig { returns(T::Array[::Language::Lesson]) }
    def to_a; end

    sig { returns(T::Array[::Language::Lesson]) }
    def to_ary; end
  end

  class PrivateAssociationRelationGroupChain < PrivateAssociationRelation
    Elem = type_member { { fixed: ::Language::Lesson } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def size(column_name = nil, &block); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateAssociationRelationWhereChain
    Elem = type_member { { fixed: ::Language::Lesson } }

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateAssociationRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateAssociationRelation) }
    def not(opts, *rest); end
  end

  class PrivateCollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include CommonRelationMethods
    include GeneratedAssociationRelationMethods

    Elem = type_member { { fixed: ::Language::Lesson } }

    sig do
      params(
        records: T.any(::Language::Lesson, T::Enumerable[T.any(::Language::Lesson, T::Enumerable[::Language::Lesson])])
      ).returns(PrivateCollectionProxy)
    end
    def <<(*records); end

    sig do
      params(
        records: T.any(::Language::Lesson, T::Enumerable[T.any(::Language::Lesson, T::Enumerable[::Language::Lesson])])
      ).returns(PrivateCollectionProxy)
    end
    def append(*records); end

    sig { returns(PrivateCollectionProxy) }
    def clear; end

    sig do
      params(
        records: T.any(::Language::Lesson, T::Enumerable[T.any(::Language::Lesson, T::Enumerable[::Language::Lesson])])
      ).returns(PrivateCollectionProxy)
    end
    def concat(*records); end

    sig { returns(T::Array[::Language::Lesson]) }
    def load_target; end

    sig do
      params(
        records: T.any(::Language::Lesson, T::Enumerable[T.any(::Language::Lesson, T::Enumerable[::Language::Lesson])])
      ).returns(PrivateCollectionProxy)
    end
    def prepend(*records); end

    sig do
      params(
        records: T.any(::Language::Lesson, T::Enumerable[T.any(::Language::Lesson, T::Enumerable[::Language::Lesson])])
      ).returns(PrivateCollectionProxy)
    end
    def push(*records); end

    sig do
      params(
        other_array: T.any(::Language::Lesson, T::Enumerable[T.any(::Language::Lesson, T::Enumerable[::Language::Lesson])])
      ).returns(T::Array[::Language::Lesson])
    end
    def replace(other_array); end

    sig { returns(PrivateAssociationRelation) }
    def scope; end

    sig { returns(T::Array[::Language::Lesson]) }
    def target; end

    sig { returns(T::Array[::Language::Lesson]) }
    def to_a; end

    sig { returns(T::Array[::Language::Lesson]) }
    def to_ary; end
  end

  class PrivateRelation < ::ActiveRecord::Relation
    include CommonRelationMethods
    include GeneratedRelationMethods

    Elem = type_member { { fixed: ::Language::Lesson } }

    sig { returns(T::Array[::Language::Lesson]) }
    def to_a; end

    sig { returns(T::Array[::Language::Lesson]) }
    def to_ary; end
  end

  class PrivateRelationGroupChain < PrivateRelation
    Elem = type_member { { fixed: ::Language::Lesson } }

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)]) }
    def average(column_name); end

    sig do
      params(
        operation: Symbol,
        column_name: T.any(String, Symbol)
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def calculate(operation, column_name); end

    sig { params(column_name: T.untyped).returns(T::Hash[T.untyped, Integer]) }
    def count(column_name = nil); end

    sig { params(args: T.untyped, blk: T.untyped).returns(T.self_type) }
    def having(*args, &blk); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def maximum(column_name); end

    sig { params(column_name: T.any(String, Symbol)).returns(T::Hash[T.untyped, T.untyped]) }
    def minimum(column_name); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def size(column_name = nil, &block); end

    sig do
      params(
        column_name: T.nilable(T.any(String, Symbol)),
        block: T.nilable(T.proc.params(record: T.untyped).returns(T.untyped))
      ).returns(T::Hash[T.untyped, T.any(Integer, Float, BigDecimal)])
    end
    def sum(column_name = nil, &block); end
  end

  class PrivateRelationWhereChain
    Elem = type_member { { fixed: ::Language::Lesson } }

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def associated(*args); end

    sig { params(args: T.untyped).returns(PrivateRelation) }
    def missing(*args); end

    sig { params(opts: T.untyped, rest: T.untyped).returns(PrivateRelation) }
    def not(opts, *rest); end
  end

  STATE_ACTIVE = T.let(T.unsafe(nil), Symbol)
  STATE_ARCHIVED = T.let(T.unsafe(nil), Symbol)
  STATE_CREATED = T.let(T.unsafe(nil), Symbol)
end
