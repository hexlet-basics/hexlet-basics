# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveSupport::TestCase`.
# Please instead update this file by running `bin/tapioca dsl ActiveSupport::TestCase`.


class ActiveSupport::TestCase
  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[BlogPost]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(BlogPost) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[BlogPost])
  end
  def blog_posts(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[BookRequest]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(BookRequest) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[BookRequest])
  end
  def book_requests(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Category]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::Category) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Category])
  end
  def language_categories(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::LandingPage::QnaItem]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::LandingPage::QnaItem) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::LandingPage::QnaItem])
  end
  def language_landing_page_qna_item(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::LandingPage]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::LandingPage) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::LandingPage])
  end
  def language_landing_pages(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Lesson::Member::Message]) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: NilClass
    ).returns(Language::Lesson::Member::Message)
  end
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Lesson::Member::Message])
  end
  def language_lesson_member_messages(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Lesson::Member]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::Lesson::Member) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Lesson::Member])
  end
  def language_lesson_members(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Lesson::Version::Info]) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: NilClass
    ).returns(Language::Lesson::Version::Info)
  end
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Lesson::Version::Info])
  end
  def language_lesson_version_infos(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Lesson::Version]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::Lesson::Version) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Lesson::Version])
  end
  def language_lesson_versions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Lesson]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::Lesson) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Lesson])
  end
  def language_lessons(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Member]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::Member) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Member])
  end
  def language_members(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Module::Version::Info]) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: NilClass
    ).returns(Language::Module::Version::Info)
  end
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Module::Version::Info])
  end
  def language_module_version_infos(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Module::Version]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::Module::Version) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Module::Version])
  end
  def language_module_versions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Module]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::Module) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Module])
  end
  def language_modules(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language::Version]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language::Version) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language::Version])
  end
  def language_versions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Language]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Language) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Language])
  end
  def languages(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Lead]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Lead) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Lead]) }
  def leads(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Review]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Review) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Review]) }
  def reviews(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Survey::Answer]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Survey::Answer) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Survey::Answer])
  end
  def survey_answers(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Survey::Item]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Survey::Item) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Survey::Item])
  end
  def survey_items(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Survey::Scenario::Item]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Survey::Scenario::Item) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Survey::Scenario::Item])
  end
  def survey_scenario_items(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Survey::Scenario::Member]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Survey::Scenario::Member) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Survey::Scenario::Member])
  end
  def survey_scenario_members(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Survey::Scenario::Trigger]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Survey::Scenario::Trigger) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Survey::Scenario::Trigger])
  end
  def survey_scenario_triggers(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Survey::Scenario]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Survey::Scenario) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Survey::Scenario])
  end
  def survey_scenarios(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Survey]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Survey) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[Survey]) }
  def surveys(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[User]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(User) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[User]) }
  def users(fixture_name = nil, *other_fixtures); end
end
