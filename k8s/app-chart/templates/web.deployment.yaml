---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-web-deployment"
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: "{{ .Chart.Name }}"
    app.kubernetes.io/instance: "{{ .Release.Name }}"
    app.kubernetes.io/version: "{{ .Chart.AppVersion }}"
    app.kubernetes.io/managed-by: "{{ .Release.Service }}"

spec:
  replicas: 2

  selector:
    matchLabels:
      app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
      app.kubernetes.io/instance: "{{ .Release.Name }}"
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/name: "{{ .Release.Name }}-web-pod"
        app.kubernetes.io/instance: "{{ .Release.Name }}"
        helm.sh/chart: '{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}'
        codebasics/pod: "{{ .Release.Name }}-{{ .Values.version }}-web-pod"
    spec:
      nodeSelector:
        group: "{{ .Release.Namespace }}"

      imagePullSecrets:
        - name: docker-config

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "codebasics/pod"
                    operator: In
                    values:
                      - "{{ .Release.Name }}-{{ .Values.version }}-web-pod"
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: role
                    operator: In
                    values:
                      - web

      volumes:
        - name: users-code-path
          hostPath:
            path: /tmp/hexlet-basics
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
        - name: docker-secret
          secret:
            secretName: docker-config
            items:
              - key: .dockerconfigjson
                path: config.json

      # NOTE: по умолчанию, если контейнеры не завершили свою работу за 30с, они будут завершены принудительно
      # увеличиваем время ожидания с дефолтных 30с на 45с, так как дефолтного времени может уже быть недостаточно
      terminationGracePeriodSeconds: 45

      containers:
        - name: nginx
          imagePullPolicy: Always
          image: "{{ .Values.nginx.image.repository }}:{{ .Values.version }}"
          startupProbe:
            httpGet:
              path: /health
              port: 8080
            periodSeconds: 10
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 8
            periodSeconds: 8
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 60
            failureThreshold: 3
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: '30Mi'
              cpu: 15m

          # NOTE: перед закрытием контейнера ждём ответы для открытых соединений
          # все запросы которые с длительностью более 10с, получат ответы 503
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "10"]

        - name: web
          imagePullPolicy: Always
          image: "{{ .Values.app.image.repository }}:{{ .Values.version }}"
          ports:
            - containerPort: 3000
          startupProbe:
            httpGet:
              path: /up
              port: 3000
              httpHeaders:
                - name: X-Forwarded-Proto
                  value: https
            periodSeconds: 10
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /up
              port: 3000
              httpHeaders:
                - name: X-Forwarded-Proto
                  value: https
            initialDelaySeconds: 5
            periodSeconds: 8
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /up
              port: 3000
              httpHeaders:
                - name: X-Forwarded-Proto
                  value: https
            initialDelaySeconds: 20
            periodSeconds: 20
            failureThreshold: 3

          resources:
            requests:
              memory: "500Mi"
              cpu: "100m"
            limits:
              memory: '1500Mi'
          volumeMounts:
            - mountPath: /tmp/hexlet-basics
              name: users-code-path
            - mountPath: /var/run/docker.sock
              name: docker-sock
            - name: docker-secret
              mountPath: /home/rails/.docker
          envFrom:
            - secretRef:
                name: codebasics-environment-secrets
          env:
            - name: HEXLET_BASICS_RELEASE_VERSION
              value: {{ .Values.version }}

          # NOTE: приложение должно работать дольше чем nginx иначе будут поступать ответы 502
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "15"]
            postStart:
              exec:
                command: {{ .Values.slack_notification }}

        - name: cable
          imagePullPolicy: Always
          image: "{{ .Values.app.image.repository }}:{{ .Values.version }}"
          command: ["make", "services-cable-run"]
          startupProbe:
            httpGet:
              path: /up
              port: 28080
            periodSeconds: 10
            failureThreshold: 30
          readinessProbe:
            httpGet:
              path: /up
              port: 28080
            initialDelaySeconds: 5
            periodSeconds: 8
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /up
              port: 28080
            initialDelaySeconds: 20
            periodSeconds: 20
            timeoutSeconds: 3
          ports:
            - containerPort: 28080
          resources:
            requests:
              memory: 100Mi
              cpu: 100m
            limits:
              memory: 500Mi
          envFrom:
            - secretRef:
                name: codebasics-environment-secrets
          env:
            - name: RAILS_MAX_THREADS
              value: "6"

          lifecycle:
            preStop:
              exec:
                command: ["sleep", "15"]

        - name: ssr
          imagePullPolicy: Always
          image: "{{ .Values.app.image.repository }}:{{ .Values.version }}"
          command: ["bin/vite", "ssr"]
          startupProbe:
            httpGet:
              path: /health
              port: 13714
            periodSeconds: 5
            failureThreshold: 12
          readinessProbe:
            httpGet:
              path: /health
              port: 13714
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            failureThreshold: 2
          livenessProbe:
            httpGet:
              path: /health
              port: 13714
            initialDelaySeconds: 20
            periodSeconds: 12
            timeoutSeconds: 3
            failureThreshold: 3
          ports:
            - containerPort: 13714
          resources:
            requests:
              memory: 200Mi
              cpu: 100m
            limits:
              memory: 500Mi
          env:
            - name: NODE_ENV
              valueFrom:
                secretKeyRef:
                  name: codebasics-environment-secrets
                  key: NODE_ENV
            - name: NODE_OPTIONS
              value: "--max-old-space-size=256"
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "15"]
