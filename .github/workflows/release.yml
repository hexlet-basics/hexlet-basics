name: release

on:
  push:
    tags:
        - 'v*'

env:
  CI: true
  APP_IMAGE_NAME: hexletbasics/services-app
  # CADDY_IMAGE_NAME: hexletbasics/services-caddy
  NGINX_IMAGE_NAME: hexletbasics/services-nginx
  # COLOR_MAP: '{ success: "#008000", failure: "#800000" }'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set Tag To The Env
        run: echo "RELEASE_VERSION=$(echo ${GITHUB_REF:10})" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # - name: Build App
      #   uses: docker/build-push-action@v6
      #   with:
      #     # context: .
      #     # file: Dockerfile.production
      #     cache-from: type=registry,ref=${{ env.APP_IMAGE_NAME }}
      #     cache-to: type=inline
      #     push: true
      #     tags: ${{ env.APP_IMAGE_NAME }}

      # - name: Check
      #   run: |
      #     make ansible-generate-env
      #     docker compose --file docker-compose.yml up --abort-on-container-exit

      - name: Build&Push App
        uses: docker/build-push-action@v6
        with:
          # context: .
          # file: Dockerfile.production
          cache-from: type=registry,ref=${{ env.APP_IMAGE_NAME }}
          push: true
          tags: ${{ env.APP_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          secrets: |
            "sentry-org=${{ secrets.SENTRY_ORG }}"
            "sentry-project=${{ secrets.SENTRY_PROJECT }}"
            "sentry-dsn=${{ secrets.SENTRY_DSN }}"
            "sentry-auth-token=${{ secrets.SENTRY_AUTH_TOKEN }}"
            "posthog-api-key=${{ secrets.POSTHOG_API_KEY }}"
            "posthog-api-host=${{ secrets.POSTHOG_API_HOST }}"
            "carrotquest-api-key=${{ secrets.CARROTQUEST_API_KEY }}"
          build-args: |
            RELEASE_VERSION=${{ env.RELEASE_VERSION }}

      - name: Build&Push Nginx
        uses: docker/build-push-action@v6
        with:
          context: .
          file: services/web-nginx/Dockerfile
          push: true
          tags: ${{ env.NGINX_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}
          build-args: |
            APP_IMAGE_WITH_TAG=${{ env.APP_IMAGE_NAME }}:${{ env.RELEASE_VERSION }}


      # - name: Send notification into Slack
      #   if: ${{ always() }}
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_COLOR: ${{ fromJson(env.COLOR_MAP)[job.status] }}
      #     SLACK_TITLE: ${{ job.status }}
      #     SLACK_MESSAGE: RELEASE
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
